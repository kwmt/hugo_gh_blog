<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Androg</title>
    <link>kwmt27.net/tags/android/</link>
    <description>Recent content in Android on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 09 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Studioを1.0にバージョンアップしたら、Gradle DSL method not found: &amp;#8216;runProguard()&amp;#8217;って怒られた場合</title>
      <link>/kwmt27.net/index.php/2014/12/09/android-studio-1-0-gradle-dsl-method-not-found-runproguard/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/12/09/android-studio-1-0-gradle-dsl-method-not-found-runproguard/</guid>
      <description>&lt;p&gt;Android Studioがついに1.0になりましたね。ということで&lt;a href=&#34;http://bit.ly/1ueoqlV&#34; target=&#34;_blank&#34;&gt;ダウンロード&lt;/a&gt;して、起動したらgradleのバージョンを1.0.0にしろとかいろいろ怒られたんですが、そこらへんは自動で修正してくれたのに、下記のエラーは自動で修正してくれませんでしたのでメモ。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Error:(32, 0) Gradle DSL method not found: &#39;runProguard()&#39;
&lt;/pre&gt;

&lt;p&gt;対応は&lt;code&gt;runProguard&lt;/code&gt;を&lt;code&gt;minifyEnabled&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;diff --git a/app/build.gradle b/app/build.gradle
index 351288d..08b53f8 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -29,7 +29,7 @@ android {
-            runProguard false
+            minifyEnabled false
             proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
         }
     }
&lt;/pre&gt;

&lt;p&gt;詳しくは、&lt;a href=&#34;http://bit.ly/1ueoeD6&#34; target=&#34;_blank&#34;&gt;Migrating Gradle Projects to version 1.0.0 &amp;#8211; Android Tools Project Site&lt;/a&gt; に記載してあります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>android wear appのインストール時の注意点</title>
      <link>/kwmt27.net/index.php/2014/11/19/notice_when_install_android_wearable_apps/</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/11/19/notice_when_install_android_wearable_apps/</guid>
      <description>

&lt;p&gt;開発時（といいますか、デバッグキーを使ってビルドしている時）は、携帯端末とWearable端末に別々にインストールしないと、携帯端末だけにインストールしても自動的にWearable端末にインストールされません。&lt;/p&gt;

&lt;p&gt;リリースキーを使って署名している場合は、自動的にインストールされます。&lt;/p&gt;

&lt;h2 id=&#34;参考:3e31c56e68adfbff999614b6e2ca60cf&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/wearables/apps/creating.html#Install&#34; target=&#34;_blank&#34;&gt;Install the Wearable App&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TwitterのFabric SDKをAndroid Studioで使ってみる</title>
      <link>/kwmt27.net/index.php/2014/11/10/how-to-use-twitter-fabric-sdk-with-android-studio/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/11/10/how-to-use-twitter-fabric-sdk-with-android-studio/</guid>
      <description>

&lt;h2 id=&#34;はじめに:b0282adda1b6c326f04989549de27210&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;ひさびさTwitterをつかってアプリつくろうと思って&lt;a href=&#34;https://dev.twitter.com/&#34; target=&#34;_blank&#34;&gt;ディベロッパーサイト&lt;/a&gt;に行ったら、fabric?????とか出てきてなんじゃこれ？と思って調べてたら、10/22(現地時間)に発表されたTwitterのモバイル向け新SDKとやららしい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://bit.ly/1CYl4HO&#34; target=&#34;_blank&#34;&gt;Twitter、モバイルアプリ向け新SDK「Fabric」発表　パスワード不要の次世代認証「Digits」リリース &amp;#8211; ITmedia ニュース&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まぁ英語でもいいんだけど、日本語の情報ないかなぁと探してみたけど、全然ない(´・ω・`)&lt;/p&gt;

&lt;p&gt;ということで、Android StudioでFabric SDKのセットアップしてから、ツイートできるようになるまでを書いてみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;android版fabricの公式サイト:b0282adda1b6c326f04989549de27210&#34;&gt;Android版Fabricの公式サイト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android&#34;&gt;https://dev.twitter.com/twitter-kit/android&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;確認したバージョン:b0282adda1b6c326f04989549de27210&#34;&gt;確認したバージョン&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;Android Studio：0.9.2
Fabric SDK：1.0.1
&lt;/pre&gt;

&lt;h2 id=&#34;アプリの登録:b0282adda1b6c326f04989549de27210&#34;&gt;アプリの登録&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://apps.twitter.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://apps.twitter.com/&#34;&gt;https://apps.twitter.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これは普通に登録するだけ（今までどおり）&lt;/p&gt;

&lt;h2 id=&#34;fabric-sdkのセットアップ:b0282adda1b6c326f04989549de27210&#34;&gt;Fabric SDKのセットアップ&lt;/h2&gt;

&lt;p&gt;IDEプラグインをダウンロードすることもできるみたいだが、Gradleを使っているなら、build.gradleに書くだけで済ませたい。&lt;/p&gt;

&lt;p&gt;基本的には下記を参考にすればよいと思うのですが、早速build.gradleの設定ではまった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34;&gt;https://dev.twitter.com/twitter-kit/android/integrate&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記書いてあるとおりに記述してもsyncに失敗するので、Fabric SDKを使うには下記のように設定すればsyncは通っていけたっぽい。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;--- a/build.gradle
+++ b/build.gradle
@@ -3,17 +3,21 @@
 buildscript {
     repositories {
         jcenter()
+        maven { url &#39;https://maven.fabric.io/repo&#39; }
     }
     dependencies {
         classpath &#39;com.android.tools.build:gradle:0.12.+&#39;
+        classpath &#39;io.fabric.tools:gradle:1.+&#39;
     }
 }
 
 allprojects {
+    apply plugin: &#39;io.fabric&#39;
     repositories {
         jcenter()
+        maven { url &#39;https://maven.fabric.io/repo&#39; }
     }
 }
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;--- a/app/build.gradle
+++ b/app/build.gradle
@@ -23,5 +37,7 @@ dependencies {
     compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
     compile &#39;com.google.android.gms:play-services:6.1.71&#39;
     compile &#39;com.android.support:support-v4:21.+&#39;
+    compile(&#39;com.twitter.sdk.android:twitter:1.0.0@aar&#39;) {
+        transitive = true;
+    }
 }
&lt;/pre&gt;

&lt;h2 id=&#34;api-keyとapi-secretを追加する:b0282adda1b6c326f04989549de27210&#34;&gt;API KEYとAPI Secretを追加する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34;&gt;https://dev.twitter.com/twitter-kit/android/integrate&lt;/a&gt;&lt;/a&gt; に「Add API Key and Build Secret」があるが、&lt;project&gt;/app/crashlytics.properties にAPI KEYとAPI Secretを書きます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;twitterConsumerSecret=&amp;lt;YOUR SECRET&amp;gt;
twitterConsumerKey=&amp;lt;YOUR KEY&amp;gt;
&lt;/pre&gt;

&lt;p&gt;crashlytics.propertiesに書いたKEYとSECRETの使い方に関しては、下記のリポジトリのbuild.gradleが参考になった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/twitterdev/cannonball-android/blob/master/app/build.gradle&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/twitterdev/cannonball-android/blob/master/app/build.gradle&#34;&gt;https://github.com/twitterdev/cannonball-android/blob/master/app/build.gradle&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;僕が書いたのは下記です。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,5 +1,13 @@ apply plugin: &#39;com.android.application&#39;
 
+Properties props = new Properties()
+try {
+    props.load(file(&#39;./crashlytics.properties&#39;).newDataInputStream())
+} catch (Exception ex) {
+    throw new GradleException(&#34;Missing crashlytics.properties, check the crashlytics.properties file.&#34;);
+}
+
+
 android {
     compileSdkVersion 21
     buildToolsVersion &#34;20.0.0&#34;
@@ -12,7 +20,13 @@ android {
         versionName &#34;1.0&#34;
     }
     buildTypes {
+        debug {
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_KEY&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerKey&#34;)}\&#34;&#34;
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_SECRET&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerSecret&#34;)}\&#34;&#34;
+        }
         release {
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_KEY&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerKey&#34;)}\&#34;&#34;
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_SECRET&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerSecret&#34;)}\&#34;&#34;
             runProguard false
             proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
         }

&lt;/pre&gt;

&lt;p&gt;これは、buildConfigFieldを使っていて、アプリ内でBuildConfigを使ってKEYとSECRETを使えるようにしています。&lt;/p&gt;

&lt;p&gt;次のように、ApplicationクラスのサブクラスでAPI KEYとSECRETを使ってFabric SDKの初期化します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;public class App extends Application{

    @Override
    public void onCreate() {
        super.onCreate();
        TwitterAuthConfig authConfig = new TwitterAuthConfig(BuildConfig.CONSUMER_KEY, BuildConfig.CONSUMER_SECRET);
        Fabric.with(this, new TwitterCore(authConfig));
    }
}
&lt;/pre&gt;

&lt;p&gt;※AndroidManifest.xmlに&lt;code&gt;android:name=&amp;quot;.App&amp;quot;&lt;/code&gt;を追加することを忘れないこと。&lt;/p&gt;

&lt;h2 id=&#34;twitterでログインする:b0282adda1b6c326f04989549de27210&#34;&gt;Twitterでログインする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/twitter-login&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/twitter-login&#34;&gt;https://dev.twitter.com/twitter-kit/android/twitter-login&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ログイン画面を作成します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;&amp;lt;com.twitter.sdk.android.core.identity.TwitterLoginButton
        android:id=&#34;@+id/login_button&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;プレビューは「SIGN IN WITH TWITTER」と英語表記ですが、日本語設定の端末で確認すると「Twitterでログイン」と日本語になっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/11/sign_in_with_twitter-168x300.png&#34; alt=&#34;sign_in_with_twitter&#34; width=&#34;168&#34; height=&#34;300&#34; class=&#34;aligncenter size-thumbnail wp-image-1356&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Activityの方は公式サイトどおりでいけます。&lt;/p&gt;

&lt;p&gt;ログイン成功後の&lt;code&gt;TwitterSession&lt;/code&gt;を受け取る事ができるのですが、&lt;code&gt;result.data&lt;/code&gt;で取得できます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;mTwitterLoginButton = (TwitterLoginButton) findViewById(R.id.login_button);
mTwitterLoginButton.setCallback(new Callback&amp;lt;TwitterSession&gt;() {
    @Override
        public void success(Result&amp;lt;TwitterSession&gt; result) {
        mTwitterSession = result.data;
    }
}   
&lt;/pre&gt;

&lt;h2 id=&#34;twitterのrest-apiを使う:b0282adda1b6c326f04989549de27210&#34;&gt;TwitterのREST APIを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/api&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/api&#34;&gt;https://dev.twitter.com/twitter-kit/android/api&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式サイトの例は、１つのツイートを取得しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid&#34;&gt;https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;僕はツイートしたかったので、こんな感じになりました。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;/**
 * ツイートする。
 * @param message ツイートする内容
 * @see https://dev.twitter.com/rest/reference/post/statuses/update
 */
private void tweet(String message) {
    TwitterApiClient twitterApiClient = TwitterCore.getInstance().getApiClient();
    StatusesService statusesService = twitterApiClient.getStatusesService();

    statusesService.update(message, null, false, null, null, null, false, null, new Callback&amp;lt;Tweet&gt;() {
        @Override
        public void success(Result&amp;lt;Tweet&gt; result) {
            mHandler.post(new Runnable() {
                public void run() {
                    Toast.makeText(self, &#34;ツイートしました。&#34;, Toast.LENGTH_SHORT).show();
                }
            });
        }

        public void failure(TwitterException exception) {
            mHandler.post(new Runnable() {
                public void run() {
                    Toast.makeText(self, &#34;ツイートに失敗しました。&#34;, Toast.LENGTH_SHORT).show();
                }
            });

        }
    });
}
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;StatusesService#update&lt;/code&gt;の引数の順番は、REST APIドキュメントの順番どおりです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/post/statuses/update&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/post/statuses/update&#34;&gt;https://dev.twitter.com/rest/reference/post/statuses/update&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;tweet&lt;/code&gt;メソッドを呼びたいタイミングで呼べばツイートできます。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:b0282adda1b6c326f04989549de27210&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;以上で、Fabric SDKのセットアップからツイートまでを書きましたが、&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/tweetui&#34; target=&#34;_blank&#34;&gt;TweetUi Kit&lt;/a&gt;や &lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/compose&#34; target=&#34;_blank&#34;&gt;TweetComposer Kit&lt;/a&gt;なるものがあったり、電話番号を使ってサインインする&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/digits&#34; target=&#34;_blank&#34;&gt;Digits&lt;/a&gt;なるものがあるみたいですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android StudiodでgreenDaoを使う</title>
      <link>/kwmt27.net/index.php/2014/09/17/how-to-use-greendao-library/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/17/how-to-use-greendao-library/</guid>
      <description>

&lt;h2 id=&#34;はじめに:c037d87e89bf2c7318095970bf4dad30&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;AndroidのORMライブラリについて調べてみてまして、ORMLite、Active Android、greenDaoが有名のようです。&lt;/p&gt;

&lt;p&gt;ORMLite、Active Androidは、アノテーションを使っていて、greenDaoは使っていません。&lt;/p&gt;

&lt;p&gt;アノテーションはリフレクションに依存しているため、特にAndroidデバイスにおいては、パフォーマンスに影響出ますので、greenDaoを使おうかと思います。(&lt;a href=&#34;#sanko&#34;&gt;参考1&lt;/a&gt;などをみますと、パフォーマンスにクリティカルに影響があるアプリでなければどれつかっても良さそうですが・・・）&lt;/p&gt;

&lt;h2 id=&#34;使い方としては:c037d87e89bf2c7318095970bf4dad30&#34;&gt;使い方としては、&lt;/h2&gt;

&lt;p&gt;２ステップ必要で、１ステップ目は、モデル定義しgreendao-generatorでコードを自動生成します。(普通のjava)&lt;/p&gt;

&lt;p&gt;２ステップ目として、自動生成したコードをAndroidに組み込みます。&lt;/p&gt;

&lt;p&gt;それで、自動生成するために新規にjavaプロジェクトを作る必要があると書いてある参考サイトが多くて、確かにそれでもいいのですが、別プロジェクトを作るのが面倒くさいし、プロジェクトが別なので管理がバラバラになりそうなので、なんとかしてのプロジェクトで出来ないか調べていた所、ちょ～分かりやすく書いて下さっていたサイトがありましたので、リンク張らせて頂きます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/1yf9A5G&#34; target=&#34;_blank&#34;&gt;Android Studioでgradle taskを使ってgreenDaoのDao生成を行う &amp;#8211; きょこみのーと&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ほとんど上記で、Android Studioのバージョンが0.8時に、リポジトリがmavenCentral()からjcenter()に変更になったことと、自動生成の出力先(上記のサイトではdaoOutputDirPath)に注意することぐらいでしょうか。&lt;/p&gt;

&lt;p&gt;あとは、ココらへんを見たりしてgreenDaoの使い方を確認すると良いと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/YRdS3A&#34; target=&#34;_blank&#34;&gt;Documentation | greenDAO – Android ORM for SQLite&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:c037d87e89bf2c7318095970bf4dad30&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;li id=&#34;sanko&#34;&gt;
  &lt;a href=&#34;http://bit.ly/1wBwKBn&#34; target=&#34;_blank&#34;&gt;Androidで使えるOR Mapper: ORMLite « LINE Engineers&amp;#8217; Blog&lt;/a&gt;
&lt;/li&gt;
  1. &lt;a href=&#34;http://bit.ly/Xzc3r0&#34; target=&#34;_blank&#34;&gt;Non-technical FAQ | greenDAO – Android ORM for SQLite&lt;/a&gt;
  2. &lt;a href=&#34;http://bit.ly/XzcGki&#34; target=&#34;_blank&#34;&gt;ormlite &amp;#8211; Green DAO vs ORM lite vs Active Android &amp;#8211; Stack Overflow&lt;/a&gt;
  3. &lt;a href=&#34;http://bit.ly/YRe8zz&#34; target=&#34;_blank&#34;&gt;[Android Tips] ActiveAndroid を使って ActiveRecord ライクに SQLite を操作する ｜ Developers.IO&lt;/a&gt;
      * &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798040029/kwmt27-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Androidオープンソースライブラリ徹底活用(書籍)&lt;/a&gt;&lt;/ol&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Androidプロジェクトを新規作成してVolleyが使えるようになるまで</title>
      <link>/kwmt27.net/index.php/2014/07/10/how-to-use-volley-library/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/07/10/how-to-use-volley-library/</guid>
      <description>

&lt;p&gt;サンプルプロジェクトは、&lt;a href=&#34;https://github.com/kwmt/volleysample&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;におきました。&lt;/p&gt;

&lt;h2 id=&#34;androidプロジェクトを新規作成する:76e3898ab09f841248548e63f72fd0b4&#34;&gt;Androidプロジェクトを新規作成する&lt;/h2&gt;

&lt;p&gt;Android StudioでNew Projectを作成する (例プロジェクト名：VolleySample)&lt;/p&gt;

&lt;h2 id=&#34;volleyプロジェクトを追加する:76e3898ab09f841248548e63f72fd0b4&#34;&gt;volleyプロジェクトを追加する&lt;/h2&gt;

&lt;p&gt;volleyプロジェクトを作成したAndroidプロジェクトにsubmoduleとして追加・設定する&lt;/p&gt;

&lt;p&gt;1.作成したプロジェクトに移動してgit init
&lt;pre class=&#34;go&#34;&gt;$ cd VolleySample
$ git init
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;2.必要なら.gitignoreに追加してコミット
  3.volleyプロジェクトを追加する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ git submodule add https://android.googlesource.com/platform/frameworks/volley modules/volley
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;VolleySample/modules/volley にcloneされる&lt;/li&gt;
&lt;li&gt;.gitmudulesに自動的に追加される&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;go&#34;&gt;$ git diff --cached
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule &#34;modules/volley&#34;]
+       path = modules/volley
+       url = https://android.googlesource.com/platform/frameworks/volley

--- /dev/null
+++ b/volley
@@ -0,0 +1 @@
+Subproject commit 0e406xxxxxxxx
&lt;/pre&gt;

&lt;p&gt;4.setting.gradleに、volleyプロジェクト追加した時のパスを追加する
&lt;pre class=&#34;go&#34;&gt;$ git diff
&amp;mdash; a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include &amp;lsquo;:app&amp;rsquo;
+include &amp;lsquo;:app&amp;rsquo;,&amp;rsquo;:modules:volley&amp;rsquo;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;5.volleyを使いたいプロジェクトにvolleyの依存設定を追加
&lt;pre class=&#34;go&#34;&gt;$ git diff
&amp;mdash; a/app/build.gradle
+++ b/app/build.gradle
@@ -21,4 +21,5 @@ android {
 dependencies {
     compile fileTree(dir: &amp;lsquo;libs&amp;rsquo;, include: [&amp;rsquo;*.jar&amp;rsquo;])
+    compile project(&amp;rsquo;:modules:volley&amp;rsquo;)
 }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;6.以下はvolleyがアップデートされるまでに必要な対応&lt;/p&gt;

&lt;p&gt;volleyの SDK build tools revisionを19.1.0に修正する&lt;/p&gt;

&lt;p&gt;本来は上記の依存設定まででいいはずだが、それだけだと下記のエラーが出るので仕方がなさそう&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Error:The SDK Build Tools revision (19.0.0) is too low for project &#39;:modules:volley&#39;. Minimum required is 19.1.0
&lt;/pre&gt;

&lt;h2 id=&#34;volleyを使ってみる:76e3898ab09f841248548e63f72fd0b4&#34;&gt;Volleyを使ってみる&lt;/h2&gt;

&lt;p&gt;この記事 &lt;a href=&#34;http://bit.ly/1n8SAca&#34; target=&#34;_blank&#34;&gt;Android working with Volley Library&lt;/a&gt; を参考にvolleyを使ってみます。&lt;/p&gt;

&lt;p&gt;この記事は簡単に言うと、Applicationを継承したシングルトンクラスを使うといい感じに使えるよって感じです。&lt;/p&gt;

&lt;h3 id=&#34;まずapplicationを継承したappcontrollerを作成します:76e3898ab09f841248548e63f72fd0b4&#34;&gt;まずApplicationを継承したAppControllerを作成します&lt;/h3&gt;


&lt;script src=&#34;//gist.github.com/5bb307d224a5d7324890.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;ここでは画像は扱っていません。&lt;/p&gt;

&lt;h3 id=&#34;androidmanifest-xmlに追記:76e3898ab09f841248548e63f72fd0b4&#34;&gt;AndroidManifest.xmlに追記&lt;/h3&gt;

&lt;p&gt;アプリが起動すると自動的に起動させるように、AndroidManifest.xmlにシングルトンクラスを追記します。あと、ネットワークを使用しますので、INTERNET権限を追加します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ git diff
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -2,7 +2,9 @@
 &amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;
     package=&#34;net.kwmt27.volleysample&#34; &amp;gt;
 
+    &amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;
     &amp;lt;application
+        android:name=&#34;net.kwmt27.volleysample.app.AppController&#34;
         android:allowBackup=&#34;true&#34;
         android:icon=&#34;@drawable/ic_launcher&#34;
         android:label=&#34;@string/app_name&#34;
&lt;/pre&gt;

&lt;h3 id=&#34;実際に使ってみます:76e3898ab09f841248548e63f72fd0b4&#34;&gt;実際に使ってみます&lt;/h3&gt;

&lt;p&gt;適当に&lt;code&gt;MainActivity&lt;/code&gt;の&lt;code&gt;onCreate()&lt;/code&gt;に適当なリクエストをなげて、レスポンスを確認します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;@Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+
+        request();
+    }
+
+    private void request() {
+        // Tag used to cancel the request
+        String tag_json_obj = &#34;json_obj_req&#34;;
+
+        String url = &#34;http://api.androidhive.info/volley/person_object.json&#34;;
+
+        JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.GET,
+                url, null,
+                new Response.Listener&amp;lt;JSONObject&gt;() {
+
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        Log.d(TAG, response.toString());
+
+                    }
+                }, new Response.ErrorListener() {
+
+            @Override
+            public void onErrorResponse(VolleyError error) {
+                VolleyLog.d(TAG, &#34;Error: &#34; + error.getMessage());
+            }
+        });
+
+        // Adding request to request queue
+        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
     }

&lt;/pre&gt;

&lt;h3 id=&#34;あとはビルド-起動して確認:76e3898ab09f841248548e63f72fd0b4&#34;&gt;あとはビルド・起動して確認&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;D/MainActivity﹕ {&#34;email&#34;:&#34;ravi8x@gmail.com&#34;,&#34;phone&#34;:{&#34;home&#34;:&#34;08947 000000&#34;,&#34;mobile&#34;:&#34;9999999999&#34;},&#34;name&#34;:&#34;Ravi Tamada&#34;}
&lt;/pre&gt;

&lt;p&gt;こんな感じでlogcatに出ていれば使えています。&lt;/p&gt;

&lt;h2 id=&#34;エラーハンドリング:76e3898ab09f841248548e63f72fd0b4&#34;&gt;エラーハンドリング&lt;/h2&gt;

&lt;p&gt;先ほどの&lt;code&gt;request&lt;/code&gt;メソッドに書いてますが、正常にレスポンスが返ってくれば&lt;code&gt;onResponse&lt;/code&gt;が呼ばれます。では、エラーの場合はどうなるのか？それは&lt;code&gt;onErrorResponse&lt;/code&gt;が呼ばれます。上記のコードでは、ログ出力しているだけですが、エラーハンドリングする必要が出てくると思います。その時は、下記のようにして、それぞれに対応する処理を書いてあげれば良いです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;if( error instanceof NetworkError) {
    } else if( error instanceof ClientError) {
    } else if( error instanceof ServerError) {
    } else if( error instanceof AuthFailureError) {
    } else if( error instanceof ParseError) {
    } else if( error instanceof NoConnectionError) {
    } else if( error instanceof TimeoutError) {
    }
&lt;/pre&gt;

&lt;h2 id=&#34;参考:76e3898ab09f841248548e63f72fd0b4&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1iXgweq&#34; target=&#34;_blank&#34;&gt;Android Studio で Volley を使う &amp;#8211; ひだまりソケットは壊れない&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1oVwQNI&#34; target=&#34;_blank&#34;&gt;Volleyを使うのがかなり簡単になってた &amp;#8211; Islands in the byte stream &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1fDRoJt&#34; target=&#34;_blank&#34;&gt;Git submodule の基礎 &amp;#8211; Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1oVzEdN&#34; target=&#34;_blank&#34;&gt;Git diff says subproject is dirty &amp;#8211; Stack Overflow &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1n8SAca&#34; target=&#34;_blank&#34;&gt;Android working with Volley Library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1oFnBR1&#34; target=&#34;_blank&#34;&gt;Android: How handle message error from the server using Volley? &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Android】久しぶりにAndroidアプリった。</title>
      <link>/kwmt27.net/index.php/2013/03/11/android%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%ABandroid%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A3%E3%81%9F/</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/03/11/android%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%ABandroid%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A3%E3%81%9F/</guid>
      <description>

&lt;p&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;201302-03でやったキーワード&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;久しぶりにAndroidアプリった。こんなに真剣にやったのはたぶん1年ぶりぐらい。&lt;/p&gt;

&lt;p&gt;ググったら日本語の情報がわんさか出てきたことに感動。&lt;/p&gt;

&lt;p&gt;ということで、基本的にはググればわかるので、ここでは今回やったキーワードだけ残しておくメモです。&lt;/p&gt;

&lt;h2 id=&#34;トグルボタンを使うには:373425092af78321030c70a9f1ffccfe&#34;&gt;トグルボタンを使うには？&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;android.widget.ToggleButton&lt;/pre&gt;

&lt;p&gt;OnCheckedChangeListener　をimplementsして、以下のonCheckedChangedをoverride&lt;/p&gt;

&lt;pre class=&#34;brush: java; title: ; notranslate&#34; title=&#34;&#34;&gt;// OnCheckedChangeListenerをimplementした時に実装が必要なメソッド
// トグルボタン用
@Override
public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
if (isChecked){
//ON
} else{
//OFF
}
}
&lt;/pre&gt;

&lt;h2 id=&#34;プリファレンスは:373425092af78321030c70a9f1ffccfe&#34;&gt;プリファレンスは？&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;android.content.SharedPreferences
android.preference.PreferenceActivity&lt;/pre&gt;

&lt;h2 id=&#34;音声認識させるには:373425092af78321030c70a9f1ffccfe&#34;&gt;音声認識させるには？&lt;/h2&gt;

&lt;h3 id=&#34;標準ダイアログが出る:373425092af78321030c70a9f1ffccfe&#34;&gt;標準ダイアログが出る&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;android.speech.RecognizerIntent&lt;/pre&gt;

&lt;h3 id=&#34;標準ダイアログを出さない:373425092af78321030c70a9f1ffccfe&#34;&gt;標準ダイアログを出さない&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;android.speech.SpeechRecognizer&lt;/pre&gt;

&lt;p&gt;※以下のパーミッションが必要&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.RECORD_AUDIO&#34;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;※ダイアログは出ないが、ピコっていう音はなる。&lt;/p&gt;

&lt;h2 id=&#34;一定間隔で処理するには:373425092af78321030c70a9f1ffccfe&#34;&gt;一定間隔で処理するには？&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;java.util.Timer
java.util.TimerTask&lt;/pre&gt;

&lt;h2 id=&#34;ウィジェットを実装するには:373425092af78321030c70a9f1ffccfe&#34;&gt;ウィジェットを実装するには？&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;android.appwidget.AppWidgetManager　を継承したクラス(ここでWidgetProvider)を作成
onUpdateでServiceを継承したクラス(ここではWidgetService)をstartService&lt;/pre&gt;

&lt;p&gt;このとき、マニフェストファイルにこんな感じ書いとく&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;receiver&amp;gt;
android:name=&amp;quot;.WidgetProvider&amp;quot;
android:label=&amp;quot;@string/app_name&amp;quot; &amp;gt;
&amp;lt;intent-filter&amp;gt;
&amp;lt;action android:name=&amp;quot;android.appwidget.action.APPWIDGET_UPDATE&amp;quot; /&amp;gt;
&amp;lt;/intent-filter&amp;gt;
&amp;lt;meta-data
android:name=&amp;quot;android.appwidget.provider&amp;quot;
android:resource=&amp;quot;@xml/widget_provider&amp;quot; /&amp;gt;
&amp;lt;/receiver&amp;gt;
&amp;lt;service android:name=&amp;quot;.WidgetService&amp;quot; &amp;gt;
&amp;lt;intent-filter&amp;gt;
&amp;lt;action android:name=&amp;quot;com.example.myproject.HOGEHOGE&amp;quot;/&amp;gt;
&amp;lt;/intent-filter&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/pre&gt;

&lt;p&gt;サービスタグの は、ウィジェットに対してクリックイベントを取りたいときに必要。&lt;/p&gt;

&lt;p&gt;作成中の自分のプロジェクト（myproject）の中で自分でHOGEHOGEを定義しておき、「HOGEHOGEになったら、ある処理をする」という具合に実装する。&lt;/p&gt;

&lt;h2 id=&#34;画像を繰り返すには:373425092af78321030c70a9f1ffccfe&#34;&gt;画像を繰り返すには？&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;android:tileMode=&#34;repeat&#34;&lt;/pre&gt;

&lt;h2 id=&#34;最後に:373425092af78321030c70a9f1ffccfe&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;上記をキーワードにググれば分かるはず。と自分に言い残してみる。&lt;/p&gt;

&lt;p&gt;参考にしたURLをメモってれば良かったけど、まぁいっか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WebAPIの使い方を勉強しました。</title>
      <link>/kwmt27.net/index.php/2012/03/03/webapi%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2012/03/03/webapi%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/yokmama/androidweb&#34; target=&#34;_blank&#34;&gt;夜子ままさんのスライド&lt;/a&gt;を参考にWebAPIを使ってJSONを取得し、解析してLogに表示するというのをやってみました。（ほとんどスライドの写経です）&lt;/p&gt;

&lt;p&gt;違いは、スライドの例はGoogleMaps APIを使用していますが、Google+APIを使うようにしただけです。&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/kwmt/SampleWebAPI&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;にあげました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ABC2012 Spring 開催</title>
      <link>/kwmt27.net/index.php/2012/02/29/abc2012-spring-%E9%96%8B%E5%82%AC/</link>
      <pubDate>Tue, 28 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2012/02/29/abc2012-spring-%E9%96%8B%E5%82%AC/</guid>
      <description>&lt;p&gt;Android Bazaar Conference 2012 Springが3/24(土)に東京大学で開催されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.android-group.jp/conference/abc2012s&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://androg.up.seesaa.net/image/abc2012s.png&#34;   width=&#34;80%&#34; border=&#34;0&#34; align=&#34;&#34; alt=&#34;abc2012s&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GDDのスタッフが面白かったので、ABCもスタッフとして参加しますので、よろしくお願いします。&lt;/p&gt;

&lt;p&gt;2月のエントリー、これだけになりそう。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 11.10 on VMware でICSビルド時のエラーと対策メモ</title>
      <link>/kwmt27.net/index.php/2011/11/26/ubuntu-11-10-on-vmware-%E3%81%A7ics%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E5%AF%BE%E7%AD%96%E3%83%A1%E3%83%A2/</link>
      <pubDate>Fri, 25 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/11/26/ubuntu-11-10-on-vmware-%E3%81%A7ics%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E5%AF%BE%E7%AD%96%E3%83%A1%E3%83%A2/</guid>
      <description>

&lt;p&gt;新しくVMwareをインストールして、&lt;a href=&#34;http://www.ubuntulinux.jp/products/JA-Localized/download&#34; target=&#34;_blank&#34;&gt;Ubuntu11.10 日本語Remix CDイメージをダウンロード&lt;/a&gt;して、&lt;a href=&#34;http://source.android.com/source/initializing.html&#34; target=&#34;_blank&#34;&gt;これ&lt;/a&gt;を見ながらICSのビルド環境を構築して、makeしたときにエラーが出たのでエラーの内容と対策をメモります。&lt;/p&gt;

&lt;h2 id=&#34;最初に出たエラー:c98a024ee3b8cbd2e243fbd9d4062f00&#34;&gt;最初に出たエラー&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;エラー内容&lt;/dt&gt;
&lt;dd&gt;host C++: obbtool &amp;lt;= frameworks/base/tools/obbtool/Main.cpp :0:0: error: &amp;ldquo;_FORTIFY_SOURCE&amp;rdquo; redefined [-Werror] :0:0: note: this is the location of the previous definition cc1plus: all warnings being treated as errors make: *** [out/host/linux-x86/obj/EXECUTABLES/obbtool_intermediates/Main.o] Error 1&lt;/dd&gt;
&lt;dt&gt;原因&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;ブランチandroid-4.0.1_r1をダウンロードしたから。&lt;/p&gt;

&lt;p&gt;詳しくはこちら→&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/android/issues/detail?id=20795&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://code.google.com/p/android/issues/detail?id=20795&#34;&gt;http://code.google.com/p/android/issues/detail?id=20795&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;対策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;masterブランチをダウンロードした。&lt;/p&gt;

&lt;p&gt;たしかに、core/combo/HOST_linux-x86.mkが&lt;/p&gt;

&lt;p&gt;HOST_GLOBAL_CFLAGS += -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0&lt;/p&gt;

&lt;p&gt;のように修正されてた。これだとうまくいくらしい。&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;参考&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a href=&#34;http://e-xiao.blogspot.com/2011/10/resolve-build-errors-for-android-234.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://e-xiao.blogspot.com/2011/10/resolve-build-errors-for-android-234.html&#34;&gt;http://e-xiao.blogspot.com/2011/10/resolve-build-errors-for-android-234.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;次に出たエラー:c98a024ee3b8cbd2e243fbd9d4062f00&#34;&gt;次に出たエラー&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;エラー内容&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;host Executable: adb (out/host/linux-x86/obj/EXECUTABLES/adb_intermediates/adb)&lt;/p&gt;

&lt;p&gt;host Executable: atree (out/host/linux-x86/obj/EXECUTABLES/atree_intermediates/atree)&lt;/p&gt;

&lt;p&gt;host Executable: bb2sym (out/host/linux-x86/obj/EXECUTABLES/bb2sym_intermediates/bb2sym)&lt;/p&gt;

&lt;p&gt;host Executable: bb_dump (out/host/linux-x86/obj/EXECUTABLES/bb_dump_intermediates/bb_dump)&lt;/p&gt;

&lt;p&gt;/usr/bin/ld: cannot find -lncurses&lt;/p&gt;

&lt;p&gt;collect2: ld returned 1 exit status&lt;/p&gt;

&lt;p&gt;make: *** [out/host/linux-x86/obj/EXECUTABLES/adb_intermediates/adb] Error 1&lt;/p&gt;

&lt;p&gt;make: *** Waiting for unfinished jobs&amp;#8230;.&lt;/p&gt;

&lt;p&gt;true&lt;/p&gt;

&lt;p&gt;true&lt;/p&gt;

&lt;p&gt;true&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;対策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;libncurses5-devをインストールした。&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install libncurses5-dev&lt;/p&gt;

&lt;p&gt;はじめに&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://source.android.com/source/initializing.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://source.android.com/source/initializing.html&#34;&gt;http://source.android.com/source/initializing.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;の「Installing required packages」のタイミングで、入れ忘れてただけ。&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;最後に出たエラー:c98a024ee3b8cbd2e243fbd9d4062f00&#34;&gt;最後に出たエラー&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;エラー内容&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Install: out/host/linux-x86/bin/llvm-link&lt;/p&gt;

&lt;p&gt;out/host/linux-x86/obj/STATIC_LIBRARIES/libLLVMCodeGen_intermediates/libLLVMCodeGen.a: file not recognized: File truncated&lt;/p&gt;

&lt;p&gt;collect2: ld returned 1 exit status&lt;/p&gt;

&lt;p&gt;make: *** [out/host/linux-x86/obj/EXECUTABLES/llvm-rs-cc_intermediates/llvm-rs-cc] Error 1&lt;/p&gt;

&lt;p&gt;make: *** Waiting for unfinished jobs&amp;#8230;.&lt;/p&gt;

&lt;p&gt;out/host/linux-x86/obj/STATIC_LIBRARIES/libLLVMCodeGen_intermediates/libLLVMCodeGen.a: file not recognized: File truncated&lt;/p&gt;

&lt;p&gt;collect2: ld returned 1 exit status&lt;/p&gt;

&lt;p&gt;make: *** [out/host/linux-x86/obj/EXECUTABLES/clang_intermediates/clang] Error 1&lt;/p&gt;

&lt;p&gt;elapsed seconds: 175&lt;/p&gt;

&lt;p&gt;wrote generated Main_*.java files to out/host/linux-x86/obj/EXECUTABLES/vm-tests_intermediates/main_files&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;対策&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;はじめからする。&lt;/p&gt;

&lt;p&gt;具体的には、&lt;/p&gt;

&lt;p&gt;Mydroid&amp;gt;rm -Rf *&lt;/p&gt;

&lt;p&gt;いったん全削除して、&lt;/p&gt;

&lt;p&gt;repo init -u &lt;a href=&#34;http://android.googlesource.com/platform/manifest&#34;&gt;http://android.googlesource.com/platform/manifest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;して、&lt;/p&gt;

&lt;p&gt;repo sync&lt;/p&gt;

&lt;p&gt;して、&lt;/p&gt;

&lt;p&gt;make -j4&lt;/p&gt;

&lt;p&gt;。&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;参考&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/android-building/browse_thread/thread/cae10abd771f2415?hl=en#&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://groups.google.com/group/android-building/browse_thread/thread/cae10abd771f2415?hl=en#&#34;&gt;https://groups.google.com/group/android-building/browse_thread/thread/cae10abd771f2415?hl=en#&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nov 22 4:45 amのRANDYRKELLYさんの投稿に対しての、Nov 22,5:05 am のConley Owensさんの投稿&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>Open Handset AllianceのFAQを訳してみた。</title>
      <link>/kwmt27.net/index.php/2011/10/11/open-handset-alliance%E3%81%AEfaq%E3%82%92%E8%A8%B3%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 11 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/10/11/open-handset-alliance%E3%81%AEfaq%E3%82%92%E8%A8%B3%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.openhandsetalliance.com/index.html&#34; target=&#34;_blank&#34;&gt;Open Handset Alliance&lt;/a&gt;が何をしているのかよく分からず、調べていると&lt;a href=&#34;http://www.openhandsetalliance.com/oha_faq.html&#34; target=&#34;_blank&#34;&gt;FAQのページ&lt;/a&gt;があったので訳してみました。&lt;/p&gt;

&lt;h2 id=&#34;open-handset-alliance-img-src-http-blog-seesaa-jp-images-e-e-f06a-gif-alt-トレードマーク-tm-width-15-height-15-border-0-オープンハンドセットアライアンス-とは何ですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;Open Handset Alliance&lt;img src=&#34;http://blog.seesaa.jp/images_e/e/F06A.gif&#34; alt=&#34;トレードマーク（TM）&#34; width=&#34;15&#34; height=&#34;15&#34; border=&#34;0&#34; /&gt;(オープンハンドセットアライアンス)とは何ですか？&lt;/h2&gt;

&lt;p&gt;Open Handset Allianceは技術とモバイルの企業の84のグループです。彼らはモバイルにおいて、イノベーションを加速し、また消費者により豊かでより安価な、そしてよりよいモバイル体験を提供します。&lt;/p&gt;

&lt;p&gt;我々は、まず完全、オープン、フリーなモバイルプラットフォームであるAndroidを開発しました。&lt;/p&gt;

&lt;p&gt;我々は、商業的にAndroidプラットフォームを使用して端末やサービスの展開に取り組んでいます。&lt;/p&gt;

&lt;h2 id=&#34;オープンハンドセットアライアンスにはどのようなタイプの企業が参加していますか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンハンドセットアライアンスにはどのようなタイプの企業が参加していますか？&lt;/h2&gt;

&lt;p&gt;モバイルエコシステムのすべての部分は、アライアンスで表されます。メンバーは、モバ​​イル通信事業者、端末メーカー、半導体メーカー、ソフトウェア企業、および商業化の企業が含まれています。メンバーの現在のリストは&lt;a href=&#34;http://www.openhandsetalliance.com/oha_members.html&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;で見つけることができます。&lt;/p&gt;

&lt;h2 id=&#34;アライアンスのメンバーはどのようにコミットしていますか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;アライアンスのメンバーはどのようにコミットしていますか？&lt;/h2&gt;

&lt;p&gt;アライアンスのすべてのメンバーは、プラットフォームの最初のバージョンを商業的に成功させることにコミットしました。&lt;/p&gt;

&lt;p&gt;一部の企業は、Apache v2のオープンソースライセンスの下でリリースされるアライアンスへの重要な知的財産を貢献しています。ほかには、参加企業のチップセットがそのプラットフォームをサポートしていることを確認するために取り組んでいます。端末メーカーと携帯電話事業者は、プラットフォームに基づいて携帯端末の開発に取り組んでいます。商業化のパートナーは、専門的なサービスモデルを介してプラットフォームをサポートするために業界と協力しています。&lt;/p&gt;

&lt;h2 id=&#34;オープンプラットフォームは-消費者にとってなぜ良いのですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンプラットフォームは、消費者にとってなぜ良いのですか？&lt;/h2&gt;

&lt;p&gt;消費者はより安くより革新的なモバイルデバイスやサービスに出会い、より魅力的な、使いやすいインターフェイスに必然的になるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;オープンプラットフォームは-携帯電話事業者にとってなぜ良いのですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンプラットフォームは、携帯電話事業者にとってなぜ良いのですか？&lt;/h2&gt;

&lt;p&gt;携帯電話の全体的なコストは低くなり、携帯電話事業者が製品ラインをカスタマイズし識別する完全な柔軟性を持つことになります。さらに、携帯電話やサービスにおいてより急速なイノベーションに出会うでしょう。&lt;/p&gt;

&lt;h2 id=&#34;オープンプラットフォームは-携帯電話メーカーにとってなぜ良いのですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンプラットフォームは、携帯電話メーカーにとってなぜ良いのですか？&lt;/h2&gt;

&lt;p&gt;携帯端末メーカーは、ソフトウェアの生産（BOM）コストを抑え、端末の市場投入までの期間により早くできます。さらに、彼らは彼らの製品の提供をカスタマイズし、識別するためにより高い柔軟性を持つことになります。&lt;/p&gt;

&lt;h2 id=&#34;オープンプラットフォームは-半導体企業にとってなぜ良いのですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンプラットフォームは、半導体企業にとってなぜ良いのですか？&lt;/h2&gt;

&lt;p&gt;携帯電話オンチップが現実に近づくように、半導体企業はこれらのソリューションの拡張機能を活用し、より洗練されたソフトウェアにアクセスする必要があります。&lt;/p&gt;

&lt;p&gt;明日のプロセッサはマルチコアになり、3Dグラフィックス、信号プロセッサコアとマルチメディアアクセラレーションのための専用ブロック、などなどの共有の周辺機器にアクセスできるようになります。&lt;/p&gt;

&lt;p&gt;プラットフォームでこれらの周辺機器のサポートがなければ、半導体企業は、サードパーティの開発者が、この拡張機能にアクセスできるようにする明確な方法がありません。&lt;/p&gt;

&lt;p&gt;オープンプラットフォームは、半導体企業がタイムリーに最新の製品のサポートを追加するのを助けます。&lt;/p&gt;

&lt;h2 id=&#34;オープンプラットフォームは-ソフトウェア企業にとってなぜ良いのですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンプラットフォームは、ソフトウェア企業にとってなぜ良いのですか？&lt;/h2&gt;

&lt;p&gt;オープンプラットフォームは、完全なモバイルプラットホームにソフトウェアコンポーネントの簡単な統合を可能にし、モバイルプラットフォームの低い取得コストは高い価値と差別化されたソフトウェアコンポーネントに投資する携帯端末メーカーの能力を上げます。&lt;/p&gt;

&lt;h2 id=&#34;オープンプラットフォームは開発者にとってなぜ良いのですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンプラットフォームは開発者にとってなぜ良いのですか？&lt;/h2&gt;

&lt;p&gt;開発者はWeb対応な携帯電話の機能への包括的なAPIアクセスを持っているので、急速に技術革新ができるようになります。包括的で使いやすい開発ツールを持っているので、生産性の向上を経験するでしょう。そして、オープンソースが、基盤となるモバイルプラットフォームのより深い理解を提供しているため、アプリケーションを最適化することができます。最後に、携帯アプリの配布と商品化は、より安価で容易になります。&lt;/p&gt;

&lt;h2 id=&#34;オープンハンドセットアライアンスに参加することができるのは誰ですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンハンドセットアライアンスに参加することができるのは誰ですか？&lt;/h2&gt;

&lt;p&gt;Open Handset Allianceは、一緒に、それぞれが様々な方法で努力に貢献するモバイルエコシステムの会社をもたらします。モバイルの世界のオープンさに対して、真剣にかつ継続的な貢献をする意思のある企業を歓迎します。&lt;/p&gt;

&lt;h2 id=&#34;オープンハンドセットアライアンスの参加についてはどちらに連絡すればよいですか:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;オープンハンドセットアライアンスの参加についてはどちらに連絡すればよいですか？&lt;/h2&gt;

&lt;p&gt;info@openhandsetalliance.com Eメールでお問い合わせください&lt;/p&gt;

&lt;p&gt;※間違い等ありましたら、ご指摘頂けると助かります。&lt;/p&gt;

&lt;h2 id=&#34;参考:0d3a137a3cf65adb9ab6daa52ff17abe&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%83%BB%E3%83%8F%E3%83%B3%E3%83%89%E3%82%BB%E3%83%83%E3%83%88%E3%83%BB%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%82%B9&#34; target=&#34;_blank&#34;&gt;オープン・ハンドセット・アライアンス &amp;#8211; Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://e-words.jp/w/OHA.html&#34; target=&#34;_blank&#34;&gt;OHAとは【Open Handset Alliance】 &amp;#8211; 意味/解説/説明/定義 ： IT用語辞典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GDD 2011 DevQuiz Androidの問題のメモ</title>
      <link>/kwmt27.net/index.php/2011/09/14/gdd-2011-devquiz-android%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%83%A1%E3%83%A2/</link>
      <pubDate>Tue, 13 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/09/14/gdd-2011-devquiz-android%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%83%A1%E3%83%A2/</guid>
      <description>

&lt;p&gt;GDD 2011 のDevQuizに初めてチャレンジしました。&lt;/p&gt;

&lt;p&gt;スライドパズルは・・・ですが、AndroidのAIDLの問題は解けたのでそれについて書きたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;問題の概要:3e19a34851e468386636f3c0f4b0cf40&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;以下のAIDLで定義されているサービスを持つAndroid アプリケーションを配布します。&lt;/p&gt;

&lt;p&gt;プログラム作って解答コードを取得してね。&lt;/p&gt;

&lt;pre class=&#34;brush: java; title: ; notranslate&#34; title=&#34;&#34;&gt;package com.google.android.apps.gddquiz;
interface IQuizService {
String getCode();
}
&lt;/pre&gt;

&lt;p&gt;※AIDL（Android Interface Definition Language）とは、IDLの一種で、プロセス間通信行うためのものです。&lt;/p&gt;

&lt;h2 id=&#34;準備:3e19a34851e468386636f3c0f4b0cf40&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;Androidプロジェクトを作成する。このとき、パッケージ名は配布アプリケーションと一緒じゃないといけない。&lt;/p&gt;

&lt;p&gt;IQuizService.aidl ファイルをsrcに作成し、上のコードをコピペ。&lt;/p&gt;

&lt;p&gt;配布されたAndroidアプリケーションを実機でも、エミュレータでもいいからインストールしたら、&lt;/p&gt;

&lt;p&gt;メールアドレスとパスワードを入れる欄があったので、入力する。&lt;/p&gt;

&lt;p&gt;メールアドレスはGDD 2011に登録したアドレスで、パスワードは問題文に書いてありました。&lt;/p&gt;

&lt;p&gt;これで準備は完了。後はプログラム書くだけ。&lt;/p&gt;

&lt;h2 id=&#34;方針は:3e19a34851e468386636f3c0f4b0cf40&#34;&gt;方針は、&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;アクティビティでボタンを押す→自分のサービスにバインド→配布アプリケーションと通信&lt;/li&gt;
&lt;li&gt;LogCatに答えを出す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上&lt;/p&gt;

&lt;h2 id=&#34;activity:3e19a34851e468386636f3c0f4b0cf40&#34;&gt;Activity&lt;/h2&gt;

&lt;pre class=&#34;brush: java; title: ; notranslate&#34; title=&#34;&#34;&gt;package com.google.android.apps.gddquiz;
// import は省略
public class MainActivity Extends Activity {
TextView mTextView;
Button mButton;
@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.main);
mTextView = (TextView)findViewById(R.id.hello);
mButton = (Button)findViewById(R.id.startservice);
// ボタンにリスナーを設定
mButton.setOnClickListener(new startClickListener());
}
// リスナー
public class startClickListener implements OnClickListener {
@Override
public void onClick(View v) {
// bindService()をコール
serviceConnect();
}
}
public void serviceConnect(){
// public abstract boolean bindService (Intent service, ServiceConnection conn, int flags)
bindService(new Intent(com.google.android.apps.gddquiz.IQuizService.class.getName()), // Intent
conn, // ServiceConnection
BIND_AUTO_CREATE); // int:automatically create the service as long as the binding exists.
}
// 以下はServiceにバインドするとき、バインドして何がしたいのかの設定
IQuizService mQuizService;
Boolean mStartedService=false;
private ServiceConnection conn = new ServiceConnection() {
@Override
public void onServiceConnected(ComponentName name, IBinder service) {
Log.d(&#34;ServiceConnection&#34;,&#34;onServiceConnected Start&#34;);
mQuizService = com.google.android.apps.gddquiz.IQuizService.Stub.asInterface(service);
mStartedService = true;
getStringInQuizService();
}
@Override
public void onServiceDisconnected(ComponentName name) {
mQuizService = null;
mStartedService = false;
}
};
public void getStringInQuizService(){
super.onResume();
if( mQuizService != null ){
try {
String ans = mQuizService.getCode().toString();
mTextView.setText((String)ans);
Log.d(&#34;AnsCode&#34;,ans); // 答えをLogCatに出力
//Toast.makeText(this, ans, Toast.LENGTH_LONG).show(); // 先にToast表示したけど、コピペできないじゃん。。。
} catch (RemoteException e) {
}
}
}
}
&lt;/pre&gt;

&lt;h2 id=&#34;service:3e19a34851e468386636f3c0f4b0cf40&#34;&gt;Service&lt;/h2&gt;

&lt;p&gt;bindService()で自分のサービスにバインドし、そこから配布されたアプリケーションにアクセスする。Class名にTestが付いてるけど、気にしない。&lt;/p&gt;

&lt;pre class=&#34;brush: java; title: ; notranslate&#34; title=&#34;&#34;&gt;package com.google.android.apps.gddquiz;
//import は省略
public class TestService extends Service {
private final ITestService.Stub mITestServiceBinder = new ITestService.Stub(){
@Override
public void stopService() throws RemoteException {
}
};
@Override
public void onCreate() {
super.onCreate();
// Toastを表示する
Toast.makeText(this, &#34;Service start&#34;, Toast.LENGTH_SHORT).show();
}
@Override
public IBinder onBind(Intent intent) {
return null;
}
}
&lt;/pre&gt;

&lt;h2 id=&#34;マニフェスト:3e19a34851e468386636f3c0f4b0cf40&#34;&gt;マニフェスト&lt;/h2&gt;

&lt;p&gt;serviceタグを記述する。&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;
&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;
package=&#34;com.google.android.apps.gddquiz&#34;
android:versionCode=&#34;1&#34;
android:versionName=&#34;1.0&#34;&amp;gt;
&amp;lt;uses-sdk android:minSdkVersion=&#34;4&#34; /&amp;gt;
&amp;lt;application android:icon=&#34;@drawable/icon&#34; android:label=&#34;@string/app_name&#34;&amp;gt;
&amp;lt;activity android:name=&#34;com.google.android.apps.gddquiz.MainActivity&#34;
android:label=&#34;@string/app_name&#34;&amp;gt;
&amp;lt;intent-filter&amp;gt;
&amp;lt;action android:name=&#34;android.intent.action.MAIN&#34; /&amp;gt;
&amp;lt;category android:name=&#34;android.intent.category.LAUNCHER&#34; /&amp;gt;
&amp;lt;/intent-filter&amp;gt;
&amp;lt;/activity&amp;gt;
&amp;lt;service android:name=&#34;TestService&#34;&amp;gt;
&amp;lt;intent-filter&amp;gt;
&amp;lt;action android:name=&#34;com.google.android.apps.gddquiz.IQuizService&#34;/&amp;gt;
&amp;lt;/intent-filter&amp;gt;&amp;gt;
&amp;lt;/service&amp;gt;
&amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/pre&gt;

&lt;p&gt;以上です。AIDL自体は知識としては知っていたけど、初めて使ったなぁ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ACE勉強会で、Serviceの概要を発表した。</title>
      <link>/kwmt27.net/index.php/2011/08/15/ace%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%81%A7service%E3%81%AE%E6%A6%82%E8%A6%81%E3%82%92%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 15 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/08/15/ace%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%81%A7service%E3%81%AE%E6%A6%82%E8%A6%81%E3%82%92%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F/</guid>
      <description>&lt;p&gt;日本Androidの会 神戸支部で、「Androidアプリケーション技術者認定試験ベーシック対策実践問題集」をみんなで読んで勉強しようという勉強会（ACE勉強会）が毎週開催されているのですが（2011/08/10で6回目）、5回目のときにServiceはマルチスレッドか？という疑問が出たので、6回目までにServiceについて誰かまとめてきてーということだったので、手を上げてまとめた資料です。まとめたといっても、Developerサイトを訳しただけですが、それでも、疑問に対する回答はできると思ったので、まぁいいかなと。&lt;/p&gt;

&lt;div style=&#34;width:425px&#34; id=&#34;__ss_8852449&#34;&gt;
  &lt;strong style=&#34;display:block;margin:12px 0 4px&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/yasi_life/service-8852449&#34; title=&#34;Serviceについて&#34; target=&#34;_blank&#34;&gt;Serviceについて&lt;/a&gt;&lt;/strong&gt; 
  
  &lt;div style=&#34;padding:5px 0 12px&#34;&gt;
    View more &lt;a href=&#34;http://www.slideshare.net/&#34; target=&#34;_blank&#34;&gt;presentations&lt;/a&gt; from &lt;a href=&#34;http://www.slideshare.net/yasi_life&#34; target=&#34;_blank&#34;&gt;yasi_life&lt;/a&gt;
  &lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;あくまでも概要なので、雰囲気だけでもつかんで頂けたら幸いです。発表時にスレッドのところなど突っ込まれました。もうちょうっと細かく見ないといけませんね。&lt;/p&gt;

&lt;p&gt;あ、結果的には質問した方の疑問には応えられなかったので、また次回ということになりました。なので、発表としては失敗ですね。もっと勉強しないと。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Bazaar and Conference 2011 Summer #abc2011s に参加してきました。</title>
      <link>/kwmt27.net/index.php/2011/07/29/android-bazaar-and-conference-2011-summer-abc2011s-%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 29 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/07/29/android-bazaar-and-conference-2011-summer-abc2011s-%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>

&lt;p&gt;2011/07/17(日)に、&lt;a href=&#34;http://www.android-group.jp/abc2011s/&#34;&gt;Android Bazaar and Conference 2011 Summer&lt;/a&gt;に参加してきました。&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/abc2011s_750x250-thumbnail2.jpg&#34; width=&#34;80%&#34; border=&#34;0&#34; align=&#34;&#34; alt=&#34;abc2011s_750x250.jpg&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/abc2011s_750x250.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;abc当日:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;■ABC当日&lt;/h2&gt;

&lt;p&gt;場所は東京の早稲田大学、僕の生息地は神戸。&lt;/p&gt;

&lt;p&gt;行きました。飛行機で。&lt;/p&gt;

&lt;p&gt;朝7：20神戸空港発の飛行機で6：50ぐらいに神戸空港つきました。ギリギリ。&lt;/p&gt;

&lt;p&gt;ABCは10時からなので、10時前には到着の予定でした。&lt;/p&gt;

&lt;p&gt;でもそれは、東京行き慣れた人の話で、&lt;/p&gt;

&lt;p&gt;僕は羽田からの電車の切符を買うのに10分ぐらいかかってしまい、もうアウト。&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-172010.26.52-thumbnail2.jpg&#34; width=&#34;240&#34; height=&#34;320&#34; border=&#34;0&#34; align=&#34;早稲田大学 8号館前&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-172010.26.52.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;会場では、&lt;a href=&#34;http://www.android-group.jp/abc2011s/conference.html&#34;&gt;カンファレンス&lt;/a&gt;と&lt;a href=&#34;http://www.android-group.jp/abc2011s/bazaar.html&#34;&gt;バザール&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;あと先に書いておくと、いっぱい写真を載せたいですけど、基本的に顔が写っているので写ってない写真をのせています。&lt;/p&gt;

&lt;p&gt;それと、問題ないと思われる写真を掲載していますが、何か問題がありましたら、削除しますのでご連絡ください。&lt;/p&gt;

&lt;h2 id=&#34;早稲田大学到着:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;早稲田大学到着〜&lt;/h2&gt;

&lt;p&gt;10:00〜開始なのにもかかわらず、早稲田大学に到着したのは10:30。ちょっとだけブースを回って大講堂に行きました。「震災復興とＩＣＴ」というテーマで話されている途中でした。資料は&lt;a href=&#34;http://www.android-group.jp/abc2011s/presentation/somusho.pdf&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;11-40:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;11:40〜&lt;/h2&gt;

&lt;p&gt;11:40ぐらいに午前の部が終了して、ゆっくりブースを見て回りました。&lt;/p&gt;

&lt;p&gt;企業ブースでは、「ビジットベル」というアプリで無人受付を実現させようというもの。たまに会社なんかで、無人の受付ってありますが、内線電話とご用の方は〜みたいなメモがあるだけですが、このアプリはちゃんと？受付してくれます。このアプリから、内線電話をかけたり、”チン”とベルを鳴らしたりできます。これが普及すると、世の中から受付嬢がいなくなっちゃうかもしれませんね（笑）&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-172012.30.05-thumbnail2.jpg&#34; width=&#34;320&#34; height=&#34;240&#34; border=&#34;0&#34; align=&#34;ビジットベル&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-172012.30.05.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;次から３つは、アプリ紹介サイトです。最初は「give App」さん。&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-172012.32.09-thumbnail2.jpg&#34; width=&#34;320&#34; height=&#34;240&#34; border=&#34;0&#34; align=&#34;give Appさん&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-1720drog.up.seesaa.net/image/2011-07-172010.26.52.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アンドロイドールさん。&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-172012.40.04-thumbnail2.jpg&#34; width=&#34;320&#34; height=&#34;240&#34; border=&#34;0&#34; align=&#34;アンドロイドールさん&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-172012.40.04.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アンドロイダーさん。&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-172012.49.17-thumbnail2.jpg&#34; width=&#34;320&#34; height=&#34;240&#34; border=&#34;0&#34; align=&#34;アンドロイダーさん&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-172012.49.17.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アプリ紹介サイトは、アンドロイダーさんぐらいしか知らなかったんですが、いろんなサイトが出てきてたんですね。&lt;/p&gt;

&lt;h2 id=&#34;13-00:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;13:00〜&lt;/h2&gt;

&lt;p&gt;大講堂で「山下　哲也（NTTドコモ　スマートコミュニケーションサービス部　コンテンツ推進室　コンテンツ支援担当部長）&lt;/p&gt;

&lt;p&gt;Android ｘ Mobile が迫る共進化 －&amp;#8221;競創&amp;#8221;を軸とする、これからのDevelopers Community」を聞きに行きました。「バラバラにいるけど、つながっている」という言葉が印象的でした。例とてはTwitterのハッシュタグを例に出されていました。&lt;/p&gt;

&lt;h2 id=&#34;14-00:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;14:00〜&lt;/h2&gt;

&lt;p&gt;昼飯にして、神戸支部のブースにいました。なぜか怒られました(^_^;)&lt;/p&gt;

&lt;h2 id=&#34;15-00:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;15:00〜&lt;/h2&gt;

&lt;p&gt;アドビシステムズ社さんの「Web制作の最新ツールをご紹介」を聞いてきましたが、アドビの中の人が「我々のサイトは見にくい」という言葉しか覚えていませんｗ。それはそうと、DreamweaverはHTML5や最新のjQueryにも対応してますよというお話でした。&lt;/p&gt;

&lt;h2 id=&#34;16-00:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;16:00〜&lt;/h2&gt;

&lt;p&gt;docomoさんのOpenGLのワークショップに参加しました。タイトルは「Android上での3D(OpenGL)描画の基礎とNDKによる実践的高速化手法」です。ワークショップということで、パソコン持ってきてくださいねっていうことだったんですが、あまり使うことはなかったですね。僕の場合は用意して頂いたサンプルプログラムを実機で動かしたぐらいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.android-group.jp/abc2011s/conference_docomoworkshop.html&#34;&gt;資料はこちらの16時〜の分です。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ワークショップの隣の部屋もDocomoさんのブース（というか教室一部屋分）になっていて、スマートフォンを自由に体験できるブースは目をひかされました。ここでは、デバッグも可能だったようですが、僕が行ったときにはPC出してデバッグしている方はいらっしゃいませんでした。あとは、無料の充電器も設置されていたり、なによりここだけクーラーが効いてて、みなさん涼みに来られてましたね。&lt;/p&gt;

&lt;h2 id=&#34;17-00:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;17:00〜&lt;/h2&gt;

&lt;p&gt;「Androidアプリデザイン入門編」に参加しました。こちらはエンジニアとデザイナーのお二方がプレゼンされていて、座る所がないくらい超満員でした。こちらではAndroid標準のViewじゃなくてデザインしたほうがかわいいよというお話と、9patchツールの紹介でした。&lt;/p&gt;

&lt;p&gt;9patchは使いにくいため、これってデザイナーさんも覚える必要あるの？という議論なんかも面白かったですね。結果的には、デザインの仕様変更があったとき、デザイナーさんに覚えてもらってたほうが早いでしょということをおっしゃっていたと思います。（間違ってたらごめんなさい）&lt;/p&gt;

&lt;h2 id=&#34;18-30:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;18:30〜&lt;/h2&gt;

&lt;p&gt;とりあえず、以上でABCは終了です。このあと懇親会に参加しました。懇親会費用は5000円と高かったですが、行かない理由がありません。2次会にも参加しました。そして裏の2次会にも（僕的には3次会です）。ホテルに着いたのは、午前3時ぐらいだったと記憶しております。&lt;/p&gt;

&lt;h2 id=&#34;abcの次の日:b1845ce9f58a319e9d88bbb8f009a623&#34;&gt;■ABCの次の日&lt;/h2&gt;

&lt;p&gt;11時から15時ぐらいまでは秋葉原で神戸支部の方とうろうろとAndroid端末や電子部品屋さん巡りをしました。決してメイドなお店には入ってません。&lt;/p&gt;

&lt;p&gt;15時ぐらいから僕は一人で東京スカイツリーを見に行き、17時ぐらいに　Bar Androidにいきました。この日のBar AndroidはABCの次の日ということで特別に16:30〜開けてくれてました。&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-182018.45.18-thumbnail2.jpg&#34; width=&#34;320&#34; height=&#34;240&#34; border=&#34;0&#34; align=&#34;Bar Android&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-182018.45.18.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img
src=&#34;http://androg.up.seesaa.net/image/2011-07-182018.01.53-thumbnail2.jpg&#34; width=&#34;320&#34; height=&#34;240&#34; border=&#34;0&#34; align=&#34;Bar Android&#34;
pbsrc=&#34;http://androg.up.seesaa.net/image/2011-07-182018.01.53.jpg&#34;
class=&#34;PopBoxImageSmall&#34;
onclick=&#34;Pop(this,100,&#39;PopBoxImageLarge&#39;);&#34; /&gt;&lt;/p&gt;

&lt;p&gt;18:45にBar Androidを離脱し、20時前に羽田に到着。20:30の飛行機で無事22:30に家に着きました。&lt;/p&gt;

&lt;p&gt;以上、ABCに参加された皆様、お疲れさまでした〜！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>同じグループの文字列をxmlで定義し、配列として参照するには</title>
      <link>/kwmt27.net/index.php/2011/07/08/%E5%90%8C%E3%81%98%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%82%92xml%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%97%E9%85%8D%E5%88%97%E3%81%A8%E3%81%97%E3%81%A6/</link>
      <pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/07/08/%E5%90%8C%E3%81%98%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%82%92xml%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%97%E9%85%8D%E5%88%97%E3%81%A8%E3%81%97%E3%81%A6/</guid>
      <description>

&lt;p&gt;同じグループの文字列をxmlに書いておいて、それをプログラム側で使いたい。&lt;/p&gt;

&lt;p&gt;例えば、対応機種かどうかチェックするときなど、対応機種をxmlに書いておき、機種が増えるごとにそのxmlに追加していけば、プログラムの変更を不要にしたいときなど。&lt;/p&gt;

&lt;h2 id=&#34;xml:e05c384d76300177518d39b8cf313ab8&#34;&gt;XML&lt;/h2&gt;

&lt;p&gt;ファイルを置く場所&lt;/p&gt;

&lt;p&gt;&lt;code&gt;res/values/filename.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;※filename は任意です。&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;
&amp;lt;resources&amp;gt;
&amp;lt;string-array name=&#34;string_array_name&#34;&amp;gt;
&amp;lt;item&amp;gt;text_string1&amp;lt;/item&amp;gt;
&amp;lt;item&amp;gt;text_string2&amp;lt;/item&amp;gt;
&amp;lt;/string-array&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;string-array&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;name&lt;/code&gt; はリソースIDとして参照されます。&lt;/p&gt;

&lt;h2 id=&#34;java:e05c384d76300177518d39b8cf313ab8&#34;&gt;Java&lt;/h2&gt;

&lt;pre class=&#34;brush: java; title: ; notranslate&#34; title=&#34;&#34;&gt;String[] strArray = getResources()
.getStringArray(R.array.string_array_name);
for(String s : strArray){
Log.d(&#34;array&#34;,s.toString());
}
&lt;/pre&gt;

&lt;h2 id=&#34;参考:e05c384d76300177518d39b8cf313ab8&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/guide/topics/resources/string-resource.html&#34; target=&#34;_blank&#34;&gt;String Resources | Android Developers&lt;/a&gt; &amp;#8211; String Array&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android開発で必要なもの</title>
      <link>/kwmt27.net/index.php/2011/04/16/android%E9%96%8B%E7%99%BA%E3%81%A7%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE/</link>
      <pubDate>Fri, 15 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2011/04/16/android%E9%96%8B%E7%99%BA%E3%81%A7%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE/</guid>
      <description>&lt;p&gt;こんなことすぐ調べれば分かるだろうと思ってたけど、やる機会が少ないのですぐ忘れてしまい、調べるのにも意外と時間がかかる。自分にとってあるとありがたいので、リンク先だけメモった。&lt;/p&gt;

&lt;div class=&#34;section&#34;&gt;
  &lt;h2 class=&#34;section&#34;&gt;
    EclipseとJDKのインストール
  &lt;/h2&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Eclipse
    &lt;/li&gt;
    &lt;p&gt;
      &lt;a href=&#34;http://www.eclipse.org/downloads/&#34; target=&#34;_blank&#34;&gt;http://www.eclipse.org/downloads/&lt;/a&gt;
    &lt;/p&gt;
    
    &lt;li&gt;
      JDK(Mac以外)
    &lt;/li&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=jdk-6u24-oth-JPR@CDS-CDS_Developer&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=jdk-6u24-oth-JPR@CDS-CDS_Developer&lt;/a&gt;
    &lt;/p&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;section&#34;&gt;
  &lt;h2 class=&#34;section&#34;&gt;
    Android SDKのダウンロードして適当なDirに置いてパスを通す
  &lt;/h2&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Android SDK
    &lt;/li&gt;
    &lt;p&gt;
      &lt;a href=&#34;http://developer.android.com/sdk/index.html&#34; target=&#34;_blank&#34;&gt;http://developer.android.com/sdk/index.html&lt;/a&gt;
    &lt;/p&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;section&#34;&gt;
  &lt;h2 class=&#34;section&#34;&gt;
    EclipseからADT Pluginをインストール
  &lt;/h2&gt;
  
  &lt;p&gt;
    Help → Install New Software&amp;#8230; から、&lt;br /&gt; &lt;a href=&#34;https://dl-ssl.google.com/android/eclipse/&#34; target=&#34;_blank&#34;&gt;https://dl-ssl.google.com/android/eclipse/&lt;/a&gt;&lt;br /&gt; をAdd。
  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;section&#34;&gt;
  &lt;h2 class=&#34;section&#34;&gt;
    Configuring the ADT Plugin
  &lt;/h2&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Once you&amp;#8217;ve successfully downloaded ADT as described above, the next step is to modify your ADT preferences in Eclipse to point to the Android SDK directory:
    &lt;/p&gt;
    
    &lt;p&gt;
      Select Window &gt; Preferences&amp;#8230; to open the Preferences panel (Mac OS X: Eclipse &gt; Preferences).&lt;br /&gt; Select Android from the left panel.&lt;br /&gt; For the SDK Location in the main panel, click Browse&amp;#8230; and locate your downloaded SDK directory.&lt;br /&gt; Click Apply, then OK.
    &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>