<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Volley on Androg</title>
    <link>kwmt27.net/tags/volley/</link>
    <description>Recent content in Volley on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 10 Jul 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/tags/volley/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Androidプロジェクトを新規作成してVolleyが使えるようになるまで</title>
      <link>/kwmt27.net/index.php/2014/07/10/how-to-use-volley-library/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/07/10/how-to-use-volley-library/</guid>
      <description>

&lt;p&gt;サンプルプロジェクトは、&lt;a href=&#34;https://github.com/kwmt/volleysample&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;におきました。&lt;/p&gt;

&lt;h2 id=&#34;androidプロジェクトを新規作成する:76e3898ab09f841248548e63f72fd0b4&#34;&gt;Androidプロジェクトを新規作成する&lt;/h2&gt;

&lt;p&gt;Android StudioでNew Projectを作成する (例プロジェクト名：VolleySample)&lt;/p&gt;

&lt;h2 id=&#34;volleyプロジェクトを追加する:76e3898ab09f841248548e63f72fd0b4&#34;&gt;volleyプロジェクトを追加する&lt;/h2&gt;

&lt;p&gt;volleyプロジェクトを作成したAndroidプロジェクトにsubmoduleとして追加・設定する&lt;/p&gt;

&lt;p&gt;1.作成したプロジェクトに移動してgit init
&lt;pre class=&#34;go&#34;&gt;$ cd VolleySample
$ git init
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;2.必要なら.gitignoreに追加してコミット
  3.volleyプロジェクトを追加する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ git submodule add https://android.googlesource.com/platform/frameworks/volley modules/volley
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;VolleySample/modules/volley にcloneされる&lt;/li&gt;
&lt;li&gt;.gitmudulesに自動的に追加される&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;go&#34;&gt;$ git diff --cached
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule &#34;modules/volley&#34;]
+       path = modules/volley
+       url = https://android.googlesource.com/platform/frameworks/volley

--- /dev/null
+++ b/volley
@@ -0,0 +1 @@
+Subproject commit 0e406xxxxxxxx
&lt;/pre&gt;

&lt;p&gt;4.setting.gradleに、volleyプロジェクト追加した時のパスを追加する
&lt;pre class=&#34;go&#34;&gt;$ git diff
&amp;mdash; a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include &amp;lsquo;:app&amp;rsquo;
+include &amp;lsquo;:app&amp;rsquo;,&amp;rsquo;:modules:volley&amp;rsquo;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;5.volleyを使いたいプロジェクトにvolleyの依存設定を追加
&lt;pre class=&#34;go&#34;&gt;$ git diff
&amp;mdash; a/app/build.gradle
+++ b/app/build.gradle
@@ -21,4 +21,5 @@ android {
 dependencies {
     compile fileTree(dir: &amp;lsquo;libs&amp;rsquo;, include: [&amp;rsquo;*.jar&amp;rsquo;])
+    compile project(&amp;rsquo;:modules:volley&amp;rsquo;)
 }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;6.以下はvolleyがアップデートされるまでに必要な対応&lt;/p&gt;

&lt;p&gt;volleyの SDK build tools revisionを19.1.0に修正する&lt;/p&gt;

&lt;p&gt;本来は上記の依存設定まででいいはずだが、それだけだと下記のエラーが出るので仕方がなさそう&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Error:The SDK Build Tools revision (19.0.0) is too low for project &#39;:modules:volley&#39;. Minimum required is 19.1.0
&lt;/pre&gt;

&lt;h2 id=&#34;volleyを使ってみる:76e3898ab09f841248548e63f72fd0b4&#34;&gt;Volleyを使ってみる&lt;/h2&gt;

&lt;p&gt;この記事 &lt;a href=&#34;http://bit.ly/1n8SAca&#34; target=&#34;_blank&#34;&gt;Android working with Volley Library&lt;/a&gt; を参考にvolleyを使ってみます。&lt;/p&gt;

&lt;p&gt;この記事は簡単に言うと、Applicationを継承したシングルトンクラスを使うといい感じに使えるよって感じです。&lt;/p&gt;

&lt;h3 id=&#34;まずapplicationを継承したappcontrollerを作成します:76e3898ab09f841248548e63f72fd0b4&#34;&gt;まずApplicationを継承したAppControllerを作成します&lt;/h3&gt;


&lt;script src=&#34;//gist.github.com/5bb307d224a5d7324890.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;ここでは画像は扱っていません。&lt;/p&gt;

&lt;h3 id=&#34;androidmanifest-xmlに追記:76e3898ab09f841248548e63f72fd0b4&#34;&gt;AndroidManifest.xmlに追記&lt;/h3&gt;

&lt;p&gt;アプリが起動すると自動的に起動させるように、AndroidManifest.xmlにシングルトンクラスを追記します。あと、ネットワークを使用しますので、INTERNET権限を追加します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ git diff
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -2,7 +2,9 @@
 &amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;
     package=&#34;net.kwmt27.volleysample&#34; &amp;gt;
 
+    &amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;
     &amp;lt;application
+        android:name=&#34;net.kwmt27.volleysample.app.AppController&#34;
         android:allowBackup=&#34;true&#34;
         android:icon=&#34;@drawable/ic_launcher&#34;
         android:label=&#34;@string/app_name&#34;
&lt;/pre&gt;

&lt;h3 id=&#34;実際に使ってみます:76e3898ab09f841248548e63f72fd0b4&#34;&gt;実際に使ってみます&lt;/h3&gt;

&lt;p&gt;適当に&lt;code&gt;MainActivity&lt;/code&gt;の&lt;code&gt;onCreate()&lt;/code&gt;に適当なリクエストをなげて、レスポンスを確認します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;@Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+
+        request();
+    }
+
+    private void request() {
+        // Tag used to cancel the request
+        String tag_json_obj = &#34;json_obj_req&#34;;
+
+        String url = &#34;http://api.androidhive.info/volley/person_object.json&#34;;
+
+        JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.GET,
+                url, null,
+                new Response.Listener&amp;lt;JSONObject&gt;() {
+
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        Log.d(TAG, response.toString());
+
+                    }
+                }, new Response.ErrorListener() {
+
+            @Override
+            public void onErrorResponse(VolleyError error) {
+                VolleyLog.d(TAG, &#34;Error: &#34; + error.getMessage());
+            }
+        });
+
+        // Adding request to request queue
+        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
     }

&lt;/pre&gt;

&lt;h3 id=&#34;あとはビルド-起動して確認:76e3898ab09f841248548e63f72fd0b4&#34;&gt;あとはビルド・起動して確認&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;D/MainActivity﹕ {&#34;email&#34;:&#34;ravi8x@gmail.com&#34;,&#34;phone&#34;:{&#34;home&#34;:&#34;08947 000000&#34;,&#34;mobile&#34;:&#34;9999999999&#34;},&#34;name&#34;:&#34;Ravi Tamada&#34;}
&lt;/pre&gt;

&lt;p&gt;こんな感じでlogcatに出ていれば使えています。&lt;/p&gt;

&lt;h2 id=&#34;エラーハンドリング:76e3898ab09f841248548e63f72fd0b4&#34;&gt;エラーハンドリング&lt;/h2&gt;

&lt;p&gt;先ほどの&lt;code&gt;request&lt;/code&gt;メソッドに書いてますが、正常にレスポンスが返ってくれば&lt;code&gt;onResponse&lt;/code&gt;が呼ばれます。では、エラーの場合はどうなるのか？それは&lt;code&gt;onErrorResponse&lt;/code&gt;が呼ばれます。上記のコードでは、ログ出力しているだけですが、エラーハンドリングする必要が出てくると思います。その時は、下記のようにして、それぞれに対応する処理を書いてあげれば良いです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;if( error instanceof NetworkError) {
    } else if( error instanceof ClientError) {
    } else if( error instanceof ServerError) {
    } else if( error instanceof AuthFailureError) {
    } else if( error instanceof ParseError) {
    } else if( error instanceof NoConnectionError) {
    } else if( error instanceof TimeoutError) {
    }
&lt;/pre&gt;

&lt;h2 id=&#34;参考:76e3898ab09f841248548e63f72fd0b4&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1iXgweq&#34; target=&#34;_blank&#34;&gt;Android Studio で Volley を使う &amp;#8211; ひだまりソケットは壊れない&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1oVwQNI&#34; target=&#34;_blank&#34;&gt;Volleyを使うのがかなり簡単になってた &amp;#8211; Islands in the byte stream &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1fDRoJt&#34; target=&#34;_blank&#34;&gt;Git submodule の基礎 &amp;#8211; Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1oVzEdN&#34; target=&#34;_blank&#34;&gt;Git diff says subproject is dirty &amp;#8211; Stack Overflow &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1n8SAca&#34; target=&#34;_blank&#34;&gt;Android working with Volley Library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1oFnBR1&#34; target=&#34;_blank&#34;&gt;Android: How handle message error from the server using Volley? &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>