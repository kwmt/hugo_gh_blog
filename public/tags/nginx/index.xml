<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Androg</title>
    <link>kwmt27.net/tags/nginx/</link>
    <description>Recent content in Nginx on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 12 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dockerを導入した際の作業メモ</title>
      <link>/kwmt27.net/index.php/2014/12/12/docker/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/12/12/docker/</guid>
      <description>

&lt;h2 id=&#34;はじめに:63866d49e69bb608150d119d01b9a6ae&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;AWSで運用していたこのWordpressをさくらVPSに移行するにあたって、ついでに&lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34;&gt;Docker&lt;/a&gt;も勉強しようかなぁと思って、さくらVPSに&lt;a href=&#34;https://coreos.com/&#34; target=&#34;_blank&#34;&gt;CoreOS&lt;/a&gt;を載せて、Dockerでnginx + wordpressを動かすためにDockerについていろいろ調べたので、それのメモ。&lt;/p&gt;

&lt;h2 id=&#34;dockerの基礎-学習:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerの基礎(学習)&lt;/h2&gt;

&lt;p&gt;個人的にDockerについてはこちらがわかりやすかった記事&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nkbp.jp/1t790Tn&#34; target=&#34;_blank&#34;&gt;ITpro Report &amp;#8211; ［Docker解説］「コンテナ」単位でシステム構成を“固める”：ITpro &lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hello-docker:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Hello Docker&lt;/h3&gt;

&lt;p&gt;Docker公式のHello world&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/1w4IwmU&#34; target=&#34;_blank&#34;&gt;Dockerizing Applications &amp;#8211; Docker Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;docker run -d 
&lt;/pre&gt;

&lt;p&gt;の &lt;code&gt;-d&lt;/code&gt;はバックグラウンドで起動させるオプション&lt;/p&gt;

&lt;h3 id=&#34;dockerfileリファレンス-fromとかrunとかの説明はココ:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerfileリファレンス FROMとかRUNとかの説明はココ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.com/reference/builder/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.docker.com/reference/builder/&#34;&gt;http://docs.docker.com/reference/builder/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ベストプラクティス:63866d49e69bb608150d119d01b9a6ae&#34;&gt;ベストプラクティス&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1z27frW&#34; target=&#34;_blank&#34;&gt;Best practices for writing Dockerfiles &amp;#8211; Docker Documentation&lt;/a&gt;(英語)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1z27i7f&#34; target=&#34;_blank&#34;&gt;Best practices for writing Dockerfiles 日本語訳（仮） &amp;#8211; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;作業:63866d49e69bb608150d119d01b9a6ae&#34;&gt;作業&lt;/h2&gt;

&lt;h3 id=&#34;さくらvpsにcoreosをインストールするには:63866d49e69bb608150d119d01b9a6ae&#34;&gt;さくらVPSにCoreOSをインストールするには&lt;/h3&gt;

&lt;p&gt;さくらVPSの管理コンソール画面が変わってたり、注意と書いてあるところはマジで注意しないといけなかったり、ネットワーク設定でens3をeth0にしないといけなかったりありましたが、ほぼ下記でインストールできました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/yujiod/items/dc154120c4df2e938111&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://qiita.com/yujiod/items/dc154120c4df2e938111&#34;&gt;http://qiita.com/yujiod/items/dc154120c4df2e938111&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dockerのコンテナを起動するには-h2:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerのコンテナを起動するには&lt;/h2&gt;&lt;/h3&gt;

&lt;p&gt;CoreOS(さくらVPS)にログインしてる状態で&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;docker run -it -v /home/core:/core -p 80:80 -p 22 --name=&#34;wordpress&#34;  -d -t oskarhane/docker-wordpress-nginx-ssh
&lt;/pre&gt;

&lt;h3 id=&#34;dockerのコンテナの中に入るには:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerのコンテナの中に入るには&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;docker exec -it wordpress bash
&lt;/pre&gt;

&lt;p&gt;参考:&lt;a href=&#34;http://bit.ly/1IyYhIa&#34; target=&#34;_blank&#34;&gt;コンテナに入りたい？それ docker exec でできるよ &amp;#8211; Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下は、docker ver1.3以前に使用していた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1sbiVns&#34; target=&#34;_blank&#34;&gt;起動中のDockerコンテナにnsenterで接続する &amp;#8211; PiyoPiyoDucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1l2uqIT&#34; target=&#34;_blank&#34;&gt;Dockerコンテナに入るなら SSH より nsinit が良さそう &amp;#8211; Gosuke Miyashita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ホストとコンテナ間でファイルを共有するには:63866d49e69bb608150d119d01b9a6ae&#34;&gt;ホストとコンテナ間でファイルを共有するには&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;docker -v &amp;lt;ホスト側&amp;gt;:&amp;lt;コンテナ側&amp;gt;
&lt;/pre&gt;

&lt;p&gt;参考:&lt;a href=&#34;http://bit.ly/1vDBvon&#34; target=&#34;_blank&#34;&gt;Docker 1.3の新機能を試してみる ｜ Developers.IO&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#Nginx &#43; #golang (FastCGI)&#43; #MySQL を使ったWebアプリケーションを書くための準備</title>
      <link>/kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/</link>
      <pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/</guid>
      <description>

&lt;h2 id=&#34;はじめに:30541588868439902a1efc8adcbbf1c0&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;下記の記事をみたら分かりやすいかもしれませんが、英語なので、実際にやった方法も交えてメモしておこうと思います。（似てるところもありますが、翻訳ではありません。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mwholt.blogspot.jp/2013/05/writing-go-golang-web-app-with-nginx.html&#34; target=&#34;_blank&#34;&gt;Writing a Go (&amp;#8220;golang&amp;#8221;) Web App with nginx, FastCGI, MySQL, JSON&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前提として、Go言語でWebサーバーをつくって動かすと言うと２種類の方法があります。&lt;/p&gt;

&lt;p&gt;１つは、Go言語の&lt;a href=&#34;http://golang.org/pkg/net/http/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http&amp;#8221;&lt;/a&gt;パッケージというのがありますので、これを使ってGo自体でWebサーバーを作ってしまうことができます。&lt;/p&gt;

&lt;p&gt;もう1つは、ApacheやNginxなどのWebサーバー上で、CGI(正確にはFastCGI)としてGo言語を動かす方法です。これはNginx+PHP-FPMのようなもに近いイメージだと思います。&lt;/p&gt;

&lt;p&gt;Nginxを使うか使わないかは、こちらの&lt;a href=&#34;http://stackoverflow.com/questions/17776584/webserver-for-go-golang-webservices-using-nginx-or-not&#34; title=&#34;Webserver for Go (golang) webservices: using NGINX or not?&#34; target=&#34;_blank&#34;&gt;Stackoverflow&lt;/a&gt;をみると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Go HTTPサーバーはいいんだけど、Webサーバーを一から作るのは大変だよ、Nginxを使った方が簡単だよ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;みたいな感じで、Nginxつかった方がいいよという結論になってます。&lt;/p&gt;

&lt;p&gt;この記事では、2つ目の方法のNginx+golang(FastCGI)でWebアプリケーションを作る準備をメモしたいと思います。&lt;/p&gt;

&lt;p&gt;データベースとしては、MySQLを使いたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;使用環境:30541588868439902a1efc8adcbbf1c0&#34;&gt;使用環境&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;サーバOS:CentOS release 6.4
Webサーバ:nginx-1.4.1
データベース:mysql  Ver 14.14 Distrib 5.5.27
&lt;/pre&gt;

&lt;h2 id=&#34;1-nginxをインストールする-seciton:30541588868439902a1efc8adcbbf1c0&#34;&gt;1.Nginxをインストールする {.seciton}&lt;/h2&gt;

&lt;p&gt;まずは、CentOSにNginxをソースからインストールしたいと思います。(&lt;a href=&#34;http://wiki.nginx.org/Install&#34; target=&#34;_blank&#34;&gt;Nginx installリンク&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;なぜソースからインストールするのかは、Web+DBにおすすめと書かれていたから(^o^;&lt;/p&gt;

&lt;p&gt;ちゃんというとモジュール追加するには、make時にくっつけとかないといけないからで、必要なければ、rpmとかからインストールしてもいいと思います。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# wget http://nginx.org/download/nginx-1.4.1.tar.gz
# tar zxvf nginx-1.4.1.tar.gz
# ls
nginx-1.4.1
# cd nginx-1.4.1
# ./configure
&lt;/pre&gt;

&lt;p&gt;雑誌Web+DB pressのVol12.2013には下記のように指定してましたが、個人的にはデフォルトの方が分かりやすいため、特にオプション指定はしていません。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# ./configure --prefix=/usr/local --conf-path=/etc/nginx/nginx.conf 
&lt;/pre&gt;

&lt;p&gt;デフォルトでは、Nginxは/usr/local/nginxにインストールされます。&lt;/p&gt;

&lt;p&gt;nginxのサービスを起動したりするコマンドは、/usr/local/nginx/sbinの中にあるnginxコマンドなので、PATHを設定しておくと楽になるかと思います。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;bashの場合 .bashrcに下記を記入
export PATH=/usr/local/nginx/sbin:$PATH
&lt;/pre&gt;

&lt;p&gt;さて、&lt;code&gt;./configure&lt;/code&gt;の時点に少し戻ります。私の環境では、&lt;code&gt;./configure&lt;/code&gt;時に下記の2つのエラーが出ましたので、それらについてのエラー内容と対策も書いておきたいと思います。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;【./configure時のエラー１】
./configure: error: the HTTP rewrite module requires the PCRE library.
【対策】
# yum -y install pcre pcre-devel

【./configure時のエラー２】
./configure: error: the HTTP gzip module requires the zlib library.
【対策】
# yum -y install zlib-devel

※参考
&lt;a href=&#34;http://bit.ly/19V1ahY&#34; target=&#34;_blank&#34;&gt;64bit版CentOS 5.3にnginxをインストールしてみた - Umeyashikiの日記&lt;/a&gt; 
&lt;/pre&gt;

&lt;p&gt;これで&lt;code&gt;./configure&lt;/code&gt;が正常に終了したと思いますので、下記のようにしてインストールしましょう。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# make
# make install
&lt;/pre&gt;

&lt;p&gt;以上で、Nginxのインストールは終了です。&lt;/p&gt;

&lt;p&gt;次に、Nginxの設定に行きたいところですが、インストールを終わらせてしまいましょう。&lt;/p&gt;

&lt;h2 id=&#34;2-go-toolsをインストール:30541588868439902a1efc8adcbbf1c0&#34;&gt;2.Go Toolsをインストール&lt;/h2&gt;

&lt;p&gt;基本的には本家サイトの&lt;a href=&#34;http://golang.org/doc/install&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;をみてください。&lt;/p&gt;

&lt;p&gt;簡単に言うと、こちらから環境にあったものをインストールするか、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ソースからインストールする場合には、拙作ですが、gitが入っていれば数回のコマンド入力でgoがインストールできます。「Mercurialが入ってなければ、Mercurialをインストールする」というような工程はもう必要ありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kwmt/goinstall&#34; title=&#34;goinstall&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/kwmt/goinstall&#34;&gt;https://github.com/kwmt/goinstall&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらもお勧めです。(Linux,Macのみ対応しています。)&lt;/p&gt;

&lt;h2 id=&#34;3-mysqlをインストールする:30541588868439902a1efc8adcbbf1c0&#34;&gt;3.MySQLをインストールする&lt;/h2&gt;

&lt;p&gt;ググりましょう。&lt;/p&gt;

&lt;h2 id=&#34;4-nginxの設定をする:30541588868439902a1efc8adcbbf1c0&#34;&gt;4.Nginxの設定をする&lt;/h2&gt;

&lt;p&gt;FastCGIを使うには、locationディレクティブに次のような感じで設定するようです。&lt;/p&gt;

&lt;p&gt;この例だと、ポート8080にアクセスがきたら、ポート9000にアクセスするようになります。（作るアプリによっては実用的ではないかもしれません）&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;server {
    listen       8080;
    server_name  localhost;

    location / {
        fastcgi_pass 127.0.0.1:9000;
        include fastcgi.conf;
    }
}
&lt;/pre&gt;

&lt;p&gt;Basic認証を掛ける方法は、&lt;a href=&#34;http://bit.ly/17eWMgm&#34; target=&#34;_blank&#34;&gt;【Nginx】Basic認証をかける&lt;/a&gt;を参考にさせて頂きました。&lt;/p&gt;

&lt;p&gt;実際の設定としては次のようになります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;location /admin {
            auth_basic &#34;members onry&#34;;
            auth_basic_user_file &#34;/etc/nginx/.htpasswd&#34;;
            fastcgi_pass 127.0.0.1:9000;
            include fastcgi.conf;
        }
&lt;/pre&gt;

&lt;p&gt;設定が終わったので、Nginxを起動させましょう。起動するには、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# nginx
&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;再起動と停止は次のようにします。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# nginx -s reload //再起動
# nignx -s stop   //停止
&lt;/pre&gt;

&lt;h2 id=&#34;5-go言語プログラムをfastcgiとして動かすためには:30541588868439902a1efc8adcbbf1c0&#34;&gt;5.Go言語プログラムをFastCGIとして動かすためには&lt;/h2&gt;

&lt;p&gt;何も出力しませんが、localhost:9000で接続要求を待ってくれます。この&amp;#8221;9000&amp;#8243;はNginx側の設定の9000と合わせる必要があります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;package main
import (
    &#34;net/http&#34;
    &#34;net/http/fcgi&#34;
)
func main(){
    l,_:= net.Listen(&#34;tcp&#34;,&#34;:9000&#34;)
    mux := http.NewServeMux()
    fcgi.Serve(l,mux)
}
&lt;/pre&gt;

&lt;p&gt;ちなみに、下記は&lt;a href=&#34;http://golang.org/pkg/net/http/fcgi/#Serve&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http/fcgi&amp;#8221;&lt;/a&gt;パッケージのServe関数の翻訳です。Serve関数で何をやってるのかが分かるかと思います。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Serve関数はリスナー&lt;code&gt;l&lt;/code&gt;(エル)上で、FastCGI接続を待ち受け、それぞれに対して新しいゴルーチンを作ります。&lt;/p&gt;

&lt;p&gt;そのゴルーチンはリクエストを解釈し、リクエストに応答する&lt;code&gt;handler&lt;/code&gt;をコールします。&lt;code&gt;l&lt;/code&gt;(エル)が&lt;code&gt;nil&lt;/code&gt;の場合、&lt;code&gt;Serve&lt;/code&gt;関数は、&lt;code&gt;os.Stdin&lt;/code&gt;からの接続を受け入れます。&lt;code&gt;handler&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;の場合、&lt;code&gt;http.DefaultServeMux&lt;/code&gt;が使われます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-go言語からmysqlを使うには:30541588868439902a1efc8adcbbf1c0&#34;&gt;6.Go言語からMySQLを使うには&lt;/h2&gt;

&lt;p&gt;ドライバを下記からインストールする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/s/sqldrivers&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://golang.org/s/sqldrivers&#34;&gt;http://golang.org/s/sqldrivers&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上のリストをみると、MySQLのドライバは2つあるのですが、たとえば、go-sql-driver/mysqlをインストールするには次のようにします。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ go get github.com/go-sql-driver/mysql
&lt;/pre&gt;

&lt;p&gt;使い方については、下記が参考になると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql/wiki/Examples&#34; target=&#34;_blank&#34;&gt;wikiにあるExamples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/dddb13c15643454a7c3b&#34; target=&#34;_blank&#34;&gt;[Go言語] database/sqlパッケージを使ってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もう1つのドライバmymysqlについては、過去記事をご参照ください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2012/09/06/golang%e3%81%8b%e3%82%89mysql%e3%82%92%e4%bd%bf%e3%81%86%e3%81%ab%e3%81%af/&#34; title=&#34;golangからMySQLを使うには&#34; target=&#34;_blank&#34;&gt;golangからMySQLを使うには&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;補足-mysqlから取得した日本語が文字化けする件:30541588868439902a1efc8adcbbf1c0&#34;&gt;補足：mysqlから取得した日本語が文字化けする件&lt;/h2&gt;

&lt;p&gt;※Mac OSのみかもしれない.&lt;/p&gt;

&lt;p&gt;【原因】&lt;/p&gt;

&lt;p&gt;Server側とClient側の文字コードが異なっていたため。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Server characterset:    latin1
Db     characterset:    latin1
Client characterset:    utf8
Conn.  characterset:    utf8
&lt;/pre&gt;

&lt;p&gt;【対策】&lt;/p&gt;

&lt;p&gt;macでは&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;/etc/my.conf
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;[client]
default-character-set=utf8
...
[mysqld]
character-set-server=utf8 #ここだけ 違うので注意
...
[mysqldump]
...
default-character-set=utf8  
[mysql]
...
default-character-set=utf8
&lt;/pre&gt;

&lt;p&gt;あとはmysqlを再起動する&lt;/p&gt;

&lt;p&gt;（macの場合はシステム環境設定-&amp;gt;MySQL-&amp;gt;Stop MySQL Server -&amp;gt;Start MySQL Server）&lt;/p&gt;

&lt;p&gt;※参考&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nightmare_tim/20110530/1306704112&#34;&gt;fedora15 mysql5.5 default-character-setが原因で起動できない&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;補足-go言語でクロスコンパイルするには:30541588868439902a1efc8adcbbf1c0&#34;&gt;補足：Go言語でクロスコンパイルするには&lt;/h2&gt;

&lt;p&gt;まだ試したことないですが、とりあえずメモがてら。ためして何か分かったら更新するかもです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/1g3egQA&#34; target=&#34;_blank&#34;&gt;Go言語でクロスコンパイルする &amp;#8211; memoメモ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;おわりに:30541588868439902a1efc8adcbbf1c0&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これでひとまずNginx+golang(fcgi)+MySQLの環境が整ったとおもいますので、あとは&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/doc/articles/wiki/&#34; target=&#34;_blank&#34;&gt;Writing Web Applications&lt;/a&gt;(&lt;a href=&#34;https://github.com/kwmt/golangwiki/blob/master/doc/articles/wiki.md&#34; target=&#34;_blank&#34;&gt;日本語訳&lt;/a&gt;)(スライド：&lt;a href=&#34;http://www.slideshare.net/yasi_life/goweb-16448500&#34; target=&#34;_blank&#34;&gt;Go言語によるwebアプリの作り方&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;のような記事を読むと良いと思います。&lt;/p&gt;

&lt;h2 id=&#34;参考リンク:30541588868439902a1efc8adcbbf1c0&#34;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mwholt.blogspot.jp/2013/05/writing-go-golang-web-app-with-nginx.html&#34; target=&#34;_blank&#34;&gt;Writing a Go (&amp;#8220;golang&amp;#8221;) Web App with nginx, FastCGI, MySQL, JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/17776584/webserver-for-go-golang-webservices-using-nginx-or-not&#34; title=&#34;Webserver for Go (golang) webservices: using NGINX or not?&#34; target=&#34;_blank&#34;&gt;Stackoverflow:Webserver for Go (golang) webservices: using NGINX or not?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/net/http/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http&amp;#8221;&lt;/a&gt;パッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/net/http/fcgi/#Serve&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http/fcgi&amp;#8221;&lt;/a&gt;パッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/Install&#34; target=&#34;_blank&#34;&gt;Nginx installリンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/19V1ahY&#34; target=&#34;_blank&#34;&gt;64bit版CentOS 5.3にnginxをインストールしてみた &amp;#8211; Umeyashikiの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/17eWMgm&#34; target=&#34;_blank&#34;&gt;【Nginx】Basic認証をかける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/install&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kwmt/goinstall&#34; title=&#34;goinstall&#34; target=&#34;_blank&#34;&gt;goinstall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/s/sqldrivers&#34; target=&#34;_blank&#34;&gt;SQLDrivers &amp;#8211; go-wiki &amp;#8211; SQL database drivers &amp;#8211; Go Language Community Wiki &amp;#8211; Google Project Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql/wiki/Examples&#34; target=&#34;_blank&#34;&gt;wikiにあるExamples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/dddb13c15643454a7c3b&#34; target=&#34;_blank&#34;&gt;[Go言語] database/sqlパッケージを使ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2012/09/06/golang%e3%81%8b%e3%82%89mysql%e3%82%92%e4%bd%bf%e3%81%86%e3%81%ab%e3%81%af/&#34; title=&#34;golangからMySQLを使うには&#34; target=&#34;_blank&#34;&gt;golangからMySQLを使うには&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nightmare_tim/20110530/1306704112&#34;&gt;fedora15 mysql5.5 default-character-setが原因で起動できない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1g3egQA&#34; target=&#34;_blank&#34;&gt;Go言語でクロスコンパイルする &amp;#8211; memoメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>