<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Androg</title>
    <link>kwmt27.net/tags/golang/</link>
    <description>Recent content in Golang on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 23 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>構造体にフィールドを追加しないで、JSONに動的にフィールドを追加したい #golang</title>
      <link>/kwmt27.net/index.php/2014/09/23/how-to-add-a-field-to-the-json-output-without-including-it-in-the-struct/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/23/how-to-add-a-field-to-the-json-output-without-including-it-in-the-struct/</guid>
      <description>

&lt;h2 id=&#34;はじめに:d6d2446f3900c5d3546220864ee13d11&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;JSONを返したい場合、定義済みの構造体に対して&lt;code&gt;json.Marshal&lt;/code&gt;とかして、JSONにしていたのですが、下記の&lt;code&gt;Book&lt;/code&gt;構造体の例だと、返せるフィールドは&lt;code&gt;Title,Author&lt;/code&gt;だけになってしまいます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title  string
    Author string
}

response, _ := json.Marshal(book)
fmt.Fprintf(w, string(response))
&lt;/pre&gt;

&lt;p&gt;それ以外のフィールドも動的に追加するにはどうしたらか調べたので書いておこうかと思います。&lt;/p&gt;

&lt;h2 id=&#34;方法:d6d2446f3900c5d3546220864ee13d11&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;基本的には、&lt;a href=&#34;http://stackoverflow.com/questions/23045884/can-i-use-marshaljson-to-add-arbitrary-fields-to-a-json-encoding-in-golang&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt;に書いてありますので、参考くださいなんですが、下記のような感じです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title  string
    Author string
}

type FakeBook Book

func (b Book) MarshalJSON() ([]byte, error) {
    return json.Marshal(struct {
        FakeBook
        Genre string
    }{
        FakeBook: FakeBook(b),
        Genre:    &#34;Satire&#34;,
    })
}
&lt;/pre&gt;

&lt;p&gt;このように、&lt;code&gt;Book&lt;/code&gt;構造体に対して、&lt;code&gt;Mashaler&lt;/code&gt;インターフェースを実装することで、フィールドを追加することができます。&lt;/p&gt;

&lt;p&gt;結果は以下のとおり。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{
  &#34;Title&#34;: &#34;Catch-22&#34;,
  &#34;Author&#34;: &#34;Joseph Heller&#34;,
  &#34;Genre&#34;: &#34;Satire&#34;
}
&lt;/pre&gt;

&lt;h2 id=&#34;仕組みとしては-簡単に:d6d2446f3900c5d3546220864ee13d11&#34;&gt;仕組みとしては(簡単に)&lt;/h2&gt;

&lt;p&gt;この場合、&lt;code&gt;Book&lt;/code&gt;は&lt;code&gt;Marshaler&lt;/code&gt;インターフェースを実装したことになります。(&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go?h=MarshalJSON#L191&#34; target=&#34;_blank&#34;&gt;Marshalerインターフェース&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;これによって、&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go#L356&#34; target=&#34;_blank&#34;&gt;Marshalerインターフェースを実装しているなら&lt;/a&gt;、&lt;code&gt;marshalerEncoder&lt;/code&gt;がコールされ、&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go#L414&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;MarshalJSON&lt;/code&gt;がコールされます。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;配列の各要素に追加したい場合も同様で:d6d2446f3900c5d3546220864ee13d11&#34;&gt;配列の各要素に追加したい場合も同様で、&lt;/h2&gt;

&lt;p&gt;つまり次のような場合、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title   string
    Authors []Author
}

type Author struct {
    Name  string
    Email string
}
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Author&lt;/code&gt;構造体に&lt;code&gt;Mashaler&lt;/code&gt;インターフェースを実装してあげればいいだけです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;func (b Author) MarshalJSON() ([]byte, error) {
    return json.Marshal(struct {
        FakeAuthor
        Genre string
    }{
        FakeAuthor: FakeAuthor(b),
        Genre:      &#34;Satire&#34;,
    })
}
&lt;/pre&gt;

&lt;p&gt;Playground: &lt;a href=&#34;http://play.golang.org/p/tZEaLTt7Fc&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/tZEaLTt7Fc&#34;&gt;http://play.golang.org/p/tZEaLTt7Fc&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結果は次のようになります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{
  &#34;Title&#34;: &#34;Catch-22&#34;,
  &#34;Authors&#34;: [
    {
      &#34;Name&#34;: &#34;Joseph&#34;,
      &#34;Email&#34;: &#34;abc@xxx.com&#34;,
      &#34;Genre&#34;: &#34;Satire&#34;
    },
    {
      &#34;Name&#34;: &#34;Heller&#34;,
      &#34;Email&#34;: &#34;dec@yyy.com&#34;,
      &#34;Genre&#34;: &#34;Satire&#34;
    }
  ]
}
&lt;/pre&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genmaiを使ってみた。 #golang</title>
      <link>/kwmt27.net/index.php/2014/09/22/try-using-genmai-of-orm-for-golang/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/22/try-using-genmai-of-orm-for-golang/</guid>
      <description>&lt;p&gt;ORM for golangの&lt;a href=&#34;http://bit.ly/1ucuNGX&#34; target=&#34;_blank&#34;&gt;Genmai&lt;/a&gt;を使って、MySQLにアクセスしてみた。&lt;/p&gt;

&lt;p&gt;使い方は以下の様な感じです。&lt;/p&gt;

&lt;p&gt;テーブルを定義します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;// ユーザーテーブル
type User struct {
    Id    int `db:&#34;pk&#34;`
    Name  string
    genmai.TimeStamp
}
&lt;/pre&gt;

&lt;p&gt;データベースを作る時に、&lt;code&gt;&amp;amp;genmai.MySQLDialect{}&lt;/code&gt;と、&lt;a href=&#34;https://github.com/go-sql-driver/mysql/#dsn-data-source-name&#34; target=&#34;_blank&#34;&gt;DSN&lt;/a&gt;を指定する。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;database, err := genmai.New(&amp;genmai.MySQLDialect{}, dataSourceName)
// userテーブルがなければ、作成する
if err := database.CreateTableIfNotExists(&amp;User{}); err != nil {
    panic(err)
}
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;// 挿入したいデータ
data := []User{
        {Name:&#34;Aさん&#34;},
        {Name:&#34;Bさん&#34;},
        {Name:&#34;Cさん&#34;},
    }
// dataを挿入
if _, err := database.Insert(data); err!= nil{
    panic(err)
}
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;// 取得したい空のデータを用意
var users []User
// データを取得
if err:= db.Select(&amp;users); err != nil{
    panic(err)
}
&lt;/pre&gt;

&lt;p&gt;これを実行すると、&lt;/p&gt;

&lt;p&gt;テーブル作成できた！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_struct-600x73.png&#34; alt=&#34;table_struct&#34; width=&#34;600&#34; height=&#34;73&#34; class=&#34;aligncenter size-thumbnail wp-image-1321&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_struct-600x73.png 600w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-300x36.png 300w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-1024x125.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-624x76.png 624w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-900x110.png 900w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;データの挿入もOK！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_content-600x152.png&#34; alt=&#34;table_content&#34; width=&#34;600&#34; height=&#34;152&#34; class=&#34;aligncenter size-thumbnail wp-image-1320&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_content-600x152.png 600w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-300x76.png 300w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-1024x259.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-624x158.png 624w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-900x228.png 900w, http://kwmt27.net/wp-content/uploads/2014/09/table_content.png 1128w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あれ？データの取得が下記のエラーでコケるなぁ。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;unsupported driver -&gt; Scan pair: []uint8 -&gt; *time.Time
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;time.Time&lt;/code&gt;を使ってる箇所は、&lt;code&gt;User&lt;/code&gt;構造体の&lt;code&gt;genmai.TimeStamp&lt;/code&gt;のところだけです。ちなみに&lt;code&gt;genmai.TimeStamp&lt;/code&gt;がどうなっているかというと、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;// TimeStamp is fields for timestamps that commonly used.
type TimeStamp struct {
    // Time of creation. This field will be set automatically by BeforeInsert.
    CreatedAt time.Time `json:&#34;created_at&#34;`

    // Time of update. This field will be set by BeforeInsert or BeforeUpdate.
    UpdatedAt time.Time `json:&#34;updated_at&#34;`
}
&lt;/pre&gt;

&lt;p&gt;となっています。&lt;/p&gt;

&lt;p&gt;また、MySQLのドライバに、&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34; target=&#34;_blank&#34;&gt;github.com/go-sql-driver/mysql&lt;/a&gt;を使っています。&lt;/p&gt;

&lt;p&gt;うん、ココらへんが怪しいですね。とおもって調べていたら、&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34; target=&#34;_blank&#34;&gt;github.com/go-sql-driver/mysql&lt;/a&gt;は&lt;code&gt;time.Time&lt;/code&gt;はサポートしているのですが、[]byteからtime.Timeへの変換がデフォルトではできません。これを可能にするには、DSNのパラメータに、&lt;code&gt;parseTime=true&lt;/code&gt;をつける必要があります。というのが、下記に書いてあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql#timetime-support&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql#timetime-support&#34;&gt;https://github.com/go-sql-driver/mysql#timetime-support&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intellij IDEAで #golang を使えるようにする。</title>
      <link>/kwmt27.net/index.php/2014/09/10/how-to-use-golang-with-intellij-idea/</link>
      <pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/10/how-to-use-golang-with-intellij-idea/</guid>
      <description>

&lt;p&gt;ひさびさGoの記事を書く気がします。いままで、どちらかというとIDEなんて不要だ！秀丸で十分だ！ｗ と思ってた人でしたが、Intellij IDEAは素晴らしい！ので、Intellij IDEAでGo言語を使えるようにする設定を書いておこうかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intellij IDEA version:13.1.2&lt;/li&gt;
&lt;li&gt;go-lang-idea-plugin version:0.9.15.3&lt;/li&gt;
&lt;li&gt;golang version:1.2 darwin/amd64&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-plugin-go-language-golang-org-support-plugin-をインストール:912f531b5130eff1e497b90125f7ae0d&#34;&gt;1.Plugin(Go language(golang.org) support plugin)をインストール&lt;/h2&gt;

&lt;p&gt;①Intellij IDEAを起動 -&amp;gt; Welcome to Intellij IDEAConfigure -&amp;gt; Plugin -&amp;gt;　Browse repositories&amp;#8230;をクリック&lt;/p&gt;

&lt;p&gt;②&amp;#8221;golang&amp;#8221;で検索 -&amp;gt; Go language(golang.org) support pluginをインストール&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-thumbnail wp-image-1266&#34; alt=&#34;intellij_golang_plugin_01&#34; src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_01-396x300.png&#34; width=&#34;396&#34; height=&#34;300&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_01-396x300.png 396w, http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_01-300x227.png 300w, http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_01-1024x775.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_01-624x472.png 624w, http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_01-900x681.png 900w&#34; sizes=&#34;(max-width: 396px) 100vw, 396px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-sdkを設定:912f531b5130eff1e497b90125f7ae0d&#34;&gt;2.SDKを設定&lt;/h2&gt;

&lt;p&gt;①Configure -&amp;gt; Project Defaults -&amp;gt; Project Structureをクリック&lt;/p&gt;

&lt;p&gt;②左側のSDKを選択して、真ん中側の上部のプラスをクリックして、新しいSDKを追加します。このとき、&lt;code&gt;/usr/local/go&lt;/code&gt;を指定（僕はソースからインストールしてます。homebrewだと違うみたいです。）&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-thumbnail wp-image-1267&#34; alt=&#34;intellij_golang_plugin_02&#34; src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_02-394x300.png&#34; width=&#34;394&#34; height=&#34;300&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_02-394x300.png 394w, http://kwmt27.net/wp-content/uploads/2014/09/intellij_golang_plugin_02.png 732w&#34; sizes=&#34;(max-width: 394px) 100vw, 394px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-goプロジェクトを新規作成する:912f531b5130eff1e497b90125f7ae0d&#34;&gt;3.Goプロジェクトを新規作成する&lt;/h2&gt;

&lt;p&gt;New Projectから「Go」を選択 -&amp;gt; Next -&amp;gt; Next -&amp;gt; プロジェクト名(たとえば、hello)を入力 -&amp;gt; Finishを押すと、&lt;code&gt;Hello world!&lt;/code&gt;を出力する&lt;code&gt;src/hello.go&lt;/code&gt;ができます。&lt;/p&gt;

&lt;h2 id=&#34;4-実行する:912f531b5130eff1e497b90125f7ae0d&#34;&gt;4.実行する&lt;/h2&gt;

&lt;p&gt;ファイルを右クリックして、「Run &amp;#8216;hello.go&amp;#8217;」をクリックすれば、実行できます。&lt;/p&gt;

&lt;p&gt;ただ、Goプロジェクト全体を実行するには、どうしたらいいのかな。。。Run -&amp;gt; Run Configurationの&amp;#8221;Arguments:&amp;#8221;に、リンクしたいファイルを指定すれば実行できるけど、いちいち指定しないとダメなのか？また分かったら更新します。&lt;/p&gt;

&lt;h2 id=&#34;参考:912f531b5130eff1e497b90125f7ae0d&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/1orlCPC&#34; target=&#34;_blank&#34;&gt;go-lang-idea-plugin&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go 1.2 Release Notesを翻訳しました。 #golang</title>
      <link>/kwmt27.net/index.php/2013/12/23/translated-go12-release-notes/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/12/23/translated-go12-release-notes/</guid>
      <description>&lt;p&gt;1 December 2013に&lt;a href=&#34;http://blog.golang.org/go12&#34; target=&#34;_blank&#34;&gt;Go1.2がリリースされて&lt;/a&gt;もうすぐで1ヶ月ですが、&lt;a href=&#34;http://golang.org/doc/go1.2&#34; target=&#34;_blank&#34;&gt;Go 1.2 Release Notes&lt;/a&gt;を翻訳しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kwmt/golangwiki/blob/master/doc/go1.2.md&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/kwmt/golangwiki/blob/master/doc/go1.2.md&#34;&gt;https://github.com/kwmt/golangwiki/blob/master/doc/go1.2.md&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;間違い等ありましたら、PR頂けるとうれしいです！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#golang でマッチングサイトを作った時の感想。</title>
      <link>/kwmt27.net/index.php/2013/12/18/golang-advent-calendar-2013/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/12/18/golang-advent-calendar-2013/</guid>
      <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/go&#34; target=&#34;_blank&#34;&gt;Go Advent Calendar 2013&lt;/a&gt; の 18 日目の投稿です。&lt;/p&gt;

&lt;h2 id=&#34;はじめに:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今年もいろいろと行われていますAdvent Calendarですが、初めて参加させて頂きます。プログラミング界隈のプロフェッショナルな方々の中で書くというのは、ただ1人で家で書いてるだけなのに、ちょっと緊張しちゃってます(^^ゞ　&lt;/p&gt;

&lt;p&gt;簡単にGo歴を。&lt;a href=&#34;http://bit.ly/1dJqET7&#34; target=&#34;_blank&#34;&gt;2012年1月に勉強会&lt;/a&gt;に参加してから、シンプルで守備範囲が広そうで強力で、なにより楽しいと感じ、それから自分で勉強したりして発表させて頂いたりしました(&lt;a href=&#34;http://www.slideshare.net/yasi_life/presentations&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;)。&lt;a href=&#34;http://go-talks-kwmt.appspot.com/2013/gocon-spring.slide#1&#34; target=&#34;_blank&#34;&gt;神戸からGoCon Springに参加&lt;/a&gt;したり、&lt;a href=&#34;http://bit.ly/1dJqv20&#34; target=&#34;_blank&#34;&gt;神戸から名古屋の勉強会に参加&lt;/a&gt;したりしました。&lt;/p&gt;

&lt;p&gt;そんな中、今年の10月に、マッチングサイトを作ってほしいという話があり、言語は何でもいいとのことだったので、担当者に&amp;#8221;Goはキマスよ&amp;#8221;と訴え続け、Goで作らせて頂きました。&lt;/p&gt;

&lt;p&gt;そこで、よく「Goで何ができるの？」って聞かれますので、「マッチングサイトが作れますよ」という事例を紹介したいところなのですが、そのマッチングサイトは、まだオープンしておらず、残念ながらリンクやスクリーンショットを貼ることができません。ので、そのマッチングサイトを作った時の&amp;#8221;機能&amp;#8221;と&amp;#8221;構成&amp;#8221;を簡単に説明した後、&amp;#8221;感想&amp;#8221;を書いていきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;機能:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;このマッチングサイトのおおまかな機能としては、以下になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;都道府県や店舗の特徴から、ある店舗を検索できる&lt;/li&gt;
&lt;li&gt;検索結果から、各店舗の詳細を見ることができる&lt;/li&gt;
&lt;li&gt;お問い合わせフォームから各店舗に問い合わせできる(メール送信)&lt;/li&gt;
&lt;li&gt;各店舗を、新規に登録・更新・削除することができる&lt;/li&gt;
&lt;li&gt;登録時、画像をアップロードできる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;マッチングサイトの必要最低限の機能のイメージです。&lt;/p&gt;

&lt;h2 id=&#34;構成:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;構成&lt;/h2&gt;

&lt;h4 id=&#34;サーバーの構成:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;サーバーの構成&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/&#34; target=&#34;_blank&#34;&gt;Nginx + Golang(FastCGI) + MySQL&lt;/a&gt;で作成しました。&lt;/p&gt;

&lt;h4 id=&#34;パッケージ構成:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;パッケージ構成&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;main&lt;/code&gt;パッケージの他に&lt;code&gt;db&lt;/code&gt;パッケージ、&lt;code&gt;data&lt;/code&gt;パッケージ、後はテンプレートファイル(*.tmpl)です。&lt;/p&gt;

&lt;p&gt;MVCモデルのイメージで言うと、&lt;code&gt;data&lt;/code&gt;,&lt;code&gt;db&lt;/code&gt;パッケージがModelで、テンプレートはView、&lt;code&gt;main&lt;/code&gt;パッケージがControllerというイメージで作成しました。あとは、&lt;code&gt;util&lt;/code&gt;パッケージです。もちろん、db,data,utilという名前である必要はありません。&lt;/p&gt;

&lt;h4 id=&#34;各パッケージのファイル数と総ステップ数:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;各パッケージのファイル数と総ステップ数&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;mainパッケージ・・・17ファイル&lt;/li&gt;
&lt;li&gt;dataパッケージ・・・23ファイル&lt;/li&gt;
&lt;li&gt;dbパッケージ・・・2ファイル&lt;/li&gt;
&lt;li&gt;utilパッケージ・・・12ファイル&lt;/li&gt;
&lt;li&gt;テンプレートファイル・・・37ファイル&lt;/li&gt;
&lt;li&gt;総ステップ数・・・8678ステップ&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;使用した外部ライブラリ:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;使用した外部ライブラリ&lt;/h4&gt;

&lt;p&gt;データベース関連&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MySQLのドライバ：&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34; target=&#34;_blank&#34;&gt;&amp;#8220;github.com/go-sql-driver/mysql&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ORマッパー：&lt;a href=&#34;https://github.com/coopernurse/gorp&#34; target=&#34;_blank&#34;&gt;&amp;#8220;github.com/coopernurse/gorp&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;画像関連&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;画像をリサイズする：&lt;a href=&#34;https://github.com/nfnt/resize&#34; target=&#34;_blank&#34;&gt;&amp;#8220;github.com/nfnt/resize&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;実績工数:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;実績工数&lt;/h4&gt;

&lt;p&gt;実装2人で約30人日(デザイン除く)&lt;/p&gt;

&lt;h2 id=&#34;感想:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;(これだけではイメージ沸かないですよね・・・すみません。。。感想に入らせて頂きます。)&lt;/p&gt;

&lt;p&gt;●現在、&lt;a href=&#34;http://robfig.github.io/revel/&#34; target=&#34;_blank&#34;&gt;Revel&lt;/a&gt;と先日の海外のAdvent Calenderで発表がありました&lt;a href=&#34;http://blog.gopheracademy.com/day-05-beego&#34; target=&#34;_blank&#34;&gt;beego&lt;/a&gt;というフレームワークがありますが、このくらいの規模ならフレームワークは不要かなと思いました。&lt;/p&gt;

&lt;p&gt;●ORMの&lt;a href=&#34;https://github.com/coopernurse/gorp&#34; target=&#34;_blank&#34;&gt;gorp&lt;/a&gt;を使わず、ゴリゴリSQLをかいても出来ますが、gorpにより非常に楽させてもらいました。個人的には使いやすかったと思います。&lt;/p&gt;

&lt;p&gt;●標準パッケージでテンプレート(&lt;a href=&#34;http://golang.org/pkg/html/template/&#34; target=&#34;_blank&#34;&gt;html/template&lt;/a&gt;)が使え、改めてフレームワークなどを入れる必要がないので、余計な使い方を覚える必要がないのが個人的には良いと思いました。&lt;/p&gt;

&lt;p&gt;●デザイン部分はデザイナーさんが担当したのですが、&lt;code&gt;if&lt;/code&gt;文などのプログラミングがわかならなくても、&amp;#8221;{{}}部分はプログラムしていますが、他のところはいじってもらって大丈夫です&amp;#8221;ぐらいの説明で、テンプレートファイルを容易に理解して頂いたので、楽でした。&lt;/p&gt;

&lt;p&gt;●&lt;code&gt;{{define &amp;quot;header&amp;quot;}}ヘッダー{{end}}&lt;/code&gt;のようにモジュール化でき、&lt;code&gt;{{template &amp;quot;header&amp;quot;}}&lt;/code&gt;のようにして、モジュールを呼び出すことが出来ますが、あたりまえかもしれませんが、これもやみくもにモジュール化するのではなくて、分かりやすい構成にした方がよいと感じました。&lt;/p&gt;

&lt;p&gt;●テンプレートファイルの読み込みの仕方によっては、Goのバイナリを再コンパイルしなくても更新されるのは、非常に重宝しました。デザイナーさんがデザインを変更しても、ブラウザの更新だけでデザインの変更が確認できるからです。&lt;/p&gt;

&lt;p&gt;このようにする読み込みの仕方は、テンプレートファイルをParseするときに、関数の外で読み込まないことです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;func RootHandler(w http.ResponseWriter, r *http.Request) {
    tmpl := template.New(&#34;main.tmpl&#34;)
    tmpl = template.Must(tmpl.ParseGlob(&#34;templates/*.tmpl&#34;))
    data = ・・・
    tmpl.Execute(w,data)
    ・・・
}
&lt;/pre&gt;

&lt;p&gt;つまり、次のようにしてしまうと、ブラウザの更新だけでは更新されません。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;var  tmpl = template.Must((template.New(&#34;main.tmpl&#34;)).ParseGlob(&#34;templates/*.tmpl&#34;))

func RootHandler(w http.ResponseWriter, r *http.Request) {
    data = ・・・
    tmpl.Execute(w,data)
    ・・・
}
&lt;/pre&gt;

&lt;p&gt;●Go1.2からテンプレートに比較演算子が使えるようになりましたが(&lt;a href=&#34;http://golang.org/doc/go1.2#text_template&#34; target=&#34;_blank&#34;&gt;本家変更点&lt;/a&gt;, &lt;a href=&#34;https://github.com/kwmt/golangwiki/blob/master/doc/go1.2.md#the-texttemplate-and-htmltemplate-packages&#34; target=&#34;_blank&#34;&gt;翻訳&lt;/a&gt;)、個人的にはテンプレートをあまりプログラムちっくにすべきではないかもしれないと思いました。デザイナーさんにやさしいテンプレートを作成することが関係を良くするポイントかもしれません。&lt;/p&gt;

&lt;p&gt;●(感想というか覚え書きですが)テンプレートでは、ある構造体にレシーバとして定義したメソッドが使えます(&lt;a href=&#34;http://golang.org/pkg/text/template/#hdr-Arguments&#34; target=&#34;_blank&#34;&gt;text/templateパッケージ&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Person struct{
    Address int
}

func (p *Person) Method() bool {
    ・・・・
} 
&lt;/pre&gt;

&lt;p&gt;としたとき、テンプレートファイルを、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{{if .Method}}
・・・
{{end}}
&lt;/pre&gt;

&lt;p&gt;とすれば、&lt;code&gt;Method&lt;/code&gt;が使えます。&lt;a href=&#34;http://golang.org/pkg/text/template/#FuncMap&#34; target=&#34;_blank&#34;&gt;template.FuncMap&lt;/a&gt;(&lt;a href=&#34;http://bit.ly/1acasGJ&#34; target=&#34;_blank&#34;&gt;使い方&lt;/a&gt;)は、データに紐付けなくてもよい関数を作り、データに関連するものは上記の&lt;code&gt;Method&lt;/code&gt;のように作るようにすれば分かりやすいかなと思います。&lt;/p&gt;

&lt;p&gt;●(これも感想というか覚え書きですが)&lt;a href=&#34;http://golang.org/pkg/net/http/fcgi/&#34; target=&#34;_blank&#34;&gt;fcgi.Serve&lt;/a&gt;関数内で、要求があるたびに新しくゴルーチンを作っています(&lt;a href=&#34;http://golang.org/src/pkg/net/http/fcgi/child.go?s=6606:6660#L262&#34; target=&#34;_blank&#34;&gt;ソース&lt;/a&gt;)。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:c0dbec7fa3cfe404e69f284d2c58d1c4&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;このマッチングサイトのリンクやスクリーンショットを示せず、とても分かりにくかったと思いますが、&amp;#8221;Goってツール系のイメージがある&amp;#8221;とか、&amp;#8221;速さが必要なところでしか使わない&amp;#8221;とか思ってる方に、普通にWebサイトが作れるんだ、ということを少しは知って頂けたかなと思い、終わりにしたいと思います。&lt;/p&gt;

&lt;p&gt;なにかGoに関してご相談ありましたら、&lt;a href=&#34;https://twitter.com/kwmt27&#34;&gt;@kwmt27&lt;/a&gt; までご連絡下さい。最後までお読み頂きありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第1回大阪Go勉強会の課題をやってなかったので、いまさらながらやってみた。 #阪Go</title>
      <link>/kwmt27.net/index.php/2013/11/19/hango-exercises/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/11/19/hango-exercises/</guid>
      <description>

&lt;p&gt;課題は、&lt;a href=&#34;https://github.com/todoa2c/hango/blob/master/vol01.md&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先生のコードとは少し違かったので、めもっとく。&lt;/p&gt;

&lt;h2 id=&#34;fizzbuzz:b27d3339481c37c935bbbf5663b5e5b5&#34;&gt;FizzBuzz&lt;/h2&gt;

&lt;p&gt;
&lt;script src=&#34;//gist.github.com/7540879.js&#34;&gt;&lt;/script&gt;

&lt;!--TODO: こんな感じにしたい--&gt;
&lt;!--
&lt;script src=&#34;//gist.github.com/kwmt/7540879#file-fizzbuzz.go.js&#34;&gt;&lt;/script&gt;
--&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;switch&lt;/code&gt;のあと何も書かなかったら、&lt;code&gt;true&lt;/code&gt;っての忘れてた。&lt;/p&gt;

&lt;p&gt;最初、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;switch i {
case i % 15 == 0:
....
}
&lt;/pre&gt;

&lt;p&gt;って書いてエラー出たので、あれ？ってなってた。&lt;/p&gt;

&lt;h2 id=&#34;ワードカウント:b27d3339481c37c935bbbf5663b5e5b5&#34;&gt;ワードカウント&lt;/h2&gt;

&lt;p&gt;課題のワードカウントは、解答例見ちゃって、&lt;code&gt;map&lt;/code&gt;の使い方でふむふむとおもった。&lt;/p&gt;

&lt;h2 id=&#34;その日付は何日目:b27d3339481c37c935bbbf5663b5e5b5&#34;&gt;その日付は何日目？&lt;/h2&gt;

&lt;!--TODO: こんな感じにしたい--&gt;

&lt;!--
&lt;script src=&#34;//gist.github.com/kwmt/7540879#file-dayofyear.go.js&#34;&gt;&lt;/script&gt;
--&gt;

&lt;p&gt;&lt;code&gt;time&lt;/code&gt;パッケージはうるう年も考えてあるからラク。testコードは書いてないけど、まぁいいか。&lt;/p&gt;

&lt;h2 id=&#34;オライリーの総額計算:b27d3339481c37c935bbbf5663b5e5b5&#34;&gt;オライリーの総額計算&lt;/h2&gt;

&lt;!--TODO: こんな感じにしたい--&gt;

&lt;!--
&lt;script src=&#34;//gist.github.com/kwmt/7540879#file-oreillybook.go.js&#34;&gt;&lt;/script&gt;
--&gt;

&lt;p&gt;goroutineとchannelを使ってやってみたけど、終了処理がなんか微妙な気がするので、もっといい方法あれば教えてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#golang Examplesの仕組みについて</title>
      <link>/kwmt27.net/index.php/2013/11/08/about_exmaples_construction/</link>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/11/08/about_exmaples_construction/</guid>
      <description>&lt;p&gt;岡山で開催中のGolang Cafeの参加者の&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131107/1383807901&#34; target=&#34;_blank&#34;&gt;ブログ記事&lt;/a&gt;を見て、Examplesの仕組みが気になって調べた時にGoogle+に投稿した内容です。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Examplesの説明はココですね。なるほど。 
&lt;a href=&#34;http://golang.org/pkg/testing/#hdr-Examples&#34; target=&#34;_blank&#34;&gt;http://golang.org/pkg/testing/#hdr-Examples&lt;/a&gt; 

&#34;プログラムの例示と、出力結果を示す時に、プログラムの結果が本当に正しいかを確認できるようにしている&#34;というのは、間違いないと思われます。 

というのは、たとえば、 
&lt;a href=&#34;http://golang.org/pkg/encoding/json/#example_Marshal&#34; target=&#34;_blank&#34;&gt;http://golang.org/pkg/encoding/json/#example_Marshal&lt;/a&gt; 
ドキュメントにあるこの部分と、 
&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/example_test.go#L16&#34; target=&#34;_blank&#34;&gt;http://golang.org/src/pkg/encoding/json/example_test.go#L16&lt;/a&gt; 
testプログラムにあるこの部分がまったく一緒でしたので。 

これだけの理由だと弱いというのと、どのような仕組みでなってるか気になったので、 golang.org を&#34;Examples&#34;で検索してみたところ、ドキュメントのテンプレートを見つけたのですが(1.2では移動してます)、 
&lt;a href=&#34;http://golang.org/lib/godoc/package.html#{{$name_html}}&#34; target=&#34;_blank&#34;&gt;http://golang.org/lib/godoc/package.html#{{$name_html}}&lt;/a&gt;
この{{example_html $ .Name}}の部分でxxx_test.goのExampleXxx部分を切り出してdocに出力しているようです。 

example_htmlはFuncMapでテンプレート用に関数を作っていました。 
&lt;a href=&#34;https://code.google.com/p/go/source/browse/godoc/godoc.go?repo=tools#84&#34; target=&#34;_blank&#34;&gt;https://code.google.com/p/go/source/browse/godoc/godoc.go?repo=tools#84&lt;/a&gt; 

1.2で移動したpackage.htmlがどこに行ったかですが、 
&lt;a href=&#34;https://code.google.com/p/go/source/browse/godoc/static/package.html?repo=tools&#34; target=&#34;_blank&#34;&gt;https://code.google.com/p/go/source/browse/godoc/static/package.html?repo=tools&lt;/a&gt; 
こちらにありました。 

ちなみに調べてて気付いたのですが、&#34;go doc&#34;コマンドが&#34;godoc&#34;に1.2から変わるみたいですね。その変更でpackage.htmlは移動したみたいです。 

以上、そんな感じだと思います。 
いや〜、勉強になりました。
&lt;/pre&gt;

&lt;p&gt;とコメントしたら、次のようにコメント頂きました。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;godoc用のサンプルコードに使われるってことなんですね。
&lt;/pre&gt;

&lt;p&gt;たぶん、これがしっくりくる説明になるんじゃないかと思います。&lt;/p&gt;

&lt;p&gt;#ほとんどG+投稿内容のコピペです(^^ゞ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#golang mapからstructに変換するには？</title>
      <link>/kwmt27.net/index.php/2013/10/13/how-to-convert-from-map-to-struct/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/13/how-to-convert-from-map-to-struct/</guid>
      <description>

&lt;h2 id=&#34;reflect-pkgを使った方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;reflect pkgを使った方法&lt;/h2&gt;

&lt;p&gt;最初はなんとなくリフレクションを使ってやるのかなぁと思って、調べてたらこんな感じのが出てました。（&lt;a href=&#34;http://bit.ly/1axEplM&#34; target=&#34;_blank&#34;&gt;参考リンク&lt;/a&gt;）&lt;/p&gt;


&lt;script src=&#34;//gist.github.com/6938201.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/5Inl2jO7zL&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/5Inl2jO7zL&#34;&gt;http://play.golang.org/p/5Inl2jO7zL&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;encoding-json-pkgを使った方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;encoding/json pkgを使った方法&lt;/h2&gt;

&lt;p&gt;ただちょっとこれだと扱いにくくて(MapToStructの中身を修正すれば扱いやすくなるかもしれないですが)、パフォーマンスを気にしなければ、mapを一旦JSONにして、そのJSONをstructにするという方法が扱いやすいということを教えてもらいました。&lt;/p&gt;


&lt;script src=&#34;//gist.github.com/6950666.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/Kd7TRoRG5w&#34;&gt;http://play.golang.org/p/Kd7TRoRG5w&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ライブラリmapstructureを使う方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;ライブラリmapstructureを使う方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34;&gt;https://github.com/mitchellh/mapstructure&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mapstructure.Decode関数を使えばよさげ。&lt;/p&gt;

&lt;h2 id=&#34;補足-mapから-map-string-interface-に変換する方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;補足：mapから map[string]interface{}に変換する方法&lt;/h2&gt;

&lt;p&gt;最初は、MapToStructの第一引数にmap[string][]stringをそのまま渡してて、valueのところがスライスだったらだめなのかな？と思ってましたが、map[string]interface{}に変換すればいいだけってのを教えてもらって、次のような変換で解決しました。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;m := map[string][]string{
    &#34;1&#34;:[]string{&#34;a&#34;,&#34;b&#34;},
    &#34;2&#34;:[]string{&#34;C&#34;,&#34;d&#34;},
}
// convert map to a map[string]interface{}
mi := make(map[string]interface{}, len(m))
for k, v := range mm {
    mi[k] = v
}
&lt;/pre&gt;

&lt;h2 id=&#34;補足-個人的なきっかけ:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;補足：個人的なきっかけ&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;var r *http.Request
r.Form (= url.Values = map[string][]string)
&lt;/pre&gt;

&lt;p&gt;POSTリクエストがきた時のr.Formを構造体に一時的に格納したいのですが、格納先の構造体のフィールドがやたら多い場合、一個ずつ格納するのが面倒だなというのがきっかけでした。&lt;/p&gt;

&lt;h2 id=&#34;参考:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-nuts/2PCtqxyirVE&#34; target=&#34;_blank&#34;&gt;how to convert map to struct &amp;#8211; Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1axEplM&#34; target=&#34;_blank&#34;&gt;Ideone.com &amp;#8211; XWtlo &amp;#8211; Online Go Compiler &amp;#038; Debugging Tool&lt;/a&gt;（これはGo1以前のソースなのでそのままでは動かない）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1axEFRY&#34; target=&#34;_blank&#34;&gt;struct &amp;lt;-&amp;gt; map[string]interface{} conversion &amp;#8211; Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>#golang リフレクションを使って、キャストするには？</title>
      <link>/kwmt27.net/index.php/2013/10/09/how-to-cast-with-reflect-of-golang/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/09/how-to-cast-with-reflect-of-golang/</guid>
      <description>


&lt;script src=&#34;//gist.github.com/6895772.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/gvadP4k1Bo&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/gvadP4k1Bo&#34;&gt;http://play.golang.org/p/gvadP4k1Bo&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/strconv/#FormatInt&#34; target=&#34;_blank&#34;&gt;strconv.FormatInt&lt;/a&gt;の第一引数は&amp;#8221;int64&amp;#8243;型で、&lt;a href=&#34;http://golang.org/pkg/strconv/#FormatUint&#34; target=&#34;_blank&#34;&gt;strconv.FormatUint&lt;/a&gt;の第一引数は&amp;#8221;uint64&amp;#8243;型です。&lt;/p&gt;

&lt;p&gt;たとえば、ただ100と書くとint型になりますので、fv.Callの引数のところで、キャストしてあげる必要があります。キャストするには、reflectパッケージの&lt;a href=&#34;http://golang.org/pkg/reflect/#Value.Convert&#34; target=&#34;_blank&#34;&gt;Convertメソッド&lt;/a&gt;を使います。&lt;/p&gt;

&lt;p&gt;ほとんど同じ処理で、ある一部分だけ異なる関数を使っているという場合に役に立つと思います。&lt;/p&gt;

&lt;p&gt;ちなみに、このConvertメソッドは、go1.1のリリース時に追加されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/doc/go1.1#reflect&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://golang.org/doc/go1.1#reflect&#34;&gt;http://golang.org/doc/go1.1#reflect&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:dd3051da1cf2545fdceed9633c9e293f&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1fWdHYS&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;goken/goken08-reflect.md at master · goken/goken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/reflect/#Value.Convert&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/reflect/#Value.Convert&#34;&gt;http://golang.org/pkg/reflect/#Value.Convert&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1ctDnMp&#34; target=&#34;_blank&#34;&gt;#golang リフレクションを使って、関数の引数の型を取得するには？ | Androg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1ctDtDT&#34; target=&#34;_blank&#34;&gt;#golang リフレクションを使って、関数をコールするには？ | Androg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>#golang リフレクションを使って、関数の引数の型を取得するには？</title>
      <link>/kwmt27.net/index.php/2013/10/09/how-to-get-function-arg-type-with-reflect-of-golang/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/09/how-to-get-function-arg-type-with-reflect-of-golang/</guid>
      <description>


&lt;script src=&#34;//gist.github.com/6895177.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;参考:b6a95452afe1d4c92c27b37ba552d1b6&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1fWdHYS&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;goken/goken08-reflect.md at master · goken/goken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/src/pkg/reflect/type.go?#L157&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://golang.org/src/pkg/reflect/type.go?#L157&#34;&gt;http://golang.org/src/pkg/reflect/type.go?#L157&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>#golang リフレクションを使って、関数をコールするには？</title>
      <link>/kwmt27.net/index.php/2013/10/09/how-to-call-function-with-reflect-of-golang/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/09/how-to-call-function-with-reflect-of-golang/</guid>
      <description>


&lt;script src=&#34;//gist.github.com/6895428.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;参考:a7253945f587662917148ac6e1019182&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1fWdHYS&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;goken/goken08-reflect.md at master · goken/goken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/reflect/#Value.Call&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/reflect/#Value.Call&#34;&gt;http://golang.org/pkg/reflect/#Value.Call&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>#golang 文字数をカウントするには？</title>
      <link>/kwmt27.net/index.php/2013/10/10/how-to-count-number-of-string-golang/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/10/how-to-count-number-of-string-golang/</guid>
      <description>

&lt;h2 id=&#34;文字数をカウントしたい:6f938ada1f11f42a584fe7ddf82d3475&#34;&gt;文字数をカウントしたい！&lt;/h2&gt;

&lt;p&gt;そう思ってすぐ思いついたのは、stringsパッケージの&lt;a href=&#34;http://golang.org/pkg/strings/#Count&#34; target=&#34;_blank&#34;&gt;Count&lt;/a&gt;関数。&lt;/p&gt;

&lt;p&gt;Exampleのあったので、確認のためRunしてみる。&lt;/p&gt;

&lt;p&gt;なぜか期待する文字数の +1 になる。&lt;a href=&#34;http://golang.org/src/pkg/strings/strings.go?#L70&#34; target=&#34;_blank&#34;&gt;srcを見てみたところ、+1されてる・・・&lt;/a&gt;。なんで？&lt;/p&gt;

&lt;p&gt;とツイートしたら、ロブ・パイク先生からお返事頂きました！&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    &lt;a href=&#34;https://twitter.com/kwmt27&#34;&gt;@kwmt27&lt;/a&gt; All strings contain the empty string.
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Rob Pike (@rob_pike) &lt;a href=&#34;https://twitter.com/rob_pike/status/387996687173550080&#34;&gt;October 9, 2013&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;でも、あれ？ &lt;a href=&#34;http://golang.org/pkg/strings/#Count&#34; target=&#34;_blank&#34;&gt;strings#Count&lt;/a&gt;の例にあるけど、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;fmt.Println(strings.Count(&#34;cheese&#34;, &#34;e&#34;))
&lt;/pre&gt;

&lt;p&gt;これは、3と出力しますよね。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;fmt.Println(strings.Count(&#34;five&#34;, &#34;&#34;))
&lt;/pre&gt;

&lt;p&gt;これは、なんで5を出力するの？すべての文字列にempty stringが&amp;#8221;含まれてる&amp;#8221;んなら、1じゃないのかな！？この答えは、たぶんプログラミング言語の基本な気がする&amp;#8230;ちょっと調べてみよう。&lt;/p&gt;

&lt;p&gt;とにかく、期待する文字数をカウントするには、Count関数でも使われているunicode/utf8パッケージの&lt;a href=&#34;http://golang.org/pkg/unicode/utf8/#RuneCountInString&#34; target=&#34;_blank&#34;&gt;RuneCountInString&lt;/a&gt;関数を使えばよさそうだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#golang リフレクションを使って関数名を取得するには？</title>
      <link>/kwmt27.net/index.php/2013/10/05/golang-how-to-get-function-name-with-reflection/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/05/golang-how-to-get-function-name-with-reflection/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/reflect/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;reflect&amp;#8221;&lt;/a&gt;パッケージだけでは取得できないようで、&lt;a href=&#34;http://golang.org/pkg/runtime/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;runtime&amp;#8221;&lt;/a&gt;パッケージの&lt;code&gt;&amp;lt;a href=&amp;quot;http://golang.org/pkg/runtime/#FuncForPC&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;FuncForPC&amp;lt;/a&amp;gt;&lt;/code&gt;という関数を使うようです。&lt;/p&gt;


&lt;script src=&#34;//gist.github.com/6840466.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;参考:69498b034e47686ef53c806c66b6fa56&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1a0Zfsp&#34; target=&#34;_blank&#34;&gt;reflection &amp;#8211; How to get the name of a function in Go? &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1fWdHYS&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;goken/goken08-reflect.md at master · goken/goken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>#golang 関数の引数をオプション的に扱うには？</title>
      <link>/kwmt27.net/index.php/2013/10/06/golang-function-arg-option/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/06/golang-function-arg-option/</guid>
      <description>&lt;p&gt;分かりやすい言葉が思いつかなかったのすが、関数の引数をオプション的に扱うというのは、関数の引数をとってもとならなくても良いように関数を定義することです。それには&lt;code&gt;&amp;lt;a href=&amp;quot;http://golang.org/ref/spec#Passing_arguments_to_..._parameters&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;&lt;/code&gt;パラメータを使うと良さそうです。&lt;/p&gt;


&lt;script src=&#34;//gist.github.com/6840821.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/kRLQLIWkxN&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/kRLQLIWkxN&#34;&gt;http://play.golang.org/p/kRLQLIWkxN&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、&lt;code&gt;&amp;lt;a href=&amp;quot;http://golang.org/ref/spec#Passing_arguments_to_..._parameters&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;&lt;/code&gt;パラメータは、引数の最後でしか使えませんので、注意が必要です。つまり、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;func f(s ...string, i int)
&lt;/pre&gt;

&lt;p&gt;のようなことはできないということです。ちなみに、こうすると次のエラーがでます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;can only use ... as final argument in list
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>#Nginx &#43; #golang (FastCGI)&#43; #MySQL を使ったWebアプリケーションを書くための準備</title>
      <link>/kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/</link>
      <pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/</guid>
      <description>

&lt;h2 id=&#34;はじめに:30541588868439902a1efc8adcbbf1c0&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;下記の記事をみたら分かりやすいかもしれませんが、英語なので、実際にやった方法も交えてメモしておこうと思います。（似てるところもありますが、翻訳ではありません。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mwholt.blogspot.jp/2013/05/writing-go-golang-web-app-with-nginx.html&#34; target=&#34;_blank&#34;&gt;Writing a Go (&amp;#8220;golang&amp;#8221;) Web App with nginx, FastCGI, MySQL, JSON&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前提として、Go言語でWebサーバーをつくって動かすと言うと２種類の方法があります。&lt;/p&gt;

&lt;p&gt;１つは、Go言語の&lt;a href=&#34;http://golang.org/pkg/net/http/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http&amp;#8221;&lt;/a&gt;パッケージというのがありますので、これを使ってGo自体でWebサーバーを作ってしまうことができます。&lt;/p&gt;

&lt;p&gt;もう1つは、ApacheやNginxなどのWebサーバー上で、CGI(正確にはFastCGI)としてGo言語を動かす方法です。これはNginx+PHP-FPMのようなもに近いイメージだと思います。&lt;/p&gt;

&lt;p&gt;Nginxを使うか使わないかは、こちらの&lt;a href=&#34;http://stackoverflow.com/questions/17776584/webserver-for-go-golang-webservices-using-nginx-or-not&#34; title=&#34;Webserver for Go (golang) webservices: using NGINX or not?&#34; target=&#34;_blank&#34;&gt;Stackoverflow&lt;/a&gt;をみると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Go HTTPサーバーはいいんだけど、Webサーバーを一から作るのは大変だよ、Nginxを使った方が簡単だよ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;みたいな感じで、Nginxつかった方がいいよという結論になってます。&lt;/p&gt;

&lt;p&gt;この記事では、2つ目の方法のNginx+golang(FastCGI)でWebアプリケーションを作る準備をメモしたいと思います。&lt;/p&gt;

&lt;p&gt;データベースとしては、MySQLを使いたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;使用環境:30541588868439902a1efc8adcbbf1c0&#34;&gt;使用環境&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;サーバOS:CentOS release 6.4
Webサーバ:nginx-1.4.1
データベース:mysql  Ver 14.14 Distrib 5.5.27
&lt;/pre&gt;

&lt;h2 id=&#34;1-nginxをインストールする-seciton:30541588868439902a1efc8adcbbf1c0&#34;&gt;1.Nginxをインストールする {.seciton}&lt;/h2&gt;

&lt;p&gt;まずは、CentOSにNginxをソースからインストールしたいと思います。(&lt;a href=&#34;http://wiki.nginx.org/Install&#34; target=&#34;_blank&#34;&gt;Nginx installリンク&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;なぜソースからインストールするのかは、Web+DBにおすすめと書かれていたから(^o^;&lt;/p&gt;

&lt;p&gt;ちゃんというとモジュール追加するには、make時にくっつけとかないといけないからで、必要なければ、rpmとかからインストールしてもいいと思います。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# wget http://nginx.org/download/nginx-1.4.1.tar.gz
# tar zxvf nginx-1.4.1.tar.gz
# ls
nginx-1.4.1
# cd nginx-1.4.1
# ./configure
&lt;/pre&gt;

&lt;p&gt;雑誌Web+DB pressのVol12.2013には下記のように指定してましたが、個人的にはデフォルトの方が分かりやすいため、特にオプション指定はしていません。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# ./configure --prefix=/usr/local --conf-path=/etc/nginx/nginx.conf 
&lt;/pre&gt;

&lt;p&gt;デフォルトでは、Nginxは/usr/local/nginxにインストールされます。&lt;/p&gt;

&lt;p&gt;nginxのサービスを起動したりするコマンドは、/usr/local/nginx/sbinの中にあるnginxコマンドなので、PATHを設定しておくと楽になるかと思います。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;bashの場合 .bashrcに下記を記入
export PATH=/usr/local/nginx/sbin:$PATH
&lt;/pre&gt;

&lt;p&gt;さて、&lt;code&gt;./configure&lt;/code&gt;の時点に少し戻ります。私の環境では、&lt;code&gt;./configure&lt;/code&gt;時に下記の2つのエラーが出ましたので、それらについてのエラー内容と対策も書いておきたいと思います。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;【./configure時のエラー１】
./configure: error: the HTTP rewrite module requires the PCRE library.
【対策】
# yum -y install pcre pcre-devel

【./configure時のエラー２】
./configure: error: the HTTP gzip module requires the zlib library.
【対策】
# yum -y install zlib-devel

※参考
&lt;a href=&#34;http://bit.ly/19V1ahY&#34; target=&#34;_blank&#34;&gt;64bit版CentOS 5.3にnginxをインストールしてみた - Umeyashikiの日記&lt;/a&gt; 
&lt;/pre&gt;

&lt;p&gt;これで&lt;code&gt;./configure&lt;/code&gt;が正常に終了したと思いますので、下記のようにしてインストールしましょう。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# make
# make install
&lt;/pre&gt;

&lt;p&gt;以上で、Nginxのインストールは終了です。&lt;/p&gt;

&lt;p&gt;次に、Nginxの設定に行きたいところですが、インストールを終わらせてしまいましょう。&lt;/p&gt;

&lt;h2 id=&#34;2-go-toolsをインストール:30541588868439902a1efc8adcbbf1c0&#34;&gt;2.Go Toolsをインストール&lt;/h2&gt;

&lt;p&gt;基本的には本家サイトの&lt;a href=&#34;http://golang.org/doc/install&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;をみてください。&lt;/p&gt;

&lt;p&gt;簡単に言うと、こちらから環境にあったものをインストールするか、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ソースからインストールする場合には、拙作ですが、gitが入っていれば数回のコマンド入力でgoがインストールできます。「Mercurialが入ってなければ、Mercurialをインストールする」というような工程はもう必要ありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kwmt/goinstall&#34; title=&#34;goinstall&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/kwmt/goinstall&#34;&gt;https://github.com/kwmt/goinstall&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらもお勧めです。(Linux,Macのみ対応しています。)&lt;/p&gt;

&lt;h2 id=&#34;3-mysqlをインストールする:30541588868439902a1efc8adcbbf1c0&#34;&gt;3.MySQLをインストールする&lt;/h2&gt;

&lt;p&gt;ググりましょう。&lt;/p&gt;

&lt;h2 id=&#34;4-nginxの設定をする:30541588868439902a1efc8adcbbf1c0&#34;&gt;4.Nginxの設定をする&lt;/h2&gt;

&lt;p&gt;FastCGIを使うには、locationディレクティブに次のような感じで設定するようです。&lt;/p&gt;

&lt;p&gt;この例だと、ポート8080にアクセスがきたら、ポート9000にアクセスするようになります。（作るアプリによっては実用的ではないかもしれません）&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;server {
    listen       8080;
    server_name  localhost;

    location / {
        fastcgi_pass 127.0.0.1:9000;
        include fastcgi.conf;
    }
}
&lt;/pre&gt;

&lt;p&gt;Basic認証を掛ける方法は、&lt;a href=&#34;http://bit.ly/17eWMgm&#34; target=&#34;_blank&#34;&gt;【Nginx】Basic認証をかける&lt;/a&gt;を参考にさせて頂きました。&lt;/p&gt;

&lt;p&gt;実際の設定としては次のようになります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;location /admin {
            auth_basic &#34;members onry&#34;;
            auth_basic_user_file &#34;/etc/nginx/.htpasswd&#34;;
            fastcgi_pass 127.0.0.1:9000;
            include fastcgi.conf;
        }
&lt;/pre&gt;

&lt;p&gt;設定が終わったので、Nginxを起動させましょう。起動するには、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# nginx
&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;再起動と停止は次のようにします。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;# nginx -s reload //再起動
# nignx -s stop   //停止
&lt;/pre&gt;

&lt;h2 id=&#34;5-go言語プログラムをfastcgiとして動かすためには:30541588868439902a1efc8adcbbf1c0&#34;&gt;5.Go言語プログラムをFastCGIとして動かすためには&lt;/h2&gt;

&lt;p&gt;何も出力しませんが、localhost:9000で接続要求を待ってくれます。この&amp;#8221;9000&amp;#8243;はNginx側の設定の9000と合わせる必要があります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;package main
import (
    &#34;net/http&#34;
    &#34;net/http/fcgi&#34;
)
func main(){
    l,_:= net.Listen(&#34;tcp&#34;,&#34;:9000&#34;)
    mux := http.NewServeMux()
    fcgi.Serve(l,mux)
}
&lt;/pre&gt;

&lt;p&gt;ちなみに、下記は&lt;a href=&#34;http://golang.org/pkg/net/http/fcgi/#Serve&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http/fcgi&amp;#8221;&lt;/a&gt;パッケージのServe関数の翻訳です。Serve関数で何をやってるのかが分かるかと思います。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Serve関数はリスナー&lt;code&gt;l&lt;/code&gt;(エル)上で、FastCGI接続を待ち受け、それぞれに対して新しいゴルーチンを作ります。&lt;/p&gt;

&lt;p&gt;そのゴルーチンはリクエストを解釈し、リクエストに応答する&lt;code&gt;handler&lt;/code&gt;をコールします。&lt;code&gt;l&lt;/code&gt;(エル)が&lt;code&gt;nil&lt;/code&gt;の場合、&lt;code&gt;Serve&lt;/code&gt;関数は、&lt;code&gt;os.Stdin&lt;/code&gt;からの接続を受け入れます。&lt;code&gt;handler&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;の場合、&lt;code&gt;http.DefaultServeMux&lt;/code&gt;が使われます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-go言語からmysqlを使うには:30541588868439902a1efc8adcbbf1c0&#34;&gt;6.Go言語からMySQLを使うには&lt;/h2&gt;

&lt;p&gt;ドライバを下記からインストールする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/s/sqldrivers&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://golang.org/s/sqldrivers&#34;&gt;http://golang.org/s/sqldrivers&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上のリストをみると、MySQLのドライバは2つあるのですが、たとえば、go-sql-driver/mysqlをインストールするには次のようにします。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ go get github.com/go-sql-driver/mysql
&lt;/pre&gt;

&lt;p&gt;使い方については、下記が参考になると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql/wiki/Examples&#34; target=&#34;_blank&#34;&gt;wikiにあるExamples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/dddb13c15643454a7c3b&#34; target=&#34;_blank&#34;&gt;[Go言語] database/sqlパッケージを使ってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もう1つのドライバmymysqlについては、過去記事をご参照ください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2012/09/06/golang%e3%81%8b%e3%82%89mysql%e3%82%92%e4%bd%bf%e3%81%86%e3%81%ab%e3%81%af/&#34; title=&#34;golangからMySQLを使うには&#34; target=&#34;_blank&#34;&gt;golangからMySQLを使うには&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;補足-mysqlから取得した日本語が文字化けする件:30541588868439902a1efc8adcbbf1c0&#34;&gt;補足：mysqlから取得した日本語が文字化けする件&lt;/h2&gt;

&lt;p&gt;※Mac OSのみかもしれない.&lt;/p&gt;

&lt;p&gt;【原因】&lt;/p&gt;

&lt;p&gt;Server側とClient側の文字コードが異なっていたため。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Server characterset:    latin1
Db     characterset:    latin1
Client characterset:    utf8
Conn.  characterset:    utf8
&lt;/pre&gt;

&lt;p&gt;【対策】&lt;/p&gt;

&lt;p&gt;macでは&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;/etc/my.conf
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;[client]
default-character-set=utf8
...
[mysqld]
character-set-server=utf8 #ここだけ 違うので注意
...
[mysqldump]
...
default-character-set=utf8  
[mysql]
...
default-character-set=utf8
&lt;/pre&gt;

&lt;p&gt;あとはmysqlを再起動する&lt;/p&gt;

&lt;p&gt;（macの場合はシステム環境設定-&amp;gt;MySQL-&amp;gt;Stop MySQL Server -&amp;gt;Start MySQL Server）&lt;/p&gt;

&lt;p&gt;※参考&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nightmare_tim/20110530/1306704112&#34;&gt;fedora15 mysql5.5 default-character-setが原因で起動できない&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;補足-go言語でクロスコンパイルするには:30541588868439902a1efc8adcbbf1c0&#34;&gt;補足：Go言語でクロスコンパイルするには&lt;/h2&gt;

&lt;p&gt;まだ試したことないですが、とりあえずメモがてら。ためして何か分かったら更新するかもです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/1g3egQA&#34; target=&#34;_blank&#34;&gt;Go言語でクロスコンパイルする &amp;#8211; memoメモ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;おわりに:30541588868439902a1efc8adcbbf1c0&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これでひとまずNginx+golang(fcgi)+MySQLの環境が整ったとおもいますので、あとは&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/doc/articles/wiki/&#34; target=&#34;_blank&#34;&gt;Writing Web Applications&lt;/a&gt;(&lt;a href=&#34;https://github.com/kwmt/golangwiki/blob/master/doc/articles/wiki.md&#34; target=&#34;_blank&#34;&gt;日本語訳&lt;/a&gt;)(スライド：&lt;a href=&#34;http://www.slideshare.net/yasi_life/goweb-16448500&#34; target=&#34;_blank&#34;&gt;Go言語によるwebアプリの作り方&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;のような記事を読むと良いと思います。&lt;/p&gt;

&lt;h2 id=&#34;参考リンク:30541588868439902a1efc8adcbbf1c0&#34;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mwholt.blogspot.jp/2013/05/writing-go-golang-web-app-with-nginx.html&#34; target=&#34;_blank&#34;&gt;Writing a Go (&amp;#8220;golang&amp;#8221;) Web App with nginx, FastCGI, MySQL, JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/17776584/webserver-for-go-golang-webservices-using-nginx-or-not&#34; title=&#34;Webserver for Go (golang) webservices: using NGINX or not?&#34; target=&#34;_blank&#34;&gt;Stackoverflow:Webserver for Go (golang) webservices: using NGINX or not?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/net/http/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http&amp;#8221;&lt;/a&gt;パッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/net/http/fcgi/#Serve&#34; target=&#34;_blank&#34;&gt;&amp;#8220;net/http/fcgi&amp;#8221;&lt;/a&gt;パッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/Install&#34; target=&#34;_blank&#34;&gt;Nginx installリンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/19V1ahY&#34; target=&#34;_blank&#34;&gt;64bit版CentOS 5.3にnginxをインストールしてみた &amp;#8211; Umeyashikiの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/17eWMgm&#34; target=&#34;_blank&#34;&gt;【Nginx】Basic認証をかける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/install&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kwmt/goinstall&#34; title=&#34;goinstall&#34; target=&#34;_blank&#34;&gt;goinstall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/s/sqldrivers&#34; target=&#34;_blank&#34;&gt;SQLDrivers &amp;#8211; go-wiki &amp;#8211; SQL database drivers &amp;#8211; Go Language Community Wiki &amp;#8211; Google Project Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql/wiki/Examples&#34; target=&#34;_blank&#34;&gt;wikiにあるExamples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/dddb13c15643454a7c3b&#34; target=&#34;_blank&#34;&gt;[Go言語] database/sqlパッケージを使ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2012/09/06/golang%e3%81%8b%e3%82%89mysql%e3%82%92%e4%bd%bf%e3%81%86%e3%81%ab%e3%81%af/&#34; title=&#34;golangからMySQLを使うには&#34; target=&#34;_blank&#34;&gt;golangからMySQLを使うには&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nightmare_tim/20110530/1306704112&#34;&gt;fedora15 mysql5.5 default-character-setが原因で起動できない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1g3egQA&#34; target=&#34;_blank&#34;&gt;Go言語でクロスコンパイルする &amp;#8211; memoメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>