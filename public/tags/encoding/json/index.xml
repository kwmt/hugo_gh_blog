<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Encoding/Json on Androg</title>
    <link>kwmt27.net/tags/encoding/json/</link>
    <description>Recent content in Encoding/Json on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 23 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/tags/encoding/json/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>構造体にフィールドを追加しないで、JSONに動的にフィールドを追加したい #golang</title>
      <link>/kwmt27.net/index.php/2014/09/23/how-to-add-a-field-to-the-json-output-without-including-it-in-the-struct/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/23/how-to-add-a-field-to-the-json-output-without-including-it-in-the-struct/</guid>
      <description>

&lt;h2 id=&#34;はじめに:d6d2446f3900c5d3546220864ee13d11&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;JSONを返したい場合、定義済みの構造体に対して&lt;code&gt;json.Marshal&lt;/code&gt;とかして、JSONにしていたのですが、下記の&lt;code&gt;Book&lt;/code&gt;構造体の例だと、返せるフィールドは&lt;code&gt;Title,Author&lt;/code&gt;だけになってしまいます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title  string
    Author string
}

response, _ := json.Marshal(book)
fmt.Fprintf(w, string(response))
&lt;/pre&gt;

&lt;p&gt;それ以外のフィールドも動的に追加するにはどうしたらか調べたので書いておこうかと思います。&lt;/p&gt;

&lt;h2 id=&#34;方法:d6d2446f3900c5d3546220864ee13d11&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;基本的には、&lt;a href=&#34;http://stackoverflow.com/questions/23045884/can-i-use-marshaljson-to-add-arbitrary-fields-to-a-json-encoding-in-golang&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt;に書いてありますので、参考くださいなんですが、下記のような感じです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title  string
    Author string
}

type FakeBook Book

func (b Book) MarshalJSON() ([]byte, error) {
    return json.Marshal(struct {
        FakeBook
        Genre string
    }{
        FakeBook: FakeBook(b),
        Genre:    &#34;Satire&#34;,
    })
}
&lt;/pre&gt;

&lt;p&gt;このように、&lt;code&gt;Book&lt;/code&gt;構造体に対して、&lt;code&gt;Mashaler&lt;/code&gt;インターフェースを実装することで、フィールドを追加することができます。&lt;/p&gt;

&lt;p&gt;結果は以下のとおり。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{
  &#34;Title&#34;: &#34;Catch-22&#34;,
  &#34;Author&#34;: &#34;Joseph Heller&#34;,
  &#34;Genre&#34;: &#34;Satire&#34;
}
&lt;/pre&gt;

&lt;h2 id=&#34;仕組みとしては-簡単に:d6d2446f3900c5d3546220864ee13d11&#34;&gt;仕組みとしては(簡単に)&lt;/h2&gt;

&lt;p&gt;この場合、&lt;code&gt;Book&lt;/code&gt;は&lt;code&gt;Marshaler&lt;/code&gt;インターフェースを実装したことになります。(&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go?h=MarshalJSON#L191&#34; target=&#34;_blank&#34;&gt;Marshalerインターフェース&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;これによって、&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go#L356&#34; target=&#34;_blank&#34;&gt;Marshalerインターフェースを実装しているなら&lt;/a&gt;、&lt;code&gt;marshalerEncoder&lt;/code&gt;がコールされ、&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go#L414&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;MarshalJSON&lt;/code&gt;がコールされます。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;配列の各要素に追加したい場合も同様で:d6d2446f3900c5d3546220864ee13d11&#34;&gt;配列の各要素に追加したい場合も同様で、&lt;/h2&gt;

&lt;p&gt;つまり次のような場合、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title   string
    Authors []Author
}

type Author struct {
    Name  string
    Email string
}
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Author&lt;/code&gt;構造体に&lt;code&gt;Mashaler&lt;/code&gt;インターフェースを実装してあげればいいだけです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;func (b Author) MarshalJSON() ([]byte, error) {
    return json.Marshal(struct {
        FakeAuthor
        Genre string
    }{
        FakeAuthor: FakeAuthor(b),
        Genre:      &#34;Satire&#34;,
    })
}
&lt;/pre&gt;

&lt;p&gt;Playground: &lt;a href=&#34;http://play.golang.org/p/tZEaLTt7Fc&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/tZEaLTt7Fc&#34;&gt;http://play.golang.org/p/tZEaLTt7Fc&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結果は次のようになります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{
  &#34;Title&#34;: &#34;Catch-22&#34;,
  &#34;Authors&#34;: [
    {
      &#34;Name&#34;: &#34;Joseph&#34;,
      &#34;Email&#34;: &#34;abc@xxx.com&#34;,
      &#34;Genre&#34;: &#34;Satire&#34;
    },
    {
      &#34;Name&#34;: &#34;Heller&#34;,
      &#34;Email&#34;: &#34;dec@yyy.com&#34;,
      &#34;Genre&#34;: &#34;Satire&#34;
    }
  ]
}
&lt;/pre&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#golang mapからstructに変換するには？</title>
      <link>/kwmt27.net/index.php/2013/10/13/how-to-convert-from-map-to-struct/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/10/13/how-to-convert-from-map-to-struct/</guid>
      <description>

&lt;h2 id=&#34;reflect-pkgを使った方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;reflect pkgを使った方法&lt;/h2&gt;

&lt;p&gt;最初はなんとなくリフレクションを使ってやるのかなぁと思って、調べてたらこんな感じのが出てました。（&lt;a href=&#34;http://bit.ly/1axEplM&#34; target=&#34;_blank&#34;&gt;参考リンク&lt;/a&gt;）&lt;/p&gt;


&lt;script src=&#34;//gist.github.com/6938201.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/5Inl2jO7zL&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/5Inl2jO7zL&#34;&gt;http://play.golang.org/p/5Inl2jO7zL&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;encoding-json-pkgを使った方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;encoding/json pkgを使った方法&lt;/h2&gt;

&lt;p&gt;ただちょっとこれだと扱いにくくて(MapToStructの中身を修正すれば扱いやすくなるかもしれないですが)、パフォーマンスを気にしなければ、mapを一旦JSONにして、そのJSONをstructにするという方法が扱いやすいということを教えてもらいました。&lt;/p&gt;


&lt;script src=&#34;//gist.github.com/6950666.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/Kd7TRoRG5w&#34;&gt;http://play.golang.org/p/Kd7TRoRG5w&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ライブラリmapstructureを使う方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;ライブラリmapstructureを使う方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34;&gt;https://github.com/mitchellh/mapstructure&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mapstructure.Decode関数を使えばよさげ。&lt;/p&gt;

&lt;h2 id=&#34;補足-mapから-map-string-interface-に変換する方法:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;補足：mapから map[string]interface{}に変換する方法&lt;/h2&gt;

&lt;p&gt;最初は、MapToStructの第一引数にmap[string][]stringをそのまま渡してて、valueのところがスライスだったらだめなのかな？と思ってましたが、map[string]interface{}に変換すればいいだけってのを教えてもらって、次のような変換で解決しました。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;m := map[string][]string{
    &#34;1&#34;:[]string{&#34;a&#34;,&#34;b&#34;},
    &#34;2&#34;:[]string{&#34;C&#34;,&#34;d&#34;},
}
// convert map to a map[string]interface{}
mi := make(map[string]interface{}, len(m))
for k, v := range mm {
    mi[k] = v
}
&lt;/pre&gt;

&lt;h2 id=&#34;補足-個人的なきっかけ:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;補足：個人的なきっかけ&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;var r *http.Request
r.Form (= url.Values = map[string][]string)
&lt;/pre&gt;

&lt;p&gt;POSTリクエストがきた時のr.Formを構造体に一時的に格納したいのですが、格納先の構造体のフィールドがやたら多い場合、一個ずつ格納するのが面倒だなというのがきっかけでした。&lt;/p&gt;

&lt;h2 id=&#34;参考:6a6ec8ccc2e96e6ec0438624473d174f&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-nuts/2PCtqxyirVE&#34; target=&#34;_blank&#34;&gt;how to convert map to struct &amp;#8211; Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1axEplM&#34; target=&#34;_blank&#34;&gt;Ideone.com &amp;#8211; XWtlo &amp;#8211; Online Go Compiler &amp;#038; Debugging Tool&lt;/a&gt;（これはGo1以前のソースなのでそのままでは動かない）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1axEFRY&#34; target=&#34;_blank&#34;&gt;struct &amp;lt;-&amp;gt; map[string]interface{} conversion &amp;#8211; Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>