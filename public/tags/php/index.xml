<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Androg</title>
    <link>kwmt27.net/tags/php/</link>
    <description>Recent content in Php on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 31 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>VagrantでPHP開発環境構築方法</title>
      <link>/kwmt27.net/index.php/2014/01/31/how-to-create-php-dev-env-with-eclipse/</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/01/31/how-to-create-php-dev-env-with-eclipse/</guid>
      <description>

&lt;h2 id=&#34;vagrantのインストール:7f8a3f2caf98ab1830b66868f23d6315&#34;&gt;vagrantのインストール&lt;/h2&gt;

&lt;p&gt;参考サイト&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/inouet@github/items/b36638adc2b5772db457&#34;&gt;http://qiita.com/inouet@github/items/b36638adc2b5772db457&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vagrantインストール&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VirtualBox を公式サイトからインストール
※VirtualBoxはインストール済みの為、ここでは作業してない&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Boxの追加
&lt;pre class=&#34;go&#34;&gt;vagrant box add centos64 &lt;a href=&#34;http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130731.box&#34;&gt;http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130731.box&lt;/a&gt;
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;仮想マシンを作る
&lt;pre class=&#34;go&#34;&gt;$ mkdir -p ~/Vagrant/CentOS64
$ cd ~/Vagrant/CentOS64
$ vagrant init centos64
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;仮想マシンを起動する
&lt;pre class=&#34;go&#34;&gt;$ vagrant up
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;仮想マシンへ接続
&lt;pre class=&#34;go&#34;&gt;$ vagrant ssh
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ネットワークの設定
&lt;pre class=&#34;go&#34;&gt;$ vim Vagrantfile&lt;/p&gt;

&lt;h1 id=&#34;config-vm-network-private-network-ip-192-168-33-10:7f8a3f2caf98ab1830b66868f23d6315&#34;&gt;config.vm.network :private_network, ip: &amp;ldquo;192.168.33.10&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;↑ ここのコメントアウトを削除
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;vagrant のリロード
&lt;pre class=&#34;go&#34;&gt;$ vagrant reload
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで、192.168.33.10 というIPでアクセスできる&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;cent os6からは下記をいれておくと何か早くなる設定
&lt;pre class=&#34;go&#34;&gt;sudo vi /etc/resolv.conf
options single-request-reopen
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ファイアーウォールを切る
ローカルの開発環境なので、必要がないため。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo service iptables stop
&lt;/pre&gt;

&lt;p&gt;再起動したときに有効にならないようにする&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo chkconfig iptables off
&lt;/pre&gt;

&lt;p&gt;Webサーバーが入っているか確認&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ yum list installed  |grep httpd
&lt;/pre&gt;

&lt;p&gt;入っていないので、インストール&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo yum install -y httpd
&lt;/pre&gt;

&lt;p&gt;Webサーバを立ち上げる&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo service httpd start
&lt;/pre&gt;

&lt;p&gt;OSを再起動した後も立ち上がるように設定する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo chkconfig httpd on
&lt;/pre&gt;

&lt;p&gt;Webサーバーが立ち上がっているかブラウザで確認する&lt;/p&gt;

&lt;p&gt;デフォルトのIPアドレス&lt;a href=&#34;http://192.168.33.10/にアクセスしてApacheが見えたらOK&#34;&gt;http://192.168.33.10/にアクセスしてApacheが見えたらOK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FTPファイル転送ツールを使いたい。&lt;/p&gt;

&lt;p&gt;vagrantユーザーでアクセスできるようにしたい&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo chown -R vagrant:vagrant /var/www/html/
&lt;/pre&gt;

&lt;p&gt;くわしくはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dotinstall.com/lessons/basic_local_development_v2/24805&#34;&gt;http://dotinstall.com/lessons/basic_local_development_v2/24805&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hostsファイルを編集することで、IPアドレスを文字で表せるようにする&lt;/p&gt;

&lt;p&gt;Hosterというツールを使った&lt;/p&gt;

&lt;p&gt;セット名:hoge&lt;/p&gt;

&lt;p&gt;ホスト名：dev.hoge.com&lt;/p&gt;

&lt;p&gt;IPアドレス:192.168.33.10&lt;/p&gt;

&lt;p&gt;有効化する&lt;/p&gt;

&lt;p&gt;PhpStormからサーバーに接続&lt;/p&gt;

&lt;p&gt;Tools &amp;gt; Deployment &amp;gt; ConfigrationからSFTPの設定をして、&lt;/p&gt;

&lt;p&gt;Tools &amp;gt; Deployment &amp;gt; Browse Remote Hostとすると、&lt;/p&gt;

&lt;p&gt;右側にサーバー側のツリーが表示される。&lt;/p&gt;

&lt;p&gt;PHPをインストール&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ yum info php
&lt;/pre&gt;

&lt;p&gt;versionが最新ではないので、epelとremiをインストールする&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo rpm -Uvh epel-release-6-8.noarch.rpm
sudo rpm -Uvh remi-release-6.rpm
&lt;/pre&gt;

&lt;p&gt;epelの設定&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;sudo vi /etc/yum.repos.d/epel.repo
enable=1→0に変更
&lt;/pre&gt;

&lt;p&gt;これでphpの最新バージョンがインストールできるとこを確認&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;yum info --enablerepo=remi php 
&lt;/pre&gt;

&lt;h2 id=&#34;phpインストール:7f8a3f2caf98ab1830b66868f23d6315&#34;&gt;PHPインストール&lt;/h2&gt;

&lt;p&gt;ようやくphpのインストール(phpに関連するものも)&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;sudo yum --enablerepo=remi install -y php php-devel php-mysql php-mbstring php-gd
&lt;/pre&gt;

&lt;p&gt;php.iniの設定&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;sudo vi /etc/php.ini
&lt;/pre&gt;

&lt;p&gt;・error_logを追加&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;error_log = /var/log/php.log 
&lt;/pre&gt;

&lt;p&gt;・mbstringのlanguageをJapanseで有効化&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;;mbstring.language = Japanese
mbstring.language = Japanese
&lt;/pre&gt;

&lt;p&gt;・internalをUTF-8に変更と有効化&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;;mbstring.internal_encoding = EUC-JP
mbstring.internal_encoding = UTF-8
&lt;/pre&gt;

&lt;p&gt;・http_inputはautoで有効化&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;;mbstring.http_input = auto
mbstring.http_input = auto
&lt;/pre&gt;

&lt;p&gt;・detect_orderはautoで有効化&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;;mbstring.detect_order = auto
mbstring.detect_order = auto
&lt;/pre&gt;

&lt;p&gt;・expose_php = OnをOffに&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;expose_php = On
expose_php = Off
&lt;/pre&gt;

&lt;p&gt;・timezoneをAsia/Tokyoにして有効化&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;;date.timezone = 
date.timezone = Asia/Tokyo
&lt;/pre&gt;

&lt;p&gt;以上の設定を有効にするには、httpdを再起動する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;sudo service httpd restart
&lt;/pre&gt;

&lt;h2 id=&#34;mysqlをインストール:7f8a3f2caf98ab1830b66868f23d6315&#34;&gt;MySQLをインストール&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo yum install -y --enablerepo=remi mysql-server
&lt;/pre&gt;

&lt;p&gt;設定&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo vi /etc/my.cnf
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

#下の部分を追加
character_set_server=utf8
default-storage-engine=InnoDB
innodb_file_per_table
[mysql]
default-character-set=utf8
[mysqldump]
default-character-set=utf8
&lt;/pre&gt;

&lt;p&gt;MySQLを起動&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo service mysqld start
&lt;/pre&gt;

&lt;p&gt;mysqld起動時にfailedして、/var/log/mysqld.logに下記が出ていたら&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;140706  7:06:08 [Note] Plugin &#39;FEDERATED&#39; is disabled.
/usr/libexec/mysqld: Table &#39;mysql.plugin&#39; doesn&#39;t exist
140706  7:06:08 [ERROR] Can&#39;t open the mysql.plugin table. Please run mysql_upgrade to create it.
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo mysql_install_db
&lt;/pre&gt;

&lt;p&gt;を実行する&lt;/p&gt;

&lt;p&gt;これで立ち上がるが、いろいろ設定する必要がある（書いてある）&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ /usr/bin/mysql_secure_installation
&lt;/pre&gt;

&lt;p&gt;を実行する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Enter current password for root (enter for none):enter
Set root password? [Y/n] Y
パスワードを適当に設定
そのほかの設定はデフォルトのEnterで。
&lt;/pre&gt;

&lt;p&gt;再起動時もスタートするように設定&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ sudo chkconfig mysqld on
&lt;/pre&gt;

&lt;p&gt;確認&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ mysql -u root -p
&lt;/pre&gt;

&lt;p&gt;さっき設定したパスワード&lt;/p&gt;

&lt;p&gt;Server version: 5.5.36 MySQL Community Server (GPL) by Remi&lt;/p&gt;

&lt;p&gt;と5.5がインストールされていることを確認&lt;/p&gt;

&lt;h2 id=&#34;cakephpからmysqlを使えるように設定する:7f8a3f2caf98ab1830b66868f23d6315&#34;&gt;cakephpからMySQLを使えるように設定する&lt;/h2&gt;

&lt;p&gt;データベースを作成する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ mysql -u root -p
mysql&gt; create database dev_cakephp;
mysql&gt; grant all on dev_cakephp.* to dbuser@localhost identified by &#39;xxxxxxxxxx&#39;;
&lt;/pre&gt;

&lt;p&gt;これらの設定でcakephpを設定する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;% cd app/Config/
% cp database.php.default database.php
&lt;/pre&gt;

&lt;p&gt;以下のlogin,password,databaseを変更する。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;class DATABASE_CONFIG {

    public $default = array(
        &#39;datasource&#39; =&gt; &#39;Database/Mysql&#39;,
        &#39;persistent&#39; =&gt; false,
        &#39;host&#39; =&gt; &#39;localhost&#39;,
        &#39;login&#39; =&gt; &#39;dbuser&#39;,
        &#39;password&#39; =&gt; &#39;xxxxxxxxxx&#39;,
        &#39;database&#39; =&gt; &#39;dev_cakephp&#39;,
        &#39;prefix&#39; =&gt; &#39;&#39;,
        //&#39;encoding&#39; =&gt; &#39;utf8&#39;,
    );
&lt;/pre&gt;

&lt;p&gt;DocumentRootにアップロードしたら、ブラウザを更新し、&lt;/p&gt;

&lt;p&gt;CakePHP is able to connect to the database.&lt;/p&gt;

&lt;p&gt;となったらOK。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#golang PHPerがGo言語を学ぶ理由</title>
      <link>/kwmt27.net/index.php/2013/09/13/why-phper-should-learn-golang/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2013/09/13/why-phper-should-learn-golang/</guid>
      <description>&lt;p&gt;&lt;font color=&#34;red&#34;&gt;この記事は、mikespookさんの2012/8/10の記事&lt;a href=&#34;http://mikespook.com/2012/08/why-you-php-guys-should-learn-golang/&#34; target=&#34;_blank&#34;&gt;Why you PHP guys should learn Golang&lt;/a&gt;の非公式翻訳です。詳細はこの記事をご参照下さい。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
  This post is the Japanese translated post of mikespook&amp;#8217;s post:&lt;a href=&#34;http://mikespook.com/2012/08/why-you-php-guys-should-learn-golang/&#34; target=&#34;_blank&#34;&gt;Why you PHP guys should learn Golang&lt;/a&gt;.&lt;br /&gt; &lt;/font&gt;
&lt;/p&gt;

&lt;p&gt;
  1年前の記事ですが、興味深かったので、翻訳してみました。&lt;br /&gt; 翻訳にミスなどがありましたら、ご連絡頂けると嬉しいです。
&lt;/p&gt;

&lt;h1&gt;
  PHPerがGo言語を学ぶ理由
&lt;/h1&gt;

&lt;p&gt;
  &lt;a href=&#34;http://kwmt27.net/index.php/2013/09/13/why-phper-should-learn-golang/gopher-talks/&#34; rel=&#34;attachment wp-att-825&#34;&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2013/09/gopher-talks.png&#34; alt=&#34;gopher-talks&#34; width=&#34;132&#34; height=&#34;100&#34; class=&#34;alignleft size-full wp-image-825&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&#34;http://golang.org/&#34; target=&#34;_blank&#34;&gt;Go あるいは Go言語&lt;/a&gt;はオープンソースで、コミュニティがあり、早くて、一貫性が有り、スケーラブルで、生産的言語で、Googleによって考案されました。&lt;br /&gt; おおくのアプリケーションがGoで構築されています。Rob Pikeは&lt;a href=&#34;http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html&#34; target=&#34;_blank&#34;&gt;&amp;#8220;我々は、C++プログラマが代替としてGoに目をむけることを期待している&amp;#8221;&lt;/a&gt;と言っているけれども、私は、&lt;strong&gt;PHPerがGo言語を学ぶべきだ&lt;/strong&gt;と考えています。&lt;br /&gt; それがなぜかをお話しましょう。
&lt;/p&gt;

&lt;p&gt;
  
&lt;/p&gt;

&lt;h2 class=&#34;section&#34;&gt;
  学ぶのが簡単
&lt;/h2&gt;

&lt;p&gt;
  PHPは学ぶのが簡単です。Go言語はPHPと同じくらい簡単です。
&lt;/p&gt;

&lt;p&gt;
  PHPの文法は、C言語系列(C/C++/Javaなど)の文法に似通っています。&lt;br /&gt; それらの言語を経験しているなら、PHPに最初に出会っても書くのはそれほど難しくありません。
&lt;/p&gt;

&lt;p&gt;
  Go言語もC系列のプログラミング言語です。えっと少し異なるところもありますが。たとえば、&lt;a href=&#34;http://tour.golang.org/#17&#34; target=&#34;_blank&#34;&gt;&amp;#8220;for&amp;#8221;&lt;/a&gt;キーワードはPHPのものと似ていますが、括弧は必要ありません。また、条件のキーワードである&lt;a href=&#34;http://tour.golang.org/#21&#34; target=&#34;_blank&#34;&gt;&amp;#8220;if&amp;#8221;&lt;/a&gt;も括弧は要りません。詳細は&lt;a href=&#34;http://golang.org/doc/effective_go.html&#34; target=&#34;_blank&#34;&gt;Effective Go&lt;/a&gt;で読むことができます。
&lt;/p&gt;

&lt;p&gt;
  Go言語は25のキーワードと47の演算子、区切り文字、他の特別なトークンだけしかありません。すべてのリテラルを覚える必要はありません。型システムは、非常に優れていて、使うのも簡単です。&lt;br /&gt; No huge OO but a practical struct type with methods on it.&lt;br /&gt; インターフェース設計はGo言語での私の好きな部分の１つです。あなたが&lt;a href=&#34;http://tour.golang.org/&#34; target=&#34;_blank&#34;&gt;A Tour of Go&lt;/a&gt;を終えたら、PHPの経験に基づいて、すぐにGo言語で書くことができるでしょう。
&lt;/p&gt;

&lt;h2 class=&#34;section&#34;&gt;
  使うのが簡単
&lt;/h2&gt;

&lt;p&gt;
  あなたのPHPスクリプトは SAPIコンポーネント：webサーバーモジュール、PHP-FPM、CLIによって評価されます。&lt;br /&gt; PHP開発に必要な全ては、SAPI環境です。環境の配置は、PHPビギナーが理解するには最も難しい部分です。
&lt;/p&gt;

&lt;p&gt;
  すべてのGo言語のコードはコンパイル・リンクされますので、実行環境をデプロイする必要ありません。&lt;br /&gt; PHP環境のデプロイと比べるとGoのデプロイはそれほど複雑ではありません。でもPHP環境のデプロイが本当に複雑だと本当に思っていますか？そんなことはないんですよ。本当に！&lt;br /&gt; &lt;del datetime=&#34;2013-09-13T03:28:08+00:00&#34;&gt;PHP環境のデプロイと比較すると、それほど複雑ではありません。PHP環境のデプロイはほんと複雑と思いませんか？私はそう思いません。（訳者：誤記かな？）&lt;/del&gt;
&lt;/p&gt;

&lt;p&gt;
  ビルド環境をデプロイするのは、３つのステップだけです：
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Go言語のソースコードをダウンロードします
  &lt;/li&gt;
  &lt;li&gt;
    環境変数を設定します。これに関しては素晴らしいブログがあります：&lt;a href=&#34;http://mue.tideland.biz/2012/02/go-environment-setup.html?spref=tw&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;Go environment setup&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &amp;#8220;src&amp;#8221;ディレクトリにある&amp;#8221;all.bash&amp;#8221;を実行します。
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  (訳者：これらをまとめて実行できるスクリプト &lt;a href=&#34;https://github.com/kwmt/goinstall&#34; target=&#34;_blank&#34;&gt;goinstall&lt;/a&gt;というツールを書きましたのでよかったら使用してみてください（PR）)
&lt;/p&gt;

&lt;p&gt;
  あるいは、１ステップだけなら、&lt;a href=&#34;http://code.google.com/p/go/downloads/list&#34; target=&#34;_blank&#34;&gt;バイナリパッケージ&lt;/a&gt;を使ってセットアップします。
&lt;/p&gt;

&lt;p&gt;
  それから、&amp;#8221;go&amp;#8221;というツールセットが使用できるようになります。goツールは、PHPのCLIツールを使うのと同じくらい簡単です。&lt;a href=&#34;http://areyoufuckingcoding.me/2012/02/14/the-go-tool/&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;&amp;#8220;The Go Tool&amp;#8221;&lt;/a&gt;に使い方が説明されています。
&lt;/p&gt;

&lt;h2 class=&#34;section&#34;&gt;
  PHPの神話
&lt;/h2&gt;

&lt;p&gt;
  プログラミング言語を学んだり使ったりするのが簡単なら、私達はそれを学んだり使ったりするでしょうか？&lt;br /&gt; プログラミング言語の多くは、学ぶのが簡単で使うのも簡単です。私達はそれらの全てを学んだり使ったりするでしょうか？正直言うとそれは、&lt;strong&gt;NO！&lt;/strong&gt;です。
&lt;/p&gt;

&lt;p&gt;
  しかし、PHPerがなぜGo言語を学ぶべきか？それはクールだから！いや、冗談だけど、本当です。とにかく、まずPHP自身について話しましょう。
&lt;/p&gt;

&lt;p&gt;
  PHPは、&amp;#8221;もともと動的なWebページを生成するWeb開発用に設計された汎用のサーバサイドスクリプト言語(&lt;a href=&#34;http://en.wikipedia.org/wiki/PHP&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;)&amp;#8221;です。&lt;br /&gt; PHPの最も重要な特徴は、HTMLに埋め込んでいるということです。PHPコードは“&lt;?php … ?&gt;”タグで下記、HTMLは外側に書きます。また強力な拡張システムも持っています。その拡張はZend APIを使ったCで書かれます。データ処理は、実際は、それらの拡張が処理しています。
  
  &lt;br /&gt; 私見では、PHPはベストなテンプレートプログラミング言語に違いありません。
&lt;/p&gt;

&lt;p&gt;
  しかし、PHPを数年経験し、いくつかの複雑なWebアプリケーションに出会ったなら、PHPへの物足りなさを感じるに違いありません。それは、並行機能（スレッド、マルチプロセス）が備わっていないからです。低速なデータの処理するコードは、ページ全体の処理がブロックされるでしょう。PHPの前に強力Webサーバがいつも必要になってきます。バックエンドのプログラムはデータ（メッセージ・キューやキャッシュ、プロキシ・・・）を処理するために書かれます。このシステムはPHPにだけに限りませんし、多くのサービスやシステムコンポーネントもそうです。今日、PHPは少しのロジカルな処理があるテンプレート言語になっています。
&lt;/p&gt;

&lt;p&gt;
  PHPerは、いつも&lt;a href=&#34;https://www.google.com.hk/search?q=php+multithread&amp;aq=f&amp;sugexp=chrome,mod=16&amp;sourceid=chrome&amp;ie=UTF-8&#34; target=&#34;_blank&#34;&gt;&amp;#8220;PHP マルチスレッド&amp;#8221;&lt;/a&gt; や &lt;a href=&#34;https://github.com/laruence/yar&#34; target=&#34;_blank&#34;&gt;concurrent RPC framework for PHP&lt;/a&gt;のようなソリューションを探しています。私はどれがいいか答えることが出来ませんでした。しかし、&lt;br /&gt; バックエンドジョブに対しては、他のプログラミング言語を選ばないといけないと思います。私の場合、C、Java、Pythonで試しました。Cはメモリの確保と解放との戦いで、Javaはjar地獄につまづき、PythonはPythonicになれないけど、型が失われます。パフォーマンスを得るなら、メモリ管理と向き合わなければなりません。GCを使うなら、分散やVMチューニングが必要です。便利さを重視するなら、慎重にならないと自滅する可能性があります。それぞれ長所がありますが、問題もあります。
&lt;/p&gt;

&lt;p&gt;
  さて、Go言語に戻りましょう。
&lt;/p&gt;

&lt;p&gt;
  Go言語にはGCがあります。メモリ管理を気にする必要がありません（メモリ管理にあまり気を配らなくてよくなります）。ソースコードはネイティブマシン語にコンパイルされます。&lt;br /&gt; それで、&amp;#8221;cp&amp;#8221;や&amp;#8221;mv&amp;#8221;コマンドはGo言語で書かれたアプリケーションを開発するために必要です。&lt;br /&gt; 言ったように、Go言語は静的型付けなコンパイル言語です。変数の型に惑わされることはありません。もちろん、もっとも重要なことは、Go言語へ移行するPHPerが、&lt;a href=&#34;http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html&#34; target=&#34;_blank&#34;&gt;多くの表現を捨てなければならないということはなく、パフォーマンスを得て、並列に実行することができるようになりということです&lt;/a&gt;。&lt;a href=&#34;http://www.drdobbs.com/open-source/why-not-go/240005062&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Why Not Go?&amp;#8221;&lt;/a&gt;はこれについて深く語られています。
&lt;/p&gt;

&lt;p&gt;
  私自身の経験の部分をお話します。&lt;a href=&#34;http://gearman.org/&#34; target=&#34;_blank&#34;&gt;Gearman&lt;/a&gt; workerというのはバックエンドデータの処理をしてくれます。&lt;br /&gt; PHPは&lt;a href=&#34;http://www.php.net/manual/en/book.gearman.php&#34; target=&#34;_blank&#34;&gt;Gearman API&lt;/a&gt;を使ってGeaman Job Serverを通してそのworkerとつながっています。&lt;br /&gt; オリジナルのworkerは&lt;a href=&#34;http://pypi.python.org/pypi/gearman/&#34; target=&#34;_blank&#34;&gt;python&lt;/a&gt;で書かれていました。&lt;br /&gt; そのバージョンでは問題がたくさんありました（それらの問題は自分たち自身の問題でしたが、pythonの問題もありました。）&lt;br /&gt; しかし、それは動きます。&lt;br /&gt; それから、私達は、workerをGo言語で書きなおしました。驚きでした。Go言語とGo言語でPHPスクリプトを評価するためのZend API（cgoは別に驚いたこと）を使用している&lt;a href=&#34;https://bitbucket.org/mikespook/goemphp&#34; target=&#34;_blank&#34;&gt;Go言語パッケージ&lt;/a&gt;用に&lt;a href=&#34;https://bitbucket.org/mikespook/gearman-go&#34; target=&#34;_blank&#34;&gt;Geamarn API&lt;/a&gt;を書きました。&lt;br /&gt; それから、それらを一緒に合わせました。つまり、PHPスクリプトが実行可能なGearman workerとなります。&lt;br /&gt; 我々に環境で約3ヶ月動いており、いい感じです。&lt;br /&gt; 私はまた、PHPスクリプト内でRPCコールを結合するための&lt;a href=&#34;https://bitbucket.org/mikespook/combinerpc&#34; target=&#34;_blank&#34;&gt;RPC-コンビネータ&lt;/a&gt;を書きました。&lt;br /&gt; それは次のプロダクトで使う予定です。
&lt;/p&gt;

&lt;p&gt;
  全てのことが順調です。ありがとう、Go言語！
&lt;/p&gt;

&lt;p&gt;
  いずれの場合でも、ほとんどのPHPerは、バックエンド開発のためには他の言語を学ぶ必要が常にあります。&lt;br /&gt; もしあなたが他の言語を探していたり、すでに経験しているなら、Go言語に挑戦してはみてはいかがですか？&lt;br /&gt; あなたの人生をハッピーに楽にしてくるでしょう。多くの時間を家族や友達と過ごすことができ、好きな物を食べ、好き場所を訪れることが出来るようになります。
&lt;/p&gt;

&lt;p&gt;
  これこそが、PHPerがGo言語を学ぶべき理由です。私はそう思います。
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;これは英語を書く練習です。もし文法やスペルミスを見つけたら、連絡ください。&lt;/strong&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>