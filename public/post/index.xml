<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Androg</title>
    <link>kwmt27.net/post/</link>
    <description>Recent content in Posts on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 31 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="kwmt27.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2015年の振り返り</title>
      <link>/kwmt27.net/index.php/2015/12/31/looking-back-2015/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2015/12/31/looking-back-2015/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2014/12/31/looking-back-2014/&#34;&gt;昨年&lt;/a&gt;に引き続き、今年で3回目の振り返りを書いておこう。&lt;/p&gt;

&lt;h1 id=&#34;ふりかえり:358e3db2c96119b492c97adba527f811&#34;&gt;ふりかえり&lt;/h1&gt;

&lt;h2 id=&#34;仕事:358e3db2c96119b492c97adba527f811&#34;&gt;仕事&lt;/h2&gt;

&lt;h3 id=&#34;開発:358e3db2c96119b492c97adba527f811&#34;&gt;開発&lt;/h3&gt;

&lt;p&gt;2014年半ばぐらいからはじまった新規iOSアプリ案件(Tアプリ)。この案件からswiftで開発し始めました。たしかswift1.0だったかな。&lt;/p&gt;

&lt;p&gt;このときはswiftが初めてだったし、iOSもこの案件の前にobjcでpush通知周りをちょろっと書いたぐらいだったので、昨年の今の時期も仕事していましたね。コミット履歴を見ると、12/31にプルリクエストしていたので。まぁIT業界はそんなもんかなｗ&lt;/p&gt;

&lt;p&gt;で、2015年3月ぐらいまでの3.5ヶ月は、このTアプリをやっていました。API・デザイン・アプリがほぼ同時に開発をすすめるような体制でした。このプロジェクトは最初、確認がうまくできてなくて、結構手戻りが発生してしまいましたね。再度認識合わせして取り戻した感じでした。無事開発は終了したものの、クライアント様の都合で世の中に出ていないので、紹介できない。。。&lt;/p&gt;

&lt;p&gt;3月半ばから4月半ばぐらいの1ヶ月間は、別の新規iOSアプリ案件(Gアプリ)を作成させて頂きました。これは1ヶ月プロジェクトではなかったのですが、次の案件が予定されていたため、それまでなら可能ということでお引き受けしました。このプロジェクトは、デザイン・APIはすでに終わってからのアプリ開発という体制でした。これはこれでAPIの開発が終わってるので、I/F決まってるしアプリ開発しやすいのしやすかったのですが、APIが使いにくいなどの要望を伝えにくかったなぁという印象でした。&lt;/p&gt;

&lt;p&gt;4月半ばぐらいからは6月半ばぐらいまでの2ヶ月間は、Android案件(新規ではなく引き継ぎ)(Mアプリ)をやらせていただきました。&lt;/p&gt;

&lt;p&gt;アプリはアプリだったのですが、携帯端末ではなく、セットトップボックスに入ったAndroidアプリの開発でした。携帯端末とは異なる入力IFで知識の幅が増えましたね。あと2枚の画面(Activity)を順番を変えたのですが、自分で作るときはそのあたりもできるだけ考慮したいなと思いました。&lt;/p&gt;

&lt;p&gt;6月後半から12月後半まではAndroidアプリ(新規)(Aアプリ)を担当させていただきました。デザインは先行して進めているものの、APIとアプリは同時スタートという体制でした。はじめて社内で同じ案件でAPIとアプリを作成するということで、社内でIF部分は調整しやすかったかなぁと思いました。9月頃から同じサービスのiOSアプリ開発もはじまりました。他の方が担当してくださったのですが、プルリクエストレビューなどはしていましたね。&lt;/p&gt;

&lt;p&gt;プルリクエストレビューで思い出しましたが、6月ぐらいからまた別のiOSアプリ案件(Pアプリ)もスタートして、こちらはほんの少し書いただけで、プルリクエストレビューが主でした。なので6月から12月までは3案件同時並行した時期が続きました。&lt;/p&gt;

&lt;p&gt;12月後半は、iOSアプリ案件なのですが、今回はアプリ開発ではなくAPI開発を担当させて頂いてます。なぜかGo言語でw個人的にはテンション上がってますが、この2年間APIを使う側で作る側は慣れてないのと、Go言語触ってたのは1年前にJSONを返すMockをちょろっと作ったぐらいで忘れてる部分が多く時間がかかってしまいますが、使う側の経験を活かして、使いやすいAPIになるようにがんばっていきたいです。&lt;/p&gt;

&lt;h3 id=&#34;講師業:358e3db2c96119b492c97adba527f811&#34;&gt;講師業&lt;/h3&gt;

&lt;p&gt;また1月末から6月末までの週1回開催された&lt;a href=&#34;http://osaka.techinstitute.jp&#34;&gt;Tech InstituteというAndroidアプリ開発者養成講座&lt;/a&gt;の講師も担当させて頂きました。講師が数名いてメイン1人とサブ2,3人という構成で、メイン2回、サブを3回担当しました。教えるってほんと難しかった。。けど、人になにかを教えるって楽しかったです。&lt;/p&gt;

&lt;h2 id=&#34;プライベート:358e3db2c96119b492c97adba527f811&#34;&gt;プライベート&lt;/h2&gt;

&lt;p&gt;といってもあまり仕事に関係のないのは抜いてるが、勉強会に参加したりしたのを次ごとにリストにまとめてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1月

&lt;ul&gt;
&lt;li&gt;LPICレベル1技術解説無料セミナー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2月

&lt;ul&gt;
&lt;li&gt;Go on Android勉強会(Goの環境ではまってた)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3月

&lt;ul&gt;
&lt;li&gt;第5回 淀川国際ハーフマラソン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5月

&lt;ul&gt;
&lt;li&gt;東京出張&lt;/li&gt;
&lt;li&gt;UIKit Frameworkを読む会を開催&lt;/li&gt;
&lt;li&gt;英会話教室に行き始める&lt;/li&gt;
&lt;li&gt;PHPカンファレンス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;6月

&lt;ul&gt;
&lt;li&gt;GitHub創業者が来日 GitHub User Meetup Osaka&lt;/li&gt;
&lt;li&gt;2泊3日開発合宿(滋賀)&lt;/li&gt;
&lt;li&gt;Android祭り(東京)&lt;/li&gt;
&lt;li&gt;GoogleIO報告会(東京)&lt;/li&gt;
&lt;li&gt;GoCon(東京)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;7月

&lt;ul&gt;
&lt;li&gt;7月から英会話を毎日コースに変更&lt;/li&gt;
&lt;li&gt;AndroidWearハッカソン&lt;/li&gt;
&lt;li&gt;オフィスでたこパ&lt;/li&gt;
&lt;li&gt;後半に英会話教室を辞めて、オンライン英会話に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8月

&lt;ul&gt;
&lt;li&gt;プレゼン勉強会&lt;/li&gt;
&lt;li&gt;AndroidTV勉強会(発表した)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;9月

&lt;ul&gt;
&lt;li&gt;第2回【関西ITベンチャー】開発ツール チラ見せ♡ナイト@大阪※増席しました！（立ち見あり）&lt;/li&gt;
&lt;li&gt;第63回 Cocoa勉強会関西&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;10月

&lt;ul&gt;
&lt;li&gt;第１回 関西golang勉強会&lt;/li&gt;
&lt;li&gt;TOEIC受験&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;11月

&lt;ul&gt;
&lt;li&gt;ちょっと触ってみるGo言語ハンズオン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;12月

&lt;ul&gt;
&lt;li&gt;合宿(滋賀)&lt;/li&gt;
&lt;li&gt;TOEIC受験&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年は英語に力いれてみました。話すのはまだまだだし、英語の歌は何言ってるかわからんけど、普通の会話なら聞き取れるようになったかなぁ。TOEICも50点上がってた。来年も引き続きつづけよう！&lt;/p&gt;

&lt;h1 id=&#34;今年の目標はどうだった:358e3db2c96119b492c97adba527f811&#34;&gt;今年の目標はどうだった？&lt;/h1&gt;

&lt;p&gt;ハーフは１回でたのでよかったかな。&lt;/p&gt;

&lt;p&gt;貯金できてないな。。&lt;/p&gt;

&lt;p&gt;仕事は少しは丁寧に進めれるようになったかなぁ&lt;/p&gt;

&lt;h1 id=&#34;来年の目標:358e3db2c96119b492c97adba527f811&#34;&gt;来年の目標&lt;/h1&gt;

&lt;p&gt;投資をやる！引き落とし型の投資信託をはじめるよ！（必ずやる）&lt;/p&gt;

&lt;p&gt;マラソンもハーフぐらいは出ておきたい&lt;/p&gt;

&lt;p&gt;ホノルルマラソンに出たい&lt;/p&gt;

&lt;p&gt;英会話続ける&lt;/p&gt;

&lt;p&gt;ファイナンシャルプランナー受験するか&lt;/p&gt;

&lt;h1 id=&#34;まとめ:358e3db2c96119b492c97adba527f811&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;今年もお世話になったみなさまありがとうございました。来年も引き続きよろしくお願いします。（ってこのまとめ、去年のまとめといっしょやんｗ）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GoCon 2015 summer 参加メモ。</title>
      <link>/kwmt27.net/index.php/2015/06/23/gocon-2015-summer/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2015/06/23/gocon-2015-summer/</guid>
      <description>

&lt;h2 id=&#34;gocon-2015-summer-イベントページ:b5a452ce0c6b49cfdc3f411a6c71c83d&#34;&gt;GoCon 2015 summer イベントページ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gocon.connpass.com/event/14063/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://gocon.connpass.com/event/14063/&#34;&gt;http://gocon.connpass.com/event/14063/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gocon資料まとめ:b5a452ce0c6b49cfdc3f411a6c71c83d&#34;&gt;GoCon資料まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/a5d1a309733e765533ce&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/a5d1a309733e765533ce&#34;&gt;http://qiita.com/t-sato/items/a5d1a309733e765533ce&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとでまとめようと思ったけどすでにまとめてくれてた人がいたので、のっかる。&lt;/p&gt;

&lt;p&gt;が、キーノートの@francesc さんの資料がまだ公開されてない模様。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.moongift.jp/2014/08/sourcegraph-github%E4%B8%8A%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%97%E3%82%92%E5%8F%AF%E8%83%BD/&#34; target=&#34;_blank&#34;&gt;Sourcegraph &amp;#8211; GitHub上でオブジェクト/メソッドジャンプを可能に&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gomobileはやっぱ気になりますね:b5a452ce0c6b49cfdc3f411a6c71c83d&#34;&gt;gomobileはやっぱ気になりますね。&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/mobile/cmd/gomobile&#34;&gt;https://godoc.org/golang.org/x/mobile/cmd/gomobile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gRPCも気になる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google I/O報告会 2015 参加メモ #devfest</title>
      <link>/kwmt27.net/index.php/2015/06/23/google-io-report-2015-memo-devfest/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2015/06/23/google-io-report-2015-memo-devfest/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/devfestjapan/&#34; target=&#34;_blank&#34;&gt;Google I/O報告会 2015(会場:サイバーエージェント(渋谷マークシティ13F)&lt;/a&gt;に行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/devfestjapan/2015summer/agenda&#34; target=&#34;_blank&#34;&gt;アジェンダが公開されてた&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;全体の流れメモ:7594fce3acbf9ff470786da04bd10d27&#34;&gt;全体の流れメモ&lt;/h2&gt;

&lt;h3 id=&#34;全体:7594fce3acbf9ff470786da04bd10d27&#34;&gt;全体&lt;/h3&gt;

&lt;p&gt;DevFestの歴史&lt;/p&gt;

&lt;p&gt;2各会場の紹介&lt;/p&gt;

&lt;p&gt;Keynote Androidはぬいて説明&lt;/p&gt;

&lt;p&gt;会場MosconeWest&lt;/p&gt;

&lt;p&gt;派手さな感じで楽しかった&lt;/p&gt;

&lt;p&gt;すっごい寒かった&lt;/p&gt;

&lt;p&gt;8回目SF&lt;/p&gt;

&lt;p&gt;セッション数がヘリ、コミュニケーション重要視&lt;/p&gt;

&lt;p&gt;Androidの話題が多い、デザイン多い&lt;/p&gt;

&lt;p&gt;クラウド少ない→別のイベントになるんじゃないかと予想&lt;/p&gt;

&lt;p&gt;Lobby公園のような感じ&lt;/p&gt;

&lt;p&gt;コミュニケーションできるような。充電ステーションでみんあが集まて会話が生まれる感じ&lt;/p&gt;

&lt;p&gt;exiii $300&lt;/p&gt;

&lt;p&gt;おみやげはメインでなく、コミュニケーションメイン&lt;/p&gt;

&lt;p&gt;キーノートはいま使える現実的な物。&lt;/p&gt;

&lt;p&gt;DESIGN to DE$IGN デザインはビジネス&lt;/p&gt;

&lt;h3 id=&#34;android:7594fce3acbf9ff470786da04bd10d27&#34;&gt;Android&lt;/h3&gt;

&lt;p&gt;M developer previewの略？ｗ&lt;/p&gt;

&lt;p&gt;指紋認証 Fingerprint&lt;/p&gt;

&lt;p&gt;サンプルは github google&lt;/p&gt;

&lt;p&gt;全データはデフォルトでバックアップされる&lt;/p&gt;

&lt;p&gt;細かくも設定できる。&lt;/p&gt;

&lt;p&gt;Doze&lt;/p&gt;

&lt;p&gt;しばらくさわってない端末はdozeモード へ&lt;/p&gt;

&lt;p&gt;App stanby&lt;/p&gt;

&lt;p&gt;しばらくさわっていないアプリはidleモード&lt;/p&gt;

&lt;p&gt;※しばらくはどれくらい？はわからない。&lt;/p&gt;

&lt;p&gt;Icons in Notifications:Icon.createWidthBitmapで生成できる&lt;/p&gt;

&lt;p&gt;Textの範囲指定&lt;/p&gt;

&lt;p&gt;App Links&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Webページとアプリとの関係性を明確にする。&lt;/li&gt;
&lt;li&gt;自分のアプリが優先的に。&lt;/li&gt;
&lt;li&gt;Sylus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フラッシュだけを使うことがカメラを使わずにできるようになった。&lt;/p&gt;

&lt;p&gt;AlphaOptimaization&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いままでよりもいい感じで透明Viewを使える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MIDIのAPI追加&lt;/p&gt;

&lt;p&gt;ストレージ&lt;/p&gt;

&lt;p&gt;ART:runtime stats&lt;/p&gt;

&lt;p&gt;Ambient Mode&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;できるだCPU稼働率をゼロにするモード&lt;/li&gt;
&lt;li&gt;manifest&lt;/li&gt;
&lt;li&gt;WakerLockとWearable supportlibraryの２つが前提でsetAmibentEnabeledの一行だけ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;App Invite&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;紹介するときsetDeppLinkでインテント作って&lt;/li&gt;
&lt;li&gt;紹介されたとき、リファラーがついてれればOK&lt;/li&gt;
&lt;li&gt;マニフェストにintentfilterを追加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;App Indexing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google検索で、アプリがあればアプリを紹介してくれる。&lt;/li&gt;
&lt;li&gt;マニフェストに関係があるドメインを禁輸しておく。&lt;/li&gt;
&lt;li&gt;すべての検索でひっかかてもうっとおしので、robot.txtに相当する機能がある。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android Wear&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maps API Watchで使える機能

&lt;ul&gt;
&lt;li&gt;モバイルと一緒onMapReadyとかFragmentManagerからmapを取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Materialデザイン&lt;/p&gt;

&lt;p&gt;EmptyState&lt;/p&gt;

&lt;p&gt;MaterialShowcase&lt;/p&gt;

&lt;p&gt;各APIのFrameworkがCocoaPodsに対応&lt;/p&gt;

&lt;p&gt;pod try&lt;/p&gt;

&lt;h3 id=&#34;maps:7594fce3acbf9ff470786da04bd10d27&#34;&gt;Maps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;#8217;t ping too much&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t ping on the minute&lt;/li&gt;
&lt;li&gt;ランダムな秒数をおいてサーバーに問い合わせなさい&lt;/li&gt;
&lt;li&gt;定期的な問い合わせだと、複数人からのアクセスで同時にサーバーアクセスが行くので重い&lt;/li&gt;
&lt;li&gt;ランダムで他の人と合わないように問い合わせをするといいよ。&lt;/li&gt;
&lt;li&gt;apikeyをアプリに入れないように。&lt;/li&gt;
&lt;li&gt;サーバーを通してapiキーを取得してね。&lt;/li&gt;
&lt;li&gt;iOSのGoogle Map SDK for iOS version1.10&lt;/li&gt;
&lt;li&gt;Objc/Swift対応&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;materialデザイン:7594fce3acbf9ff470786da04bd10d27&#34;&gt;Materialデザイン&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;全てに適用　VRもTVもAutoも。&lt;/li&gt;
&lt;li&gt;でざいん 統一感、使いやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ブランディング:7594fce3acbf9ff470786da04bd10d27&#34;&gt;ブランディング&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;自社のブランドにするには？Googleっぽくなく。→ペルソナを明らかに。必要なところに。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Too hot→無理にハンバーガメニューを使わなくていい&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ToolCold→ツールバーを大きめにうまく隠して&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;TooRight→モバイル、Webも前部に対応&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;東京会場でのセッション２つ:7594fce3acbf9ff470786da04bd10d27&#34;&gt;東京会場でのセッション２つ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Polymerのライブコーディング&lt;/li&gt;
&lt;li&gt;Google鈴木さんからのマテリアルデザインに関する補足&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Polymerの話は別記事にする予定なので、以下は、マテリアルデザインについてのメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FABは必ず必要ではない&lt;/li&gt;
&lt;li&gt;カードViewを必ずしも使う必要がない。セカンダリアクションが期待されてしまうため、アクションが残念。&lt;/li&gt;
&lt;li&gt;FABは右下に置かなくていい&lt;/li&gt;
&lt;li&gt;アニメーションについて

&lt;ul&gt;
&lt;li&gt;早い段階でアニメーション設計を考えていたほうがいい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;portlaitとlandscape&lt;/li&gt;
&lt;li&gt;画面内で完結するようにするのもいい&lt;/li&gt;
&lt;li&gt;Viewの階層は一番低いレイヤーから考えるとよい。FABが一番上。&lt;/li&gt;
&lt;li&gt;色紙を使うといい　ペーパープロトタイピング&lt;/li&gt;
&lt;li&gt;material design award&lt;/li&gt;
&lt;li&gt;ガイドラインは絶対じゃない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;マテリアルデザインってグーグルっぽくなるけど、どうしたらいいん？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発者が楽になったり、ユーザーが期待する動きに期待&lt;/li&gt;
&lt;li&gt;Generalの選択肢とし、いいところどりでいいと思うby鈴木さん&lt;/li&gt;
&lt;li&gt;色を変えること　とガイドラインを解釈して自分たちでガイドラインを作るといいんじゃないby安藤幸央さん&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;material-design-libraryの使い方:7594fce3acbf9ff470786da04bd10d27&#34;&gt;material design libraryの使い方&lt;/h2&gt;

&lt;p&gt;Google 公式のAndroid Blogよりも下のほうがわかりやすいらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/ribot-labs/exploring-the-new-android-design-support-library-b7cda56d2c32&#34;&gt;Exploring the new Android Design Support Library — ribot labs — Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみにGoogleもMediumを使い始めているらしい&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/google-developers&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://medium.com/google-developers&#34;&gt;https://medium.com/google-developers&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;いちばん印象的だったこと:7594fce3acbf9ff470786da04bd10d27&#34;&gt;いちばん印象的だったこと&lt;/h2&gt;

&lt;p&gt;やはり、この質問がいちばん記憶にあるし、大事なことだとおもう。&lt;/p&gt;

&lt;p&gt;Q「マテリアルデザインを使うとGoogleっぽくなるのでは？」&lt;/p&gt;

&lt;p&gt;A.ガイドラインはガイドラインであって必ずそうしなければならないということはない。&lt;/p&gt;

&lt;p&gt;Googleは&lt;a href=&#34;http://android-developers.blogspot.jp/2015/05/announcing-material-design-showcase-and.html&#34; target=&#34;_blank&#34;&gt;Announcing the Material Design Showcase and Awards | Android Developers Blog&lt;/a&gt;を実施したが、必ずガイドラインに沿わなければならないということはないということを示したかったため実施したとのこと。&lt;/p&gt;

&lt;p&gt;特に&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro&#34; target=&#34;_blank&#34;&gt;Pocket Androidアプリ&lt;/a&gt;, &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.tumblr&#34; title=&#34;Tumbler Androidアプリ&#34; target=&#34;_blank&#34;&gt;Tumbler Androidアプリ&lt;/a&gt;のアプリを見ればわかるとのこと。&lt;/p&gt;

&lt;p&gt;Tumbler使用者からすると、FAB(Floating Action Button)が出てくるまでマテリアルデザインだと気づかなかったという。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/icons/&#34;&gt;Material icons &amp;#8211; Google Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fastcodesign.com/3046512/how-google-finally-got-design&#34;&gt;How Google Finally Got Design | Co.Design | business + design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.materialup.com/&#34;&gt;Slack Concept for Android – Mobile app by Nik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;twitterの-devfest:7594fce3acbf9ff470786da04bd10d27&#34;&gt;Twitterの#devfest&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashtag/devfest?src=hash&amp;vertical=default&amp;f=tweets&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/devfest?src=hash&amp;amp;vertical=default&amp;amp;f=tweets&#34;&gt;https://twitter.com/hashtag/devfest?src=hash&amp;amp;vertical=default&amp;amp;f=tweets&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はじめてのPolymer1.0(Webコンポーネントの作り方)</title>
      <link>/kwmt27.net/index.php/2015/06/23/how-to-make-web-component/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2015/06/23/how-to-make-web-component/</guid>
      <description>

&lt;h2 id=&#34;はじめに:f69cf76769f484d8befd55902ec73392&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/devfestjapan/&#34; target=&#34;_blank&#34;&gt;Google I/O報告会 2015 東京会場&lt;/a&gt;のブレイクアウトセッションの中でWebコンポーネントの作り方をライブコーディングで紹介して頂きまして、一緒に実際にやって、はじめての自分にとってはすっごくわかりやすくて面白かったので残しておこうとメモ。（公開してもいいことは確認済みです）&lt;/p&gt;

&lt;p&gt;当日は、下記の前提がインストールされてなかったので動かすところはできませんでしたが、いまこの記事を書きながら実際に動かしてみています。&lt;/p&gt;

&lt;h2 id=&#34;前提:f69cf76769f484d8befd55902ec73392&#34;&gt;前提&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/oreo3@github/items/eb790fc091aa28af8d33&#34; target=&#34;_blank&#34;&gt;npmをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/oreo3@github/items/eb790fc091aa28af8d33&#34; target=&#34;_blank&#34;&gt;Bowerをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/polymer/devfest&lt;/code&gt;ディレクトリがあるとします。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;前提の補足:f69cf76769f484d8befd55902ec73392&#34;&gt;前提の補足&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ nodebrew install latest&lt;/code&gt;でソースからインストールしたが、&lt;code&gt;node -v&lt;/code&gt;などと打つと&lt;code&gt;command not found: node&lt;/code&gt;と言われた時の対処法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→バージョンを指定するだけ。&lt;/p&gt;

&lt;h3 id=&#34;指定するには:f69cf76769f484d8befd55902ec73392&#34;&gt;指定するには？&lt;/h3&gt;

&lt;p&gt;1.インストールされてるバージョンを確認&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ nodebrew ls
v0.12.5
&lt;/pre&gt;

&lt;p&gt;2.v0.12.5を指定する&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ nodebrew use v0.12.5
&lt;/pre&gt;

&lt;p&gt;3.確認&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;% node -v
v0.12.5
&lt;/pre&gt;

&lt;h2 id=&#34;webコンポーネントの作り方-ここからライブコーディングでした:f69cf76769f484d8befd55902ec73392&#34;&gt;Webコンポーネントの作り方(ここからライブコーディングでした)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$HOME/polymer/devfest&lt;/code&gt; に移動して、bower init&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;go&#34;&gt;$ bower init
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/oreo3@github/items/eb790fc091aa28af8d33#%E5%88%9D%E6%9C%9F%E5%8C%96%E6%99%82%E3%81%AE%E8%B3%AA%E5%95%8F&#34; target=&#34;_blank&#34;&gt;いろいろ質問されて&lt;/a&gt;、bower.jsonが出来上がります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;polymerをインストール&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;go&#34;&gt;$ bower install polymer
bower polymer#*             not-cached git://github.com/Polymer/polymer.git#*
bower polymer#*                resolve git://github.com/Polymer/polymer.git#*
...

webcomponentsjs#0.7.5 bower_components/webcomponentsjs
&lt;/pre&gt;

&lt;p&gt;bower_componentsディレクトリが作成されている。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ ls
bower.json        bower_components/
&lt;/pre&gt;

&lt;p&gt;3.index.htmlを作成する。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html lang=&#34;ja&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;script src=&#34;bower_components/webcomponentsjs/webcomponents.js&#34;&amp;gt;&amp;lt;script&amp;gt;
    &amp;lt;!-- load component --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- これから作る部品 --&amp;gt;
  &amp;lt;devfest-component&amp;gt;&amp;lt;/devfest-component&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;4.devfest-componentを作成する&lt;/p&gt;

&lt;p&gt;4.1. コンポーネントを入れるディレクトリを作成&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ mkdir components
&lt;/pre&gt;

&lt;p&gt;4.2. devfestComponent.htmlを作成&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ vi devfestComponent.html
&amp;lt;link rel=&#34;import&#34; href=&#34;../bower_components/polymer/polymer.html&#34;&amp;gt;

  &amp;lt;dom-module id=&#34;devfest-component&#34;&amp;gt;
    // テンプレート
    &amp;lt;template&amp;gt;
      &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Hey!&amp;lt;/p&amp;gt;
    &amp;lt;/template&amp;gt;
    // スタイル
    &amp;lt;style&amp;gt;
      h1 {
        color:red;
      }
    &amp;lt;/style&amp;gt;
    // 部品に対して動くスクリプト
    &amp;lt;script&amp;gt;
      Polymer ({
        // どのコンポーネントかのひもづけ
        is :&#34;devfest-component&#34;,
        properties : {
            title : {
                type:String,
                value: &#34;Yes, Polymer!&#34;
            }
        }
      });
    &amp;lt;/script&amp;gt;
  &amp;lt;/dom-module&amp;gt;
&lt;/pre&gt;

&lt;p&gt;メモだけでは動かなかったので、ここらへんも参考にした&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.polymer-project.org/1.0/docs/devguide/feature-overview.html&#34; target=&#34;_blank&#34;&gt;Feature overview &amp;#8211; Polymer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.polymer-project.org/0.5/docs/polymer/polymer.html&#34; target=&#34;_blank&#34;&gt;API developer guide &amp;#8211; Polymer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.index.htmlに4で作ったコンポーネントをインポートする。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html lang=&#34;ja&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;script src=&#34;bower_components/webcomponentsjs/webcomponents.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- load component --&amp;gt;
    &amp;lt;link rel=&#34;import&#34; href=&#34;components/devfestComponent.html&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- これから作る部品 --&amp;gt;
  &amp;lt;devfest-component&amp;gt;&amp;lt;/devfest-component&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;6.動かすにはWebサーバーが必要だが、polyserveというのが用意されているので、インストールする。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;$ npm install polyserve -g
$ polyserve
Starting Polyserve on port 8080
Files in this directory are available at localhost:8080/components/devfest/...
&lt;/pre&gt;

&lt;p&gt;7.確認&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2015/06/polymer_finish-600x251.png&#34; alt=&#34;polymer_finish&#34; width=&#34;600&#34; height=&#34;251&#34; class=&#34;aligncenter size-thumbnail wp-image-1502&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2015/06/polymer_finish-600x251.png 600w, http://kwmt27.net/wp-content/uploads/2015/06/polymer_finish-300x125.png 300w, http://kwmt27.net/wp-content/uploads/2015/06/polymer_finish-624x261.png 624w, http://kwmt27.net/wp-content/uploads/2015/06/polymer_finish.png 834w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;

&lt;!-- shadow domの話があったが、あとにする
$ vi index.html
 &lt;!DOCTYPE html&gt;
 &lt;html&gt;
  
&lt;body&gt;
  // これから作る部品
  &lt;devfest-component&gt;&lt;/devfest-component&gt;
&lt;/body&gt;
&lt;/html&gt;
 --&gt;
</description>
    </item>
    
    <item>
      <title>2014年の振り返り</title>
      <link>/kwmt27.net/index.php/2014/12/31/looking-back-2014/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/12/31/looking-back-2014/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2013/12/31/looking-back-2013/&#34; target=&#34;_blank&#34;&gt;昨年も振り返り&lt;/a&gt;を書いていて、振り返りの記事を振り返るとなかなか面白いので、今年も書いてみようかなと。&lt;/p&gt;

&lt;h2 id=&#34;各月に起こった事をだらだらと:d52cc0ce3815b3f17a08403570dbe0a6&#34;&gt;各月に起こった事をだらだらと&lt;/h2&gt;

&lt;p&gt;2013年に9年ちょっと働いた会社を退職して2013年12月から2014年3月までは、契約社員として過ごし、最後の方はPHPやPhotoShop/Illustratorなど知らない技術について勉強させて頂きました。&lt;/p&gt;

&lt;p&gt;実質2月から&lt;a href=&#34;http://www.tech-vein.com/archives/9/pingpong-game/&#34; target=&#34;_blank&#34;&gt;アニメピンポンのソーシャルゲーム開発&lt;/a&gt;に関わらせて頂き、そのまま4月に入社しました。&lt;/p&gt;

&lt;p&gt;5月ぐらいまでは慣れないPHPで超ハードでしたが、PHP案件が終わってからの5,6月あたりは&lt;a href=&#34;http://blog.guildworks.jp/2014/10/15/%E3%80%90%E4%BA%8B%E4%BE%8B%E7%B4%B9%E4%BB%8B%E3%80%91android%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%A4%A7%E5%B9%85%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%97%E3%80%81%E3%83%80/&#34; target=&#34;_blank&#34;&gt;Androidアプリ開発&lt;/a&gt;をしました。一部手伝ってもらったり、レビューしてもらったりありますが、デザイン除く部分は基本的に1人で担当しました。&lt;/p&gt;

&lt;p&gt;(PHP案件がさんざんなできだったので、このAndroidアプリでようやく自身を取り戻しました)&lt;/p&gt;

&lt;p&gt;7月あたりに&lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.co.galaxyagency.akippa&#34; target=&#34;_blank&#34;&gt;Android案件がもう一個&lt;/a&gt;あって、10,11月あたりにiOS案件を担当しました。(このときは始めてのObjC)(このiOSアプリは非公開だが、UIはツイッターみたいなやつ)&lt;/p&gt;

&lt;p&gt;個人的にですが、GDG中国の人からgolangcafe#50に招待されたので、10月に東京にいきました。そのとき初対面ｗ&lt;/p&gt;

&lt;p&gt;12月に入ってから、iOS案件を現在とりかかっているところです。(swiftでやってます)&lt;/p&gt;

&lt;p&gt;技術的には結構色々やった気がします。仕事で使った言語だけでも、php,java,objc,swift,javascript,html,goってところでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;去年の目標はどうだった:d52cc0ce3815b3f17a08403570dbe0a6&#34;&gt;去年の目標はどうだった？&lt;/h2&gt;

&lt;p&gt;あ、去年の目標の「人に役立つ何かを作りたい」というのは仕事で達成出来たと思います。ブログを毎月書くというのは、6月達成できてないですね。。。「入門ソーシャルデータ」を読破も全く手つけてない。。。&lt;/p&gt;

&lt;p&gt;ただ、目標には挙げてなかったですけど、ずっとやりたかった神戸のフルマラソンを完走しました！これは個人的にめっちゃ嬉しかったです。少しずつでも練習して、一歩一歩前に進めば、目標は達成できることを学び実感できました。&lt;/p&gt;

&lt;p&gt;自動車業界でECUを作ってきましたが、ユーザーの反応がほぼダイレクトに分かるってのは楽しいですね。&lt;/p&gt;

&lt;p&gt;スマホアプリ開発楽しすぎ！&lt;/p&gt;

&lt;h2 id=&#34;来年の目標は:d52cc0ce3815b3f17a08403570dbe0a6&#34;&gt;来年の目標は&lt;/h2&gt;

&lt;p&gt;毎月ブログを書いてアウトプットすることは毎年の目標としよう。&lt;/p&gt;

&lt;p&gt;お金もちょっと使い過ぎ感あるので、貯めよかな。1万/月ぐらい。それよりもうちょいお金を増やす努力してみようかな。&lt;/p&gt;

&lt;p&gt;マラソンアプリを世の中に出せるぐらいまでにもっていきたいですね。&lt;/p&gt;

&lt;p&gt;あ、フルマラソン1回、ハーフ2回ぐらいは出て、ハーフは2時間切ること、フルは5時間30分切ることを目標としたいです。&lt;/p&gt;

&lt;p&gt;仕事的には、少し仕事が粗い部分があるので適度に丁寧にするのと、今年の仕事の経験を活かして、スピードアップして作業が進められたらいいなと思います。&lt;/p&gt;

&lt;p&gt;あと、日曜の講師の仕事もありましたね。教えることは自分の勉強にもなるので、理解してもらえるように本チャンの仕事に支障がないように調整しながら、準備等進めて行きたいと思います。&lt;/p&gt;

&lt;p&gt;あ、&lt;a href=&#34;https://github.com/gophersjp/go&#34; target=&#34;_blank&#34;&gt;golangの翻訳&lt;/a&gt;もそろそろ始めていきたいな。参加するだけして、何もしてなかったので。。。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:d52cc0ce3815b3f17a08403570dbe0a6&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ぜんぜんまとまらないけど、とにかく今年もお世話になったみなさまありがとうございました。来年も引き続きよろしくお願いします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerを導入した際の作業メモ</title>
      <link>/kwmt27.net/index.php/2014/12/12/docker/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/12/12/docker/</guid>
      <description>

&lt;h2 id=&#34;はじめに:63866d49e69bb608150d119d01b9a6ae&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;AWSで運用していたこのWordpressをさくらVPSに移行するにあたって、ついでに&lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34;&gt;Docker&lt;/a&gt;も勉強しようかなぁと思って、さくらVPSに&lt;a href=&#34;https://coreos.com/&#34; target=&#34;_blank&#34;&gt;CoreOS&lt;/a&gt;を載せて、Dockerでnginx + wordpressを動かすためにDockerについていろいろ調べたので、それのメモ。&lt;/p&gt;

&lt;h2 id=&#34;dockerの基礎-学習:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerの基礎(学習)&lt;/h2&gt;

&lt;p&gt;個人的にDockerについてはこちらがわかりやすかった記事&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nkbp.jp/1t790Tn&#34; target=&#34;_blank&#34;&gt;ITpro Report &amp;#8211; ［Docker解説］「コンテナ」単位でシステム構成を“固める”：ITpro &lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hello-docker:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Hello Docker&lt;/h3&gt;

&lt;p&gt;Docker公式のHello world&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/1w4IwmU&#34; target=&#34;_blank&#34;&gt;Dockerizing Applications &amp;#8211; Docker Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;docker run -d 
&lt;/pre&gt;

&lt;p&gt;の &lt;code&gt;-d&lt;/code&gt;はバックグラウンドで起動させるオプション&lt;/p&gt;

&lt;h3 id=&#34;dockerfileリファレンス-fromとかrunとかの説明はココ:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerfileリファレンス FROMとかRUNとかの説明はココ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.com/reference/builder/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.docker.com/reference/builder/&#34;&gt;http://docs.docker.com/reference/builder/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ベストプラクティス:63866d49e69bb608150d119d01b9a6ae&#34;&gt;ベストプラクティス&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1z27frW&#34; target=&#34;_blank&#34;&gt;Best practices for writing Dockerfiles &amp;#8211; Docker Documentation&lt;/a&gt;(英語)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1z27i7f&#34; target=&#34;_blank&#34;&gt;Best practices for writing Dockerfiles 日本語訳（仮） &amp;#8211; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;作業:63866d49e69bb608150d119d01b9a6ae&#34;&gt;作業&lt;/h2&gt;

&lt;h3 id=&#34;さくらvpsにcoreosをインストールするには:63866d49e69bb608150d119d01b9a6ae&#34;&gt;さくらVPSにCoreOSをインストールするには&lt;/h3&gt;

&lt;p&gt;さくらVPSの管理コンソール画面が変わってたり、注意と書いてあるところはマジで注意しないといけなかったり、ネットワーク設定でens3をeth0にしないといけなかったりありましたが、ほぼ下記でインストールできました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/yujiod/items/dc154120c4df2e938111&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://qiita.com/yujiod/items/dc154120c4df2e938111&#34;&gt;http://qiita.com/yujiod/items/dc154120c4df2e938111&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dockerのコンテナを起動するには-h2:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerのコンテナを起動するには&lt;/h2&gt;&lt;/h3&gt;

&lt;p&gt;CoreOS(さくらVPS)にログインしてる状態で&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;docker run -it -v /home/core:/core -p 80:80 -p 22 --name=&#34;wordpress&#34;  -d -t oskarhane/docker-wordpress-nginx-ssh
&lt;/pre&gt;

&lt;h3 id=&#34;dockerのコンテナの中に入るには:63866d49e69bb608150d119d01b9a6ae&#34;&gt;Dockerのコンテナの中に入るには&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;docker exec -it wordpress bash
&lt;/pre&gt;

&lt;p&gt;参考:&lt;a href=&#34;http://bit.ly/1IyYhIa&#34; target=&#34;_blank&#34;&gt;コンテナに入りたい？それ docker exec でできるよ &amp;#8211; Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下は、docker ver1.3以前に使用していた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1sbiVns&#34; target=&#34;_blank&#34;&gt;起動中のDockerコンテナにnsenterで接続する &amp;#8211; PiyoPiyoDucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1l2uqIT&#34; target=&#34;_blank&#34;&gt;Dockerコンテナに入るなら SSH より nsinit が良さそう &amp;#8211; Gosuke Miyashita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ホストとコンテナ間でファイルを共有するには:63866d49e69bb608150d119d01b9a6ae&#34;&gt;ホストとコンテナ間でファイルを共有するには&lt;/h3&gt;

&lt;pre class=&#34;go&#34;&gt;docker -v &amp;lt;ホスト側&amp;gt;:&amp;lt;コンテナ側&amp;gt;
&lt;/pre&gt;

&lt;p&gt;参考:&lt;a href=&#34;http://bit.ly/1vDBvon&#34; target=&#34;_blank&#34;&gt;Docker 1.3の新機能を試してみる ｜ Developers.IO&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Studioを1.0にバージョンアップしたら、Gradle DSL method not found: &amp;#8216;runProguard()&amp;#8217;って怒られた場合</title>
      <link>/kwmt27.net/index.php/2014/12/09/android-studio-1-0-gradle-dsl-method-not-found-runproguard/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/12/09/android-studio-1-0-gradle-dsl-method-not-found-runproguard/</guid>
      <description>&lt;p&gt;Android Studioがついに1.0になりましたね。ということで&lt;a href=&#34;http://bit.ly/1ueoqlV&#34; target=&#34;_blank&#34;&gt;ダウンロード&lt;/a&gt;して、起動したらgradleのバージョンを1.0.0にしろとかいろいろ怒られたんですが、そこらへんは自動で修正してくれたのに、下記のエラーは自動で修正してくれませんでしたのでメモ。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;Error:(32, 0) Gradle DSL method not found: &#39;runProguard()&#39;
&lt;/pre&gt;

&lt;p&gt;対応は&lt;code&gt;runProguard&lt;/code&gt;を&lt;code&gt;minifyEnabled&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;diff --git a/app/build.gradle b/app/build.gradle
index 351288d..08b53f8 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -29,7 +29,7 @@ android {
-            runProguard false
+            minifyEnabled false
             proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
         }
     }
&lt;/pre&gt;

&lt;p&gt;詳しくは、&lt;a href=&#34;http://bit.ly/1ueoeD6&#34; target=&#34;_blank&#34;&gt;Migrating Gradle Projects to version 1.0.0 &amp;#8211; Android Tools Project Site&lt;/a&gt; に記載してあります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>android wear appのインストール時の注意点</title>
      <link>/kwmt27.net/index.php/2014/11/19/notice_when_install_android_wearable_apps/</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/11/19/notice_when_install_android_wearable_apps/</guid>
      <description>

&lt;p&gt;開発時（といいますか、デバッグキーを使ってビルドしている時）は、携帯端末とWearable端末に別々にインストールしないと、携帯端末だけにインストールしても自動的にWearable端末にインストールされません。&lt;/p&gt;

&lt;p&gt;リリースキーを使って署名している場合は、自動的にインストールされます。&lt;/p&gt;

&lt;h2 id=&#34;参考:3e31c56e68adfbff999614b6e2ca60cf&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/wearables/apps/creating.html#Install&#34; target=&#34;_blank&#34;&gt;Install the Wearable App&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TwitterのFabric SDKをAndroid Studioで使ってみる</title>
      <link>/kwmt27.net/index.php/2014/11/10/how-to-use-twitter-fabric-sdk-with-android-studio/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/11/10/how-to-use-twitter-fabric-sdk-with-android-studio/</guid>
      <description>

&lt;h2 id=&#34;はじめに:b0282adda1b6c326f04989549de27210&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;ひさびさTwitterをつかってアプリつくろうと思って&lt;a href=&#34;https://dev.twitter.com/&#34; target=&#34;_blank&#34;&gt;ディベロッパーサイト&lt;/a&gt;に行ったら、fabric?????とか出てきてなんじゃこれ？と思って調べてたら、10/22(現地時間)に発表されたTwitterのモバイル向け新SDKとやららしい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://bit.ly/1CYl4HO&#34; target=&#34;_blank&#34;&gt;Twitter、モバイルアプリ向け新SDK「Fabric」発表　パスワード不要の次世代認証「Digits」リリース &amp;#8211; ITmedia ニュース&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まぁ英語でもいいんだけど、日本語の情報ないかなぁと探してみたけど、全然ない(´・ω・`)&lt;/p&gt;

&lt;p&gt;ということで、Android StudioでFabric SDKのセットアップしてから、ツイートできるようになるまでを書いてみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;android版fabricの公式サイト:b0282adda1b6c326f04989549de27210&#34;&gt;Android版Fabricの公式サイト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android&#34;&gt;https://dev.twitter.com/twitter-kit/android&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;確認したバージョン:b0282adda1b6c326f04989549de27210&#34;&gt;確認したバージョン&lt;/h2&gt;

&lt;pre class=&#34;go&#34;&gt;Android Studio：0.9.2
Fabric SDK：1.0.1
&lt;/pre&gt;

&lt;h2 id=&#34;アプリの登録:b0282adda1b6c326f04989549de27210&#34;&gt;アプリの登録&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://apps.twitter.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://apps.twitter.com/&#34;&gt;https://apps.twitter.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これは普通に登録するだけ（今までどおり）&lt;/p&gt;

&lt;h2 id=&#34;fabric-sdkのセットアップ:b0282adda1b6c326f04989549de27210&#34;&gt;Fabric SDKのセットアップ&lt;/h2&gt;

&lt;p&gt;IDEプラグインをダウンロードすることもできるみたいだが、Gradleを使っているなら、build.gradleに書くだけで済ませたい。&lt;/p&gt;

&lt;p&gt;基本的には下記を参考にすればよいと思うのですが、早速build.gradleの設定ではまった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34;&gt;https://dev.twitter.com/twitter-kit/android/integrate&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記書いてあるとおりに記述してもsyncに失敗するので、Fabric SDKを使うには下記のように設定すればsyncは通っていけたっぽい。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;--- a/build.gradle
+++ b/build.gradle
@@ -3,17 +3,21 @@
 buildscript {
     repositories {
         jcenter()
+        maven { url &#39;https://maven.fabric.io/repo&#39; }
     }
     dependencies {
         classpath &#39;com.android.tools.build:gradle:0.12.+&#39;
+        classpath &#39;io.fabric.tools:gradle:1.+&#39;
     }
 }
 
 allprojects {
+    apply plugin: &#39;io.fabric&#39;
     repositories {
         jcenter()
+        maven { url &#39;https://maven.fabric.io/repo&#39; }
     }
 }
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;--- a/app/build.gradle
+++ b/app/build.gradle
@@ -23,5 +37,7 @@ dependencies {
     compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
     compile &#39;com.google.android.gms:play-services:6.1.71&#39;
     compile &#39;com.android.support:support-v4:21.+&#39;
+    compile(&#39;com.twitter.sdk.android:twitter:1.0.0@aar&#39;) {
+        transitive = true;
+    }
 }
&lt;/pre&gt;

&lt;h2 id=&#34;api-keyとapi-secretを追加する:b0282adda1b6c326f04989549de27210&#34;&gt;API KEYとAPI Secretを追加する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34; target=&#34;_blank&#34; class=&#34;broken_link&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/integrate&#34;&gt;https://dev.twitter.com/twitter-kit/android/integrate&lt;/a&gt;&lt;/a&gt; に「Add API Key and Build Secret」があるが、&lt;project&gt;/app/crashlytics.properties にAPI KEYとAPI Secretを書きます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;twitterConsumerSecret=&amp;lt;YOUR SECRET&amp;gt;
twitterConsumerKey=&amp;lt;YOUR KEY&amp;gt;
&lt;/pre&gt;

&lt;p&gt;crashlytics.propertiesに書いたKEYとSECRETの使い方に関しては、下記のリポジトリのbuild.gradleが参考になった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/twitterdev/cannonball-android/blob/master/app/build.gradle&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/twitterdev/cannonball-android/blob/master/app/build.gradle&#34;&gt;https://github.com/twitterdev/cannonball-android/blob/master/app/build.gradle&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;僕が書いたのは下記です。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,5 +1,13 @@ apply plugin: &#39;com.android.application&#39;
 
+Properties props = new Properties()
+try {
+    props.load(file(&#39;./crashlytics.properties&#39;).newDataInputStream())
+} catch (Exception ex) {
+    throw new GradleException(&#34;Missing crashlytics.properties, check the crashlytics.properties file.&#34;);
+}
+
+
 android {
     compileSdkVersion 21
     buildToolsVersion &#34;20.0.0&#34;
@@ -12,7 +20,13 @@ android {
         versionName &#34;1.0&#34;
     }
     buildTypes {
+        debug {
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_KEY&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerKey&#34;)}\&#34;&#34;
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_SECRET&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerSecret&#34;)}\&#34;&#34;
+        }
         release {
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_KEY&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerKey&#34;)}\&#34;&#34;
+            buildConfigField &#34;String&#34;, &#34;CONSUMER_SECRET&#34;, &#34;\&#34;${props.getProperty(&#34;twitterConsumerSecret&#34;)}\&#34;&#34;
             runProguard false
             proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
         }

&lt;/pre&gt;

&lt;p&gt;これは、buildConfigFieldを使っていて、アプリ内でBuildConfigを使ってKEYとSECRETを使えるようにしています。&lt;/p&gt;

&lt;p&gt;次のように、ApplicationクラスのサブクラスでAPI KEYとSECRETを使ってFabric SDKの初期化します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;public class App extends Application{

    @Override
    public void onCreate() {
        super.onCreate();
        TwitterAuthConfig authConfig = new TwitterAuthConfig(BuildConfig.CONSUMER_KEY, BuildConfig.CONSUMER_SECRET);
        Fabric.with(this, new TwitterCore(authConfig));
    }
}
&lt;/pre&gt;

&lt;p&gt;※AndroidManifest.xmlに&lt;code&gt;android:name=&amp;quot;.App&amp;quot;&lt;/code&gt;を追加することを忘れないこと。&lt;/p&gt;

&lt;h2 id=&#34;twitterでログインする:b0282adda1b6c326f04989549de27210&#34;&gt;Twitterでログインする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/twitter-login&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/twitter-login&#34;&gt;https://dev.twitter.com/twitter-kit/android/twitter-login&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ログイン画面を作成します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;&amp;lt;com.twitter.sdk.android.core.identity.TwitterLoginButton
        android:id=&#34;@+id/login_button&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;プレビューは「SIGN IN WITH TWITTER」と英語表記ですが、日本語設定の端末で確認すると「Twitterでログイン」と日本語になっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/11/sign_in_with_twitter-168x300.png&#34; alt=&#34;sign_in_with_twitter&#34; width=&#34;168&#34; height=&#34;300&#34; class=&#34;aligncenter size-thumbnail wp-image-1356&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Activityの方は公式サイトどおりでいけます。&lt;/p&gt;

&lt;p&gt;ログイン成功後の&lt;code&gt;TwitterSession&lt;/code&gt;を受け取る事ができるのですが、&lt;code&gt;result.data&lt;/code&gt;で取得できます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;mTwitterLoginButton = (TwitterLoginButton) findViewById(R.id.login_button);
mTwitterLoginButton.setCallback(new Callback&amp;lt;TwitterSession&gt;() {
    @Override
        public void success(Result&amp;lt;TwitterSession&gt; result) {
        mTwitterSession = result.data;
    }
}   
&lt;/pre&gt;

&lt;h2 id=&#34;twitterのrest-apiを使う:b0282adda1b6c326f04989549de27210&#34;&gt;TwitterのREST APIを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/api&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/api&#34;&gt;https://dev.twitter.com/twitter-kit/android/api&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式サイトの例は、１つのツイートを取得しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid&#34;&gt;https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;僕はツイートしたかったので、こんな感じになりました。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;/**
 * ツイートする。
 * @param message ツイートする内容
 * @see https://dev.twitter.com/rest/reference/post/statuses/update
 */
private void tweet(String message) {
    TwitterApiClient twitterApiClient = TwitterCore.getInstance().getApiClient();
    StatusesService statusesService = twitterApiClient.getStatusesService();

    statusesService.update(message, null, false, null, null, null, false, null, new Callback&amp;lt;Tweet&gt;() {
        @Override
        public void success(Result&amp;lt;Tweet&gt; result) {
            mHandler.post(new Runnable() {
                public void run() {
                    Toast.makeText(self, &#34;ツイートしました。&#34;, Toast.LENGTH_SHORT).show();
                }
            });
        }

        public void failure(TwitterException exception) {
            mHandler.post(new Runnable() {
                public void run() {
                    Toast.makeText(self, &#34;ツイートに失敗しました。&#34;, Toast.LENGTH_SHORT).show();
                }
            });

        }
    });
}
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;StatusesService#update&lt;/code&gt;の引数の順番は、REST APIドキュメントの順番どおりです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/post/statuses/update&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/rest/reference/post/statuses/update&#34;&gt;https://dev.twitter.com/rest/reference/post/statuses/update&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;tweet&lt;/code&gt;メソッドを呼びたいタイミングで呼べばツイートできます。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:b0282adda1b6c326f04989549de27210&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;以上で、Fabric SDKのセットアップからツイートまでを書きましたが、&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/tweetui&#34; target=&#34;_blank&#34;&gt;TweetUi Kit&lt;/a&gt;や &lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/compose&#34; target=&#34;_blank&#34;&gt;TweetComposer Kit&lt;/a&gt;なるものがあったり、電話番号を使ってサインインする&lt;a href=&#34;https://dev.twitter.com/twitter-kit/android/digits&#34; target=&#34;_blank&#34;&gt;Digits&lt;/a&gt;なるものがあるみたいですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xcode で controlを押しながら接続出来ない場合の対処方法</title>
      <link>/kwmt27.net/index.php/2014/10/01/cannot-create-connections-in-xcode6-storyboard/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/10/01/cannot-create-connections-in-xcode6-storyboard/</guid>
      <description>

&lt;h2 id=&#34;現象:f74462392c78f8d5ab6a953cf4cfa439&#34;&gt;現象&lt;/h2&gt;

&lt;p&gt;TableViewなどのViewをcontrol押しながら、ヘッダーファイルにドラッグしても、うんともすんともないことがある。&lt;/p&gt;

&lt;h2 id=&#34;原因:f74462392c78f8d5ab6a953cf4cfa439&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;ViewControllerとクラスが対応付けがされてないため。&lt;/p&gt;

&lt;h2 id=&#34;対処:f74462392c78f8d5ab6a953cf4cfa439&#34;&gt;対処&lt;/h2&gt;

&lt;p&gt;ViewControllerを選択し、&amp;#8221;Show the identity inspection&amp;#8221;をクリックし、Custom Classで対応付けたいクラスを選択する。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>構造体にフィールドを追加しないで、JSONに動的にフィールドを追加したい #golang</title>
      <link>/kwmt27.net/index.php/2014/09/23/how-to-add-a-field-to-the-json-output-without-including-it-in-the-struct/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/23/how-to-add-a-field-to-the-json-output-without-including-it-in-the-struct/</guid>
      <description>

&lt;h2 id=&#34;はじめに:d6d2446f3900c5d3546220864ee13d11&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;JSONを返したい場合、定義済みの構造体に対して&lt;code&gt;json.Marshal&lt;/code&gt;とかして、JSONにしていたのですが、下記の&lt;code&gt;Book&lt;/code&gt;構造体の例だと、返せるフィールドは&lt;code&gt;Title,Author&lt;/code&gt;だけになってしまいます。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title  string
    Author string
}

response, _ := json.Marshal(book)
fmt.Fprintf(w, string(response))
&lt;/pre&gt;

&lt;p&gt;それ以外のフィールドも動的に追加するにはどうしたらか調べたので書いておこうかと思います。&lt;/p&gt;

&lt;h2 id=&#34;方法:d6d2446f3900c5d3546220864ee13d11&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;基本的には、&lt;a href=&#34;http://stackoverflow.com/questions/23045884/can-i-use-marshaljson-to-add-arbitrary-fields-to-a-json-encoding-in-golang&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt;に書いてありますので、参考くださいなんですが、下記のような感じです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title  string
    Author string
}

type FakeBook Book

func (b Book) MarshalJSON() ([]byte, error) {
    return json.Marshal(struct {
        FakeBook
        Genre string
    }{
        FakeBook: FakeBook(b),
        Genre:    &#34;Satire&#34;,
    })
}
&lt;/pre&gt;

&lt;p&gt;このように、&lt;code&gt;Book&lt;/code&gt;構造体に対して、&lt;code&gt;Mashaler&lt;/code&gt;インターフェースを実装することで、フィールドを追加することができます。&lt;/p&gt;

&lt;p&gt;結果は以下のとおり。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{
  &#34;Title&#34;: &#34;Catch-22&#34;,
  &#34;Author&#34;: &#34;Joseph Heller&#34;,
  &#34;Genre&#34;: &#34;Satire&#34;
}
&lt;/pre&gt;

&lt;h2 id=&#34;仕組みとしては-簡単に:d6d2446f3900c5d3546220864ee13d11&#34;&gt;仕組みとしては(簡単に)&lt;/h2&gt;

&lt;p&gt;この場合、&lt;code&gt;Book&lt;/code&gt;は&lt;code&gt;Marshaler&lt;/code&gt;インターフェースを実装したことになります。(&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go?h=MarshalJSON#L191&#34; target=&#34;_blank&#34;&gt;Marshalerインターフェース&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;これによって、&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go#L356&#34; target=&#34;_blank&#34;&gt;Marshalerインターフェースを実装しているなら&lt;/a&gt;、&lt;code&gt;marshalerEncoder&lt;/code&gt;がコールされ、&lt;a href=&#34;http://golang.org/src/pkg/encoding/json/encode.go#L414&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;MarshalJSON&lt;/code&gt;がコールされます。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;配列の各要素に追加したい場合も同様で:d6d2446f3900c5d3546220864ee13d11&#34;&gt;配列の各要素に追加したい場合も同様で、&lt;/h2&gt;

&lt;p&gt;つまり次のような場合、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;type Book struct {
    Title   string
    Authors []Author
}

type Author struct {
    Name  string
    Email string
}
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Author&lt;/code&gt;構造体に&lt;code&gt;Mashaler&lt;/code&gt;インターフェースを実装してあげればいいだけです。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;func (b Author) MarshalJSON() ([]byte, error) {
    return json.Marshal(struct {
        FakeAuthor
        Genre string
    }{
        FakeAuthor: FakeAuthor(b),
        Genre:      &#34;Satire&#34;,
    })
}
&lt;/pre&gt;

&lt;p&gt;Playground: &lt;a href=&#34;http://play.golang.org/p/tZEaLTt7Fc&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://play.golang.org/p/tZEaLTt7Fc&#34;&gt;http://play.golang.org/p/tZEaLTt7Fc&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結果は次のようになります。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;{
  &#34;Title&#34;: &#34;Catch-22&#34;,
  &#34;Authors&#34;: [
    {
      &#34;Name&#34;: &#34;Joseph&#34;,
      &#34;Email&#34;: &#34;abc@xxx.com&#34;,
      &#34;Genre&#34;: &#34;Satire&#34;
    },
    {
      &#34;Name&#34;: &#34;Heller&#34;,
      &#34;Email&#34;: &#34;dec@yyy.com&#34;,
      &#34;Genre&#34;: &#34;Satire&#34;
    }
  ]
}
&lt;/pre&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genmaiを使ってみた。 #golang</title>
      <link>/kwmt27.net/index.php/2014/09/22/try-using-genmai-of-orm-for-golang/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/22/try-using-genmai-of-orm-for-golang/</guid>
      <description>&lt;p&gt;ORM for golangの&lt;a href=&#34;http://bit.ly/1ucuNGX&#34; target=&#34;_blank&#34;&gt;Genmai&lt;/a&gt;を使って、MySQLにアクセスしてみた。&lt;/p&gt;

&lt;p&gt;使い方は以下の様な感じです。&lt;/p&gt;

&lt;p&gt;テーブルを定義します。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;// ユーザーテーブル
type User struct {
    Id    int `db:&#34;pk&#34;`
    Name  string
    genmai.TimeStamp
}
&lt;/pre&gt;

&lt;p&gt;データベースを作る時に、&lt;code&gt;&amp;amp;genmai.MySQLDialect{}&lt;/code&gt;と、&lt;a href=&#34;https://github.com/go-sql-driver/mysql/#dsn-data-source-name&#34; target=&#34;_blank&#34;&gt;DSN&lt;/a&gt;を指定する。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;database, err := genmai.New(&amp;genmai.MySQLDialect{}, dataSourceName)
// userテーブルがなければ、作成する
if err := database.CreateTableIfNotExists(&amp;User{}); err != nil {
    panic(err)
}
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;// 挿入したいデータ
data := []User{
        {Name:&#34;Aさん&#34;},
        {Name:&#34;Bさん&#34;},
        {Name:&#34;Cさん&#34;},
    }
// dataを挿入
if _, err := database.Insert(data); err!= nil{
    panic(err)
}
&lt;/pre&gt;

&lt;pre class=&#34;go&#34;&gt;// 取得したい空のデータを用意
var users []User
// データを取得
if err:= db.Select(&amp;users); err != nil{
    panic(err)
}
&lt;/pre&gt;

&lt;p&gt;これを実行すると、&lt;/p&gt;

&lt;p&gt;テーブル作成できた！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_struct-600x73.png&#34; alt=&#34;table_struct&#34; width=&#34;600&#34; height=&#34;73&#34; class=&#34;aligncenter size-thumbnail wp-image-1321&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_struct-600x73.png 600w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-300x36.png 300w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-1024x125.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-624x76.png 624w, http://kwmt27.net/wp-content/uploads/2014/09/table_struct-900x110.png 900w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;データの挿入もOK！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_content-600x152.png&#34; alt=&#34;table_content&#34; width=&#34;600&#34; height=&#34;152&#34; class=&#34;aligncenter size-thumbnail wp-image-1320&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/table_content-600x152.png 600w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-300x76.png 300w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-1024x259.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-624x158.png 624w, http://kwmt27.net/wp-content/uploads/2014/09/table_content-900x228.png 900w, http://kwmt27.net/wp-content/uploads/2014/09/table_content.png 1128w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あれ？データの取得が下記のエラーでコケるなぁ。&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;unsupported driver -&gt; Scan pair: []uint8 -&gt; *time.Time
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;time.Time&lt;/code&gt;を使ってる箇所は、&lt;code&gt;User&lt;/code&gt;構造体の&lt;code&gt;genmai.TimeStamp&lt;/code&gt;のところだけです。ちなみに&lt;code&gt;genmai.TimeStamp&lt;/code&gt;がどうなっているかというと、&lt;/p&gt;

&lt;pre class=&#34;go&#34;&gt;// TimeStamp is fields for timestamps that commonly used.
type TimeStamp struct {
    // Time of creation. This field will be set automatically by BeforeInsert.
    CreatedAt time.Time `json:&#34;created_at&#34;`

    // Time of update. This field will be set by BeforeInsert or BeforeUpdate.
    UpdatedAt time.Time `json:&#34;updated_at&#34;`
}
&lt;/pre&gt;

&lt;p&gt;となっています。&lt;/p&gt;

&lt;p&gt;また、MySQLのドライバに、&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34; target=&#34;_blank&#34;&gt;github.com/go-sql-driver/mysql&lt;/a&gt;を使っています。&lt;/p&gt;

&lt;p&gt;うん、ココらへんが怪しいですね。とおもって調べていたら、&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34; target=&#34;_blank&#34;&gt;github.com/go-sql-driver/mysql&lt;/a&gt;は&lt;code&gt;time.Time&lt;/code&gt;はサポートしているのですが、[]byteからtime.Timeへの変換がデフォルトではできません。これを可能にするには、DSNのパラメータに、&lt;code&gt;parseTime=true&lt;/code&gt;をつける必要があります。というのが、下記に書いてあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql#timetime-support&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql#timetime-support&#34;&gt;https://github.com/go-sql-driver/mysql#timetime-support&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android StudiodでgreenDaoを使う</title>
      <link>/kwmt27.net/index.php/2014/09/17/how-to-use-greendao-library/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/17/how-to-use-greendao-library/</guid>
      <description>

&lt;h2 id=&#34;はじめに:c037d87e89bf2c7318095970bf4dad30&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;AndroidのORMライブラリについて調べてみてまして、ORMLite、Active Android、greenDaoが有名のようです。&lt;/p&gt;

&lt;p&gt;ORMLite、Active Androidは、アノテーションを使っていて、greenDaoは使っていません。&lt;/p&gt;

&lt;p&gt;アノテーションはリフレクションに依存しているため、特にAndroidデバイスにおいては、パフォーマンスに影響出ますので、greenDaoを使おうかと思います。(&lt;a href=&#34;#sanko&#34;&gt;参考1&lt;/a&gt;などをみますと、パフォーマンスにクリティカルに影響があるアプリでなければどれつかっても良さそうですが・・・）&lt;/p&gt;

&lt;h2 id=&#34;使い方としては:c037d87e89bf2c7318095970bf4dad30&#34;&gt;使い方としては、&lt;/h2&gt;

&lt;p&gt;２ステップ必要で、１ステップ目は、モデル定義しgreendao-generatorでコードを自動生成します。(普通のjava)&lt;/p&gt;

&lt;p&gt;２ステップ目として、自動生成したコードをAndroidに組み込みます。&lt;/p&gt;

&lt;p&gt;それで、自動生成するために新規にjavaプロジェクトを作る必要があると書いてある参考サイトが多くて、確かにそれでもいいのですが、別プロジェクトを作るのが面倒くさいし、プロジェクトが別なので管理がバラバラになりそうなので、なんとかしてのプロジェクトで出来ないか調べていた所、ちょ～分かりやすく書いて下さっていたサイトがありましたので、リンク張らせて頂きます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/1yf9A5G&#34; target=&#34;_blank&#34;&gt;Android Studioでgradle taskを使ってgreenDaoのDao生成を行う &amp;#8211; きょこみのーと&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ほとんど上記で、Android Studioのバージョンが0.8時に、リポジトリがmavenCentral()からjcenter()に変更になったことと、自動生成の出力先(上記のサイトではdaoOutputDirPath)に注意することぐらいでしょうか。&lt;/p&gt;

&lt;p&gt;あとは、ココらへんを見たりしてgreenDaoの使い方を確認すると良いと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/YRdS3A&#34; target=&#34;_blank&#34;&gt;Documentation | greenDAO – Android ORM for SQLite&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:c037d87e89bf2c7318095970bf4dad30&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;li id=&#34;sanko&#34;&gt;
  &lt;a href=&#34;http://bit.ly/1wBwKBn&#34; target=&#34;_blank&#34;&gt;Androidで使えるOR Mapper: ORMLite « LINE Engineers&amp;#8217; Blog&lt;/a&gt;
&lt;/li&gt;
  1. &lt;a href=&#34;http://bit.ly/Xzc3r0&#34; target=&#34;_blank&#34;&gt;Non-technical FAQ | greenDAO – Android ORM for SQLite&lt;/a&gt;
  2. &lt;a href=&#34;http://bit.ly/XzcGki&#34; target=&#34;_blank&#34;&gt;ormlite &amp;#8211; Green DAO vs ORM lite vs Active Android &amp;#8211; Stack Overflow&lt;/a&gt;
  3. &lt;a href=&#34;http://bit.ly/YRe8zz&#34; target=&#34;_blank&#34;&gt;[Android Tips] ActiveAndroid を使って ActiveRecord ライクに SQLite を操作する ｜ Developers.IO&lt;/a&gt;
      * &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798040029/kwmt27-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;Androidオープンソースライブラリ徹底活用(書籍)&lt;/a&gt;&lt;/ol&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intellij IDEAでPlant UMLを使えるようにする。</title>
      <link>/kwmt27.net/index.php/2014/09/12/how_to_setup_plant_uml_in_intellij_idea/</link>
      <pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/12/how_to_setup_plant_uml_in_intellij_idea/</guid>
      <description>

&lt;h2 id=&#34;はじめに:2f018e26ec21478fb3352fba8610c690&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2014/09/11/read_webdbpress_about_webapi_design/&#34; title=&#34;WEB+DB PRESS Vol.82 の「Web APIデザインの鉄則」特集を読んだ。&#34;&gt;WEB+DB PRESS Vol.82 の「Web APIデザインの鉄則」特集を読んで&lt;/a&gt;、&lt;a href=&#34;http://plantuml.sourceforge.net/index.html&#34; target=&#34;_blank&#34;&gt;Plant UML&lt;/a&gt;というツールを知ったのですが、さっそくIntellij IDEAで使えたらいいなぁと思って、使えるようになったので、その設定方法を書いておこうかと思います。といっても、プラグインをインストール＋αぐらいですが、、、&lt;/p&gt;

&lt;h2 id=&#34;設定方法:2f018e26ec21478fb3352fba8610c690&#34;&gt;設定方法&lt;/h2&gt;

&lt;p&gt;いつものIntellij IDEAにPluginをインストール画面(設定画面(⌘ + ,)-&amp;gt;Pluginを選択-&amp;gt;Browse repositoriesをクリック)から、&amp;#8221;plant&amp;#8221;で検索すると下記のような検索結果がでますが、「PlantUML integration」をインストールする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/スクリーンショット-2014-09-11-18.49.41-360x300.png&#34; alt=&#34;PlantUML integration Plugin選択画面&#34; width=&#34;360&#34; height=&#34;300&#34; class=&#34;aligncenter size-thumbnail wp-image-1294&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/スクリーンショット-2014-09-11-18.49.41-360x300.png 360w, http://kwmt27.net/wp-content/uploads/2014/09/スクリーンショット-2014-09-11-18.49.41-1024x852.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/スクリーンショット-2014-09-11-18.49.41-624x519.png 624w&#34; sizes=&#34;(max-width: 360px) 100vw, 360px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これだけで、とりあえず、test.pumlファイルを作ってみました（New -&amp;gt;UML State）。するとサンプルコードが書かれたファイルが作成されます。&lt;/p&gt;

&lt;p&gt;コードがあるからには図も見たいなぁと思って、View -&amp;gt; Tool Windows -&amp;gt; PlantUMLを選択し、表示させようとしたところ、&amp;#8221;Dot Executable〜&amp;#8221;などとエラーが出てしまいました。&lt;/p&gt;

&lt;p&gt;このエラーにも書かれていますが、&lt;a href=&#34;http://www.graphviz.org/&#34; target=&#34;_blank&#34;&gt;Graphviz(dot)&lt;/a&gt;というソフトが必要になりますので、それを&lt;a href=&#34;http://www.graphviz.org/Download..php&#34; target=&#34;_blank&#34;&gt;インストール&lt;/a&gt;します。&lt;/p&gt;

&lt;p&gt;Intellij IDEAが起動している場合は再起動すると、図が表示されることが確認できると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/PlantUML_Intellij-407x300.png&#34; alt=&#34;PlantUML_Intellij&#34; width=&#34;407&#34; height=&#34;300&#34; class=&#34;aligncenter size-thumbnail wp-image-1296&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/PlantUML_Intellij-407x300.png 407w, http://kwmt27.net/wp-content/uploads/2014/09/PlantUML_Intellij-1024x754.png 1024w, http://kwmt27.net/wp-content/uploads/2014/09/PlantUML_Intellij-624x459.png 624w, http://kwmt27.net/wp-content/uploads/2014/09/PlantUML_Intellij-900x662.png 900w&#34; sizes=&#34;(max-width: 407px) 100vw, 407px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:2f018e26ec21478fb3352fba8610c690&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;・&lt;a href=&#34;http://bit.ly/13K3Xwm&#34; title=&#34;Plant UML公式サイト&#34; target=&#34;_blank&#34;&gt;Plant UML公式サイト&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html#install&#34; target=&#34;_blank&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WEB&#43;DB PRESS Vol.82 の「Web APIデザインの鉄則」特集を読んだ。</title>
      <link>/kwmt27.net/index.php/2014/09/11/read_webdbpress_about_webapi_design/</link>
      <pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/kwmt27.net/index.php/2014/09/11/read_webdbpress_about_webapi_design/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://kwmt27.net/wp-content/uploads/2014/09/20140908_103353-e1410424730181-225x300.jpg&#34; alt=&#34;WEB+DB PRESS Vol.82&#34; width=&#34;225&#34; height=&#34;300&#34; class=&#34;alignleft size-thumbnail wp-image-1288&#34; srcset=&#34;http://kwmt27.net/wp-content/uploads/2014/09/20140908_103353-e1410424730181-225x300.jpg 225w, http://kwmt27.net/wp-content/uploads/2014/09/20140908_103353-e1410424730181-768x1024.jpg 768w&#34; sizes=&#34;(max-width: 225px) 100vw, 225px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166278/kwmt27-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;WEB+DB PRESS Vol.82&lt;/a&gt;を買いました。Go言語が載ってるからという理由で買いましたが、「Web APIデザインの鉄則」という特集があって、おもしろそうなのでよんでみました。&lt;/p&gt;

&lt;h2 id=&#34;第1章-web-apiの基礎知識:7d0d31d6910888acfe6deb790b41df08&#34;&gt;第1章 Web APIの基礎知識&lt;/h2&gt;

&lt;p&gt;この特集ではメッセージ形式をJSONとするRESTful APIの設計について書かれていますが、REST以外のスタイルにRPCなどもあるのに、なぜRESTful APIにするのかを、基礎から丁寧に書いてくれています。&lt;/p&gt;

&lt;p&gt;ちなみに、RESTfulなWeb APIをここでは、ROA(Resource Oriented Architecture)に沿って設計することと定義しています。&lt;/p&gt;

&lt;h2 id=&#34;第2章-リソース設計:7d0d31d6910888acfe6deb790b41df08&#34;&gt;第2章 リソース設計&lt;/h2&gt;

&lt;p&gt;「Eメール送信を行うためのAPI」を題材としています。その題材を元に、リソースに含まれるフィールドをどのように定義するか、その定義をどうやって明文化するかが書かれています。おすすめは、&lt;a href=&#34;http://json-schema.org/&#34; target=&#34;_blank&#34;&gt;JSON Schema&lt;/a&gt;という手法を用いることだとそうです。JSON Schemaを使いながら、題材に必要なリソースを定義していっています。&lt;/p&gt;

&lt;p&gt;語彙を決めるのには先人の知恵（&lt;a href=&#34;http://schema.org/Person&#34;&gt;schema.org&lt;/a&gt;や &lt;a href =&#34;http://www.opensearch.org/Specifications/OpenSearch/1.1&#34; target=&#34;_blank&#34;&gt;OpenSeacrh&lt;/a&gt;) などを参考にするとよいとのことです。&lt;/p&gt;

&lt;h2 id=&#34;第3章-インターフェース設計:7d0d31d6910888acfe6deb790b41df08&#34;&gt;第3章 インターフェース設計&lt;/h2&gt;

&lt;p&gt;ここでは、エンドポイントURI・HTTPメソッド・クエリパラメータを定めていきます。第2章で作成したJSON Shemaによる定義に追加していきます。&lt;/p&gt;

&lt;p&gt;「新しいリソースを作成するエンドポイント」や「すでに存在するリソースを削除するエンドポイント」のそれぞれに対して、どのような要件で作成するかが解説されています。「HTTPメソッドの選び方」も詳しく書いてあります。&lt;/p&gt;

&lt;h2 id=&#34;第4章-エラー表現とドキュメント:7d0d31d6910888acfe6deb790b41df08&#34;&gt;第4章 エラー表現とドキュメント&lt;/h2&gt;

&lt;p&gt;「エラーがなぜ起こったのか」「どのようにすればそれを解決できるか」を機械がわかるような仕組みにするために、エラー表現をどのように決めていくかについて説明されています。&lt;/p&gt;

&lt;p&gt;また、文書だけでは説明できない部分は図を書いたりしますが、その図を作成する&lt;a href=&#34;http://plantuml.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;Plant UML&lt;/a&gt;というツールを紹介しています。&lt;/p&gt;

&lt;h2 id=&#34;感想:7d0d31d6910888acfe6deb790b41df08&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;Web APIの設計について非常に勉強になりました。知らないツールなどもあったので、積極的につかっていきたいと思う。&lt;/p&gt;

&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;
  &lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;
    &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166278/kwmt27-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/61gSqezYgPL._SL160_.jpg&#34; alt=&#34;WEB+DB PRESS Vol.82&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%; margin-bottom: 10px&#34;&gt;
    &lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;
      &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166278/kwmt27-22/ref=nosim/&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;WEB+DB PRESS Vol.82&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;amazlet-powered-date&amp;quot; style=&amp;quot;font-size:80%;margin-top:5px;line-height:120%&amp;quot;&amp;gt;
    posted with &amp;lt;a href=&amp;quot;http://www.amazlet.com/&amp;quot; title=&amp;quot;amazlet&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;amazlet&amp;lt;/a&amp;gt; at 14.09.11
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;amazlet-detail&amp;quot;&amp;gt;
  山口 徹 Jxck 佐々木 大輔 横路 隆 加来 純一 山本 伶 大平 武志 米川 健一 坂本 登史文 若原 祥正 和久田 龍 平栗 遵宜 伊藤 直也 佐藤 太一 高橋 俊幸 海野 弘成 五嶋 壮晃 佐藤 歩 吉村 総一郎 橋本 翔 舘野 祐一 中島 聡 渡邊 恵太 はまちや2 竹原 河合 宜文 &amp;lt;br /&amp;gt;技術評論社 &amp;lt;br /&amp;gt;売り上げランキング: 663
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;amazlet-sub-info&amp;quot; style=&amp;quot;float: left;&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;amazlet-link&amp;quot; style=&amp;quot;margin-top: 5px&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774166278/kwmt27-22/ref=nosim/&amp;quot; name=&amp;quot;amazletlink&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Amazon.co.jpで詳細を見る&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear: left&#34;&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>